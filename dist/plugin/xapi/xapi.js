var RevealXAPI =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 376);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _isPlaceholder = __webpack_require__(41);

/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
module.exports = function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
          return fn(a, _b);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b);
        }) : fn(a, b);
    }
  };
};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _isPlaceholder = __webpack_require__(41);

/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
module.exports = function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _curry2 = __webpack_require__(0);
var _isPlaceholder = __webpack_require__(41);

/**
 * Optimized internal three-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
module.exports = function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;
      case 1:
        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        });
      case 2:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        }) : _curry1(function (_c) {
          return fn(a, b, _c);
        });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
          return fn(_a, _b, c);
        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
          return fn(_a, b, _c);
        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
          return fn(a, _b, _c);
        }) : _isPlaceholder(a) ? _curry1(function (_a) {
          return fn(_a, b, c);
        }) : _isPlaceholder(b) ? _curry1(function (_b) {
          return fn(a, _b, c);
        }) : _isPlaceholder(c) ? _curry1(function (_c) {
          return fn(a, b, _c);
        }) : fn(a, b, c);
    }
  };
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _isArray = __webpack_require__(17);
var _isTransformer = __webpack_require__(63);

/**
 * Returns a function that dispatches with different strategies based on the
 * object in list position (last argument). If it is an array, executes [fn].
 * Otherwise, if it has a function with one of the given method names, it will
 * execute that function (functor case). Otherwise, if it is a transformer,
 * uses transducer [xf] to return a new transformer (transducer case).
 * Otherwise, it will default to executing [fn].
 *
 * @private
 * @param {Array} methodNames properties to check for a custom implementation
 * @param {Function} xf transducer to initialize if object is transformer
 * @param {Function} fn default ramda implementation
 * @return {Function} A function that dispatches on object in list position
 */
module.exports = function _dispatchable(methodNames, xf, fn) {
  return function () {
    if (arguments.length === 0) {
      return fn();
    }
    var args = Array.prototype.slice.call(arguments, 0);
    var obj = args.pop();
    if (!_isArray(obj)) {
      var idx = 0;
      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === 'function') {
          return obj[methodNames[idx]].apply(obj, args);
        }
        idx += 1;
      }
      if (_isTransformer(obj)) {
        var transducer = xf.apply(null, args);
        return transducer(obj);
      }
    }
    return fn.apply(this, arguments);
  };
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  init: function () {
    return this.xf['@@transducer/init']();
  },
  result: function (result) {
    return this.xf['@@transducer/result'](result);
  }
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arity = __webpack_require__(12);
var _curry1 = __webpack_require__(1);
var _curry2 = __webpack_require__(0);
var _curryN = __webpack_require__(39);

/**
 * Returns a curried equivalent of the provided function, with the specified
 * arity. The curried function has two unusual capabilities. First, its
 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value `R.__` may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is `R.__`, the
 * following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curry
 * @example
 *
 *      var sumArgs = (...args) => R.sum(args);
 *
 *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */
module.exports = _curry2(function curryN(length, fn) {
  if (length === 1) {
    return _curry1(fn);
  }
  return _arity(length, _curryN(length, [], fn));
});

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _map = __webpack_require__(43);
var _reduce = __webpack_require__(8);
var _xmap = __webpack_require__(251);
var curryN = __webpack_require__(5);
var keys = __webpack_require__(13);

/**
 * Takes a function and
 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
 * applies the function to each of the functor's values, and returns
 * a functor of the same shape.
 *
 * Ramda provides suitable `map` implementations for `Array` and `Object`,
 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
 *
 * Dispatches to the `map` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * Also treats functions as functors and will compose them together.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => (a -> b) -> f a -> f b
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {Array} list The list to be iterated over.
 * @return {Array} The new list.
 * @see R.transduce, R.addIndex
 * @example
 *
 *      var double = x => x * 2;
 *
 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
 *
 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
 * @symb R.map(f, [a, b]) = [f(a), f(b)]
 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
 * @symb R.map(f, functor_o) = functor_o.map(f)
 */
module.exports = _curry2(_dispatchable(['map'], _xmap, function map(fn, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case '[object Function]':
      return curryN(functor.length, function () {
        return fn.call(this, functor.apply(this, arguments));
      });
    case '[object Object]':
      return _reduce(function (acc, key) {
        acc[key] = fn(functor[key]);
        return acc;
      }, {}, keys(functor));
    default:
      return _map(fn, functor);
  }
}));

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _xwrap = __webpack_require__(103);
var bind = __webpack_require__(78);
var isArrayLike = __webpack_require__(30);

module.exports = function () {
  function _arrayReduce(xf, acc, list) {
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      acc = xf['@@transducer/step'](acc, list[idx]);
      if (acc && acc['@@transducer/reduced']) {
        acc = acc['@@transducer/value'];
        break;
      }
      idx += 1;
    }
    return xf['@@transducer/result'](acc);
  }

  function _iterableReduce(xf, acc, iter) {
    var step = iter.next();
    while (!step.done) {
      acc = xf['@@transducer/step'](acc, step.value);
      if (acc && acc['@@transducer/reduced']) {
        acc = acc['@@transducer/value'];
        break;
      }
      step = iter.next();
    }
    return xf['@@transducer/result'](acc);
  }

  function _methodReduce(xf, acc, obj) {
    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));
  }

  var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';
  return function _reduce(fn, acc, list) {
    if (typeof fn === 'function') {
      fn = _xwrap(fn);
    }
    if (isArrayLike(list)) {
      return _arrayReduce(fn, acc, list);
    }
    if (typeof list.reduce === 'function') {
      return _methodReduce(fn, acc, list);
    }
    if (list[symIterator] != null) {
      return _iterableReduce(fn, acc, list[symIterator]());
    }
    if (typeof list.next === 'function') {
      return _iterableReduce(fn, acc, list);
    }
    throw new TypeError('reduce: list must be array or iterable');
  };
}();

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(152);
var ieee754 = __webpack_require__(158);
var isArray = __webpack_require__(71);

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () {
        return 42;
      } };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Private `concat` function to merge two array-like objects.
 *
 * @private
 * @param {Array|Arguments} [set1=[]] An array-like object.
 * @param {Array|Arguments} [set2=[]] An array-like object.
 * @return {Array} A new, merged array.
 * @example
 *
 *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 */
module.exports = function _concat(set1, set2) {
  set1 = set1 || [];
  set2 = set2 || [];
  var idx;
  var len1 = set1.length;
  var len2 = set2.length;
  var result = [];

  idx = 0;
  while (idx < len1) {
    result[result.length] = set1[idx];
    idx += 1;
  }
  idx = 0;
  while (idx < len2) {
    result[result.length] = set2[idx];
    idx += 1;
  }
  return result;
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _equals = __webpack_require__(226);

/**
 * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
 * cyclical data structures.
 *
 * Dispatches symmetrically to the `equals` methods of both arguments, if
 * present.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> b -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      R.equals(1, 1); //=> true
 *      R.equals(1, '1'); //=> false
 *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
 *
 *      var a = {}; a.v = a;
 *      var b = {}; b.v = b;
 *      R.equals(a, b); //=> true
 */
module.exports = _curry2(function equals(a, b) {
  return _equals(a, b, [], []);
});

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _arity(n, fn) {
  /* eslint-disable no-unused-vars */
  switch (n) {
    case 0:
      return function () {
        return fn.apply(this, arguments);
      };
    case 1:
      return function (a0) {
        return fn.apply(this, arguments);
      };
    case 2:
      return function (a0, a1) {
        return fn.apply(this, arguments);
      };
    case 3:
      return function (a0, a1, a2) {
        return fn.apply(this, arguments);
      };
    case 4:
      return function (a0, a1, a2, a3) {
        return fn.apply(this, arguments);
      };
    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.apply(this, arguments);
      };
    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.apply(this, arguments);
      };
    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.apply(this, arguments);
      };
    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.apply(this, arguments);
      };
    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.apply(this, arguments);
      };
    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.apply(this, arguments);
      };
    default:
      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
  }
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _has = __webpack_require__(6);
var _isArguments = __webpack_require__(96);

/**
 * Returns a list containing the names of all the enumerable own properties of
 * the supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own properties.
 * @example
 *
 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
 */
module.exports = function () {
  // cover IE < 9 keys issues
  var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
  // Safari bug
  var hasArgsEnumBug = function () {
    'use strict';

    return arguments.propertyIsEnumerable('length');
  }();

  var contains = function contains(list, item) {
    var idx = 0;
    while (idx < list.length) {
      if (list[idx] === item) {
        return true;
      }
      idx += 1;
    }
    return false;
  };

  return typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {
    return Object(obj) !== obj ? [] : Object.keys(obj);
  }) : _curry1(function keys(obj) {
    if (Object(obj) !== obj) {
      return [];
    }
    var prop, nIdx;
    var ks = [];
    var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
    for (prop in obj) {
      if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
        ks[ks.length] = prop;
      }
    }
    if (hasEnumBug) {
      nIdx = nonEnumerableProps.length - 1;
      while (nIdx >= 0) {
        prop = nonEnumerableProps[nIdx];
        if (_has(prop, obj) && !contains(ks, prop)) {
          ks[ks.length] = prop;
        }
        nIdx -= 1;
      }
    }
    return ks;
  });
}();

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var _reduce = __webpack_require__(8);

/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It may use
 * `R.reduced` to shortcut the iteration.
 *
 * The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.
 *
 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
 *
 * Dispatches to the `reduce` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduced, R.addIndex, R.reduceRight
 * @example
 *
 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
 *                -               -10
 *               / \              / \
 *              -   4           -6   4
 *             / \              / \
 *            -   3   ==>     -3   3
 *           / \              / \
 *          -   2           -1   2
 *         / \              / \
 *        0   1            0   1
 *
 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
 */
module.exports = _curry3(_reduce);

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
/** Virtual DOM Node */
function VNode() {}

/** Global options
 *	@public
 *	@namespace options {Object}
 */
var options = {

	/** If `true`, `prop` changes trigger synchronous component updates.
  *	@name syncComponentUpdates
  *	@type Boolean
  *	@default true
  */
	//syncComponentUpdates: true,

	/** Processes all created VNodes.
  *	@param {VNode} vnode	A newly-created VNode to normalize/process
  */
	//vnode(vnode) { }

	/** Hook invoked after a component is mounted. */
	// afterMount(component) { }

	/** Hook invoked after the DOM is updated with a component's latest render. */
	// afterUpdate(component) { }

	/** Hook invoked immediately before a component is unmounted. */
	// beforeUnmount(component) { }
};

var stack = [];

var EMPTY_CHILDREN = [];

/**
 * JSX/hyperscript reviver.
 * @see http://jasonformat.com/wtf-is-jsx
 * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0
 *
 * Note: this is exported as both `h()` and `createElement()` for compatibility reasons.
 *
 * Creates a VNode (virtual DOM element). A tree of VNodes can be used as a lightweight representation
 * of the structure of a DOM tree. This structure can be realized by recursively comparing it against
 * the current _actual_ DOM structure, and applying only the differences.
 *
 * `h()`/`createElement()` accepts an element name, a list of attributes/props,
 * and optionally children to append to the element.
 *
 * @example The following DOM tree
 *
 * `<div id="foo" name="bar">Hello!</div>`
 *
 * can be constructed using this function as:
 *
 * `h('div', { id: 'foo', name : 'bar' }, 'Hello!');`
 *
 * @param {string} nodeName	An element name. Ex: `div`, `a`, `span`, etc.
 * @param {Object} attributes	Any attributes/props to set on the created element.
 * @param rest			Additional arguments are taken to be children to append. Can be infinitely nested Arrays.
 *
 * @public
 */
function h(nodeName, attributes) {
	var children = EMPTY_CHILDREN,
	    lastSimple,
	    child,
	    simple,
	    i;
	for (i = arguments.length; i-- > 2;) {
		stack.push(arguments[i]);
	}
	if (attributes && attributes.children != null) {
		if (!stack.length) stack.push(attributes.children);
		delete attributes.children;
	}
	while (stack.length) {
		if ((child = stack.pop()) && child.pop !== undefined) {
			for (i = child.length; i--;) {
				stack.push(child[i]);
			}
		} else {
			if (typeof child === 'boolean') child = null;

			if (simple = typeof nodeName !== 'function') {
				if (child == null) child = '';else if (typeof child === 'number') child = String(child);else if (typeof child !== 'string') simple = false;
			}

			if (simple && lastSimple) {
				children[children.length - 1] += child;
			} else if (children === EMPTY_CHILDREN) {
				children = [child];
			} else {
				children.push(child);
			}

			lastSimple = simple;
		}
	}

	var p = new VNode();
	p.nodeName = nodeName;
	p.children = children;
	p.attributes = attributes == null ? undefined : attributes;
	p.key = attributes == null ? undefined : attributes.key;

	// if a "vnode hook" is defined, pass every created VNode to it
	if (options.vnode !== undefined) options.vnode(p);

	return p;
}

/**
 *  Copy all properties from `props` onto `obj`.
 *  @param {Object} obj		Object onto which properties should be copied.
 *  @param {Object} props	Object from which to copy properties.
 *  @returns obj
 *  @private
 */
function extend(obj, props) {
	for (var i in props) {
		obj[i] = props[i];
	}return obj;
}

/**
 * Call a function asynchronously, as soon as possible. Makes
 * use of HTML Promise to schedule the callback if available,
 * otherwise falling back to `setTimeout` (mainly for IE<11).
 *
 * @param {Function} callback
 */
var defer = typeof Promise == 'function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;

/**
 * Clones the given VNode, optionally adding attributes/props and replacing its children.
 * @param {VNode} vnode		The virutal DOM element to clone
 * @param {Object} props	Attributes/props to add when cloning
 * @param {VNode} rest		Any additional arguments will be used as replacement children.
 */
function cloneElement(vnode, props) {
	return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);
}

// DOM properties that should NOT have "px" added when numeric
var IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;

/** Managed queue of dirty components to be re-rendered */

var items = [];

function enqueueRender(component) {
	if (!component._dirty && (component._dirty = true) && items.push(component) == 1) {
		(options.debounceRendering || defer)(rerender);
	}
}

function rerender() {
	var p,
	    list = items;
	items = [];
	while (p = list.pop()) {
		if (p._dirty) renderComponent(p);
	}
}

/**
 * Check if two nodes are equivalent.
 *
 * @param {Node} node			DOM Node to compare
 * @param {VNode} vnode			Virtual DOM node to compare
 * @param {boolean} [hyrdating=false]	If true, ignores component constructors when comparing.
 * @private
 */
function isSameNodeType(node, vnode, hydrating) {
	if (typeof vnode === 'string' || typeof vnode === 'number') {
		return node.splitText !== undefined;
	}
	if (typeof vnode.nodeName === 'string') {
		return !node._componentConstructor && isNamedNode(node, vnode.nodeName);
	}
	return hydrating || node._componentConstructor === vnode.nodeName;
}

/**
 * Check if an Element has a given nodeName, case-insensitively.
 *
 * @param {Element} node	A DOM Element to inspect the name of.
 * @param {String} nodeName	Unnormalized name to compare against.
 */
function isNamedNode(node, nodeName) {
	return node.normalizedNodeName === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();
}

/**
 * Reconstruct Component-style `props` from a VNode.
 * Ensures default/fallback values from `defaultProps`:
 * Own-properties of `defaultProps` not present in `vnode.attributes` are added.
 *
 * @param {VNode} vnode
 * @returns {Object} props
 */
function getNodeProps(vnode) {
	var props = extend({}, vnode.attributes);
	props.children = vnode.children;

	var defaultProps = vnode.nodeName.defaultProps;
	if (defaultProps !== undefined) {
		for (var i in defaultProps) {
			if (props[i] === undefined) {
				props[i] = defaultProps[i];
			}
		}
	}

	return props;
}

/** Create an element with the given nodeName.
 *	@param {String} nodeName
 *	@param {Boolean} [isSvg=false]	If `true`, creates an element within the SVG namespace.
 *	@returns {Element} node
 */
function createNode(nodeName, isSvg) {
	var node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);
	node.normalizedNodeName = nodeName;
	return node;
}

/** Remove a child node from its parent if attached.
 *	@param {Element} node		The node to remove
 */
function removeNode(node) {
	var parentNode = node.parentNode;
	if (parentNode) parentNode.removeChild(node);
}

/** Set a named attribute on the given Node, with special behavior for some names and event handlers.
 *	If `value` is `null`, the attribute/handler will be removed.
 *	@param {Element} node	An element to mutate
 *	@param {string} name	The name/key to set, such as an event or attribute name
 *	@param {any} old	The last value that was set for this name/node pair
 *	@param {any} value	An attribute value, such as a function to be used as an event handler
 *	@param {Boolean} isSvg	Are we currently diffing inside an svg?
 *	@private
 */
function setAccessor(node, name, old, value, isSvg) {
	if (name === 'className') name = 'class';

	if (name === 'key') {
		// ignore
	} else if (name === 'ref') {
		if (old) old(null);
		if (value) value(node);
	} else if (name === 'class' && !isSvg) {
		node.className = value || '';
	} else if (name === 'style') {
		if (!value || typeof value === 'string' || typeof old === 'string') {
			node.style.cssText = value || '';
		}
		if (value && typeof value === 'object') {
			if (typeof old !== 'string') {
				for (var i in old) {
					if (!(i in value)) node.style[i] = '';
				}
			}
			for (var i in value) {
				node.style[i] = typeof value[i] === 'number' && IS_NON_DIMENSIONAL.test(i) === false ? value[i] + 'px' : value[i];
			}
		}
	} else if (name === 'dangerouslySetInnerHTML') {
		if (value) node.innerHTML = value.__html || '';
	} else if (name[0] == 'o' && name[1] == 'n') {
		var useCapture = name !== (name = name.replace(/Capture$/, ''));
		name = name.toLowerCase().substring(2);
		if (value) {
			if (!old) node.addEventListener(name, eventProxy, useCapture);
		} else {
			node.removeEventListener(name, eventProxy, useCapture);
		}
		(node._listeners || (node._listeners = {}))[name] = value;
	} else if (name !== 'list' && name !== 'type' && !isSvg && name in node) {
		setProperty(node, name, value == null ? '' : value);
		if (value == null || value === false) node.removeAttribute(name);
	} else {
		var ns = isSvg && name !== (name = name.replace(/^xlink\:?/, ''));
		if (value == null || value === false) {
			if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());else node.removeAttribute(name);
		} else if (typeof value !== 'function') {
			if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);else node.setAttribute(name, value);
		}
	}
}

/** Attempt to set a DOM property to the given value.
 *	IE & FF throw for certain property-value combinations.
 */
function setProperty(node, name, value) {
	try {
		node[name] = value;
	} catch (e) {}
}

/** Proxy an event to hooked event handlers
 *	@private
 */
function eventProxy(e) {
	return this._listeners[e.type](options.event && options.event(e) || e);
}

/** Queue of components that have been mounted and are awaiting componentDidMount */
var mounts = [];

/** Diff recursion count, used to track the end of the diff cycle. */
var diffLevel = 0;

/** Global flag indicating if the diff is currently within an SVG */
var isSvgMode = false;

/** Global flag indicating if the diff is performing hydration */
var hydrating = false;

/** Invoke queued componentDidMount lifecycle methods */
function flushMounts() {
	var c;
	while (c = mounts.pop()) {
		if (options.afterMount) options.afterMount(c);
		if (c.componentDidMount) c.componentDidMount();
	}
}

/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.
 *	@param {Element} [dom=null]		A DOM node to mutate into the shape of the `vnode`
 *	@param {VNode} vnode			A VNode (with descendants forming a tree) representing the desired DOM structure
 *	@returns {Element} dom			The created/mutated element
 *	@private
 */
function diff(dom, vnode, context, mountAll, parent, componentRoot) {
	// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)
	if (!diffLevel++) {
		// when first starting the diff, check if we're diffing an SVG or within an SVG
		isSvgMode = parent != null && parent.ownerSVGElement !== undefined;

		// hydration is indicated by the existing element to be diffed not having a prop cache
		hydrating = dom != null && !('__preactattr_' in dom);
	}

	var ret = idiff(dom, vnode, context, mountAll, componentRoot);

	// append the element if its a new parent
	if (parent && ret.parentNode !== parent) parent.appendChild(ret);

	// diffLevel being reduced to 0 means we're exiting the diff
	if (! --diffLevel) {
		hydrating = false;
		// invoke queued componentDidMount lifecycle methods
		if (!componentRoot) flushMounts();
	}

	return ret;
}

/** Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing. */
function idiff(dom, vnode, context, mountAll, componentRoot) {
	var out = dom,
	    prevSvgMode = isSvgMode;

	// empty values (null, undefined, booleans) render as empty Text nodes
	if (vnode == null || typeof vnode === 'boolean') vnode = '';

	// Fast case: Strings & Numbers create/update Text nodes.
	if (typeof vnode === 'string' || typeof vnode === 'number') {

		// update if it's already a Text node:
		if (dom && dom.splitText !== undefined && dom.parentNode && (!dom._component || componentRoot)) {
			/* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */
			if (dom.nodeValue != vnode) {
				dom.nodeValue = vnode;
			}
		} else {
			// it wasn't a Text node: replace it with one and recycle the old Element
			out = document.createTextNode(vnode);
			if (dom) {
				if (dom.parentNode) dom.parentNode.replaceChild(out, dom);
				recollectNodeTree(dom, true);
			}
		}

		out['__preactattr_'] = true;

		return out;
	}

	// If the VNode represents a Component, perform a component diff:
	var vnodeName = vnode.nodeName;
	if (typeof vnodeName === 'function') {
		return buildComponentFromVNode(dom, vnode, context, mountAll);
	}

	// Tracks entering and exiting SVG namespace when descending through the tree.
	isSvgMode = vnodeName === 'svg' ? true : vnodeName === 'foreignObject' ? false : isSvgMode;

	// If there's no existing element or it's the wrong type, create a new one:
	vnodeName = String(vnodeName);
	if (!dom || !isNamedNode(dom, vnodeName)) {
		out = createNode(vnodeName, isSvgMode);

		if (dom) {
			// move children into the replacement node
			while (dom.firstChild) {
				out.appendChild(dom.firstChild);
			} // if the previous Element was mounted into the DOM, replace it inline
			if (dom.parentNode) dom.parentNode.replaceChild(out, dom);

			// recycle the old element (skips non-Element node types)
			recollectNodeTree(dom, true);
		}
	}

	var fc = out.firstChild,
	    props = out['__preactattr_'],
	    vchildren = vnode.children;

	if (props == null) {
		props = out['__preactattr_'] = {};
		for (var a = out.attributes, i = a.length; i--;) {
			props[a[i].name] = a[i].value;
		}
	}

	// Optimization: fast-path for elements containing a single TextNode:
	if (!hydrating && vchildren && vchildren.length === 1 && typeof vchildren[0] === 'string' && fc != null && fc.splitText !== undefined && fc.nextSibling == null) {
		if (fc.nodeValue != vchildren[0]) {
			fc.nodeValue = vchildren[0];
		}
	}
	// otherwise, if there are existing or new children, diff them:
	else if (vchildren && vchildren.length || fc != null) {
			innerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML != null);
		}

	// Apply attributes/props from VNode to the DOM Element:
	diffAttributes(out, vnode.attributes, props);

	// restore previous SVG mode: (in case we're exiting an SVG namespace)
	isSvgMode = prevSvgMode;

	return out;
}

/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.
 *	@param {Element} dom			Element whose children should be compared & mutated
 *	@param {Array} vchildren		Array of VNodes to compare to `dom.childNodes`
 *	@param {Object} context			Implicitly descendant context object (from most recent `getChildContext()`)
 *	@param {Boolean} mountAll
 *	@param {Boolean} isHydrating	If `true`, consumes externally created elements similar to hydration
 */
function innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {
	var originalChildren = dom.childNodes,
	    children = [],
	    keyed = {},
	    keyedLen = 0,
	    min = 0,
	    len = originalChildren.length,
	    childrenLen = 0,
	    vlen = vchildren ? vchildren.length : 0,
	    j,
	    c,
	    f,
	    vchild,
	    child;

	// Build up a map of keyed children and an Array of unkeyed children:
	if (len !== 0) {
		for (var i = 0; i < len; i++) {
			var _child = originalChildren[i],
			    props = _child['__preactattr_'],
			    key = vlen && props ? _child._component ? _child._component.__key : props.key : null;
			if (key != null) {
				keyedLen++;
				keyed[key] = _child;
			} else if (props || (_child.splitText !== undefined ? isHydrating ? _child.nodeValue.trim() : true : isHydrating)) {
				children[childrenLen++] = _child;
			}
		}
	}

	if (vlen !== 0) {
		for (var i = 0; i < vlen; i++) {
			vchild = vchildren[i];
			child = null;

			// attempt to find a node based on key matching
			var key = vchild.key;
			if (key != null) {
				if (keyedLen && keyed[key] !== undefined) {
					child = keyed[key];
					keyed[key] = undefined;
					keyedLen--;
				}
			}
			// attempt to pluck a node of the same type from the existing children
			else if (!child && min < childrenLen) {
					for (j = min; j < childrenLen; j++) {
						if (children[j] !== undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {
							child = c;
							children[j] = undefined;
							if (j === childrenLen - 1) childrenLen--;
							if (j === min) min++;
							break;
						}
					}
				}

			// morph the matched/found/created DOM child to match vchild (deep)
			child = idiff(child, vchild, context, mountAll);

			f = originalChildren[i];
			if (child && child !== dom && child !== f) {
				if (f == null) {
					dom.appendChild(child);
				} else if (child === f.nextSibling) {
					removeNode(f);
				} else {
					dom.insertBefore(child, f);
				}
			}
		}
	}

	// remove unused keyed children:
	if (keyedLen) {
		for (var i in keyed) {
			if (keyed[i] !== undefined) recollectNodeTree(keyed[i], false);
		}
	}

	// remove orphaned unkeyed children:
	while (min <= childrenLen) {
		if ((child = children[childrenLen--]) !== undefined) recollectNodeTree(child, false);
	}
}

/** Recursively recycle (or just unmount) a node and its descendants.
 *	@param {Node} node						DOM node to start unmount/removal from
 *	@param {Boolean} [unmountOnly=false]	If `true`, only triggers unmount lifecycle, skips removal
 */
function recollectNodeTree(node, unmountOnly) {
	var component = node._component;
	if (component) {
		// if node is owned by a Component, unmount that component (ends up recursing back here)
		unmountComponent(component);
	} else {
		// If the node's VNode had a ref function, invoke it with null here.
		// (this is part of the React spec, and smart for unsetting references)
		if (node['__preactattr_'] != null && node['__preactattr_'].ref) node['__preactattr_'].ref(null);

		if (unmountOnly === false || node['__preactattr_'] == null) {
			removeNode(node);
		}

		removeChildren(node);
	}
}

/** Recollect/unmount all children.
 *	- we use .lastChild here because it causes less reflow than .firstChild
 *	- it's also cheaper than accessing the .childNodes Live NodeList
 */
function removeChildren(node) {
	node = node.lastChild;
	while (node) {
		var next = node.previousSibling;
		recollectNodeTree(node, true);
		node = next;
	}
}

/** Apply differences in attributes from a VNode to the given DOM Element.
 *	@param {Element} dom		Element with attributes to diff `attrs` against
 *	@param {Object} attrs		The desired end-state key-value attribute pairs
 *	@param {Object} old			Current/previous attributes (from previous VNode or element's prop cache)
 */
function diffAttributes(dom, attrs, old) {
	var name;

	// remove attributes no longer present on the vnode by setting them to undefined
	for (name in old) {
		if (!(attrs && attrs[name] != null) && old[name] != null) {
			setAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);
		}
	}

	// add new & update changed attributes
	for (name in attrs) {
		if (name !== 'children' && name !== 'innerHTML' && (!(name in old) || attrs[name] !== (name === 'value' || name === 'checked' ? dom[name] : old[name]))) {
			setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);
		}
	}
}

/** Retains a pool of Components for re-use, keyed on component name.
 *	Note: since component names are not unique or even necessarily available, these are primarily a form of sharding.
 *	@private
 */
var components = {};

/** Reclaim a component for later re-use by the recycler. */
function collectComponent(component) {
	var name = component.constructor.name;
	(components[name] || (components[name] = [])).push(component);
}

/** Create a component. Normalizes differences between PFC's and classful Components. */
function createComponent(Ctor, props, context) {
	var list = components[Ctor.name],
	    inst;

	if (Ctor.prototype && Ctor.prototype.render) {
		inst = new Ctor(props, context);
		Component.call(inst, props, context);
	} else {
		inst = new Component(props, context);
		inst.constructor = Ctor;
		inst.render = doRender;
	}

	if (list) {
		for (var i = list.length; i--;) {
			if (list[i].constructor === Ctor) {
				inst.nextBase = list[i].nextBase;
				list.splice(i, 1);
				break;
			}
		}
	}
	return inst;
}

/** The `.render()` method for a PFC backing instance. */
function doRender(props, state, context) {
	return this.constructor(props, context);
}

/** Set a component's `props` (generally derived from JSX attributes).
 *	@param {Object} props
 *	@param {Object} [opts]
 *	@param {boolean} [opts.renderSync=false]	If `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.
 *	@param {boolean} [opts.render=true]			If `false`, no render will be triggered.
 */
function setComponentProps(component, props, opts, context, mountAll) {
	if (component._disable) return;
	component._disable = true;

	if (component.__ref = props.ref) delete props.ref;
	if (component.__key = props.key) delete props.key;

	if (!component.base || mountAll) {
		if (component.componentWillMount) component.componentWillMount();
	} else if (component.componentWillReceiveProps) {
		component.componentWillReceiveProps(props, context);
	}

	if (context && context !== component.context) {
		if (!component.prevContext) component.prevContext = component.context;
		component.context = context;
	}

	if (!component.prevProps) component.prevProps = component.props;
	component.props = props;

	component._disable = false;

	if (opts !== 0) {
		if (opts === 1 || options.syncComponentUpdates !== false || !component.base) {
			renderComponent(component, 1, mountAll);
		} else {
			enqueueRender(component);
		}
	}

	if (component.__ref) component.__ref(component);
}

/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.
 *	@param {Component} component
 *	@param {Object} [opts]
 *	@param {boolean} [opts.build=false]		If `true`, component will build and store a DOM node if not already associated with one.
 *	@private
 */
function renderComponent(component, opts, mountAll, isChild) {
	if (component._disable) return;

	var props = component.props,
	    state = component.state,
	    context = component.context,
	    previousProps = component.prevProps || props,
	    previousState = component.prevState || state,
	    previousContext = component.prevContext || context,
	    isUpdate = component.base,
	    nextBase = component.nextBase,
	    initialBase = isUpdate || nextBase,
	    initialChildComponent = component._component,
	    skip = false,
	    rendered,
	    inst,
	    cbase;

	// if updating
	if (isUpdate) {
		component.props = previousProps;
		component.state = previousState;
		component.context = previousContext;
		if (opts !== 2 && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === false) {
			skip = true;
		} else if (component.componentWillUpdate) {
			component.componentWillUpdate(props, state, context);
		}
		component.props = props;
		component.state = state;
		component.context = context;
	}

	component.prevProps = component.prevState = component.prevContext = component.nextBase = null;
	component._dirty = false;

	if (!skip) {
		rendered = component.render(props, state, context);

		// context to pass to the child, can be updated via (grand-)parent component
		if (component.getChildContext) {
			context = extend(extend({}, context), component.getChildContext());
		}

		var childComponent = rendered && rendered.nodeName,
		    toUnmount,
		    base;

		if (typeof childComponent === 'function') {
			// set up high order component link

			var childProps = getNodeProps(rendered);
			inst = initialChildComponent;

			if (inst && inst.constructor === childComponent && childProps.key == inst.__key) {
				setComponentProps(inst, childProps, 1, context, false);
			} else {
				toUnmount = inst;

				component._component = inst = createComponent(childComponent, childProps, context);
				inst.nextBase = inst.nextBase || nextBase;
				inst._parentComponent = component;
				setComponentProps(inst, childProps, 0, context, false);
				renderComponent(inst, 1, mountAll, true);
			}

			base = inst.base;
		} else {
			cbase = initialBase;

			// destroy high order component link
			toUnmount = initialChildComponent;
			if (toUnmount) {
				cbase = component._component = null;
			}

			if (initialBase || opts === 1) {
				if (cbase) cbase._component = null;
				base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);
			}
		}

		if (initialBase && base !== initialBase && inst !== initialChildComponent) {
			var baseParent = initialBase.parentNode;
			if (baseParent && base !== baseParent) {
				baseParent.replaceChild(base, initialBase);

				if (!toUnmount) {
					initialBase._component = null;
					recollectNodeTree(initialBase, false);
				}
			}
		}

		if (toUnmount) {
			unmountComponent(toUnmount);
		}

		component.base = base;
		if (base && !isChild) {
			var componentRef = component,
			    t = component;
			while (t = t._parentComponent) {
				(componentRef = t).base = base;
			}
			base._component = componentRef;
			base._componentConstructor = componentRef.constructor;
		}
	}

	if (!isUpdate || mountAll) {
		mounts.unshift(component);
	} else if (!skip) {
		// Ensure that pending componentDidMount() hooks of child components
		// are called before the componentDidUpdate() hook in the parent.
		// Note: disabled as it causes duplicate hooks, see https://github.com/developit/preact/issues/750
		// flushMounts();

		if (component.componentDidUpdate) {
			component.componentDidUpdate(previousProps, previousState, previousContext);
		}
		if (options.afterUpdate) options.afterUpdate(component);
	}

	if (component._renderCallbacks != null) {
		while (component._renderCallbacks.length) {
			component._renderCallbacks.pop().call(component);
		}
	}

	if (!diffLevel && !isChild) flushMounts();
}

/** Apply the Component referenced by a VNode to the DOM.
 *	@param {Element} dom	The DOM node to mutate
 *	@param {VNode} vnode	A Component-referencing VNode
 *	@returns {Element} dom	The created/mutated element
 *	@private
 */
function buildComponentFromVNode(dom, vnode, context, mountAll) {
	var c = dom && dom._component,
	    originalComponent = c,
	    oldDom = dom,
	    isDirectOwner = c && dom._componentConstructor === vnode.nodeName,
	    isOwner = isDirectOwner,
	    props = getNodeProps(vnode);
	while (c && !isOwner && (c = c._parentComponent)) {
		isOwner = c.constructor === vnode.nodeName;
	}

	if (c && isOwner && (!mountAll || c._component)) {
		setComponentProps(c, props, 3, context, mountAll);
		dom = c.base;
	} else {
		if (originalComponent && !isDirectOwner) {
			unmountComponent(originalComponent);
			dom = oldDom = null;
		}

		c = createComponent(vnode.nodeName, props, context);
		if (dom && !c.nextBase) {
			c.nextBase = dom;
			// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L229:
			oldDom = null;
		}
		setComponentProps(c, props, 1, context, mountAll);
		dom = c.base;

		if (oldDom && dom !== oldDom) {
			oldDom._component = null;
			recollectNodeTree(oldDom, false);
		}
	}

	return dom;
}

/** Remove a component from the DOM and recycle it.
 *	@param {Component} component	The Component instance to unmount
 *	@private
 */
function unmountComponent(component) {
	if (options.beforeUnmount) options.beforeUnmount(component);

	var base = component.base;

	component._disable = true;

	if (component.componentWillUnmount) component.componentWillUnmount();

	component.base = null;

	// recursively tear down & recollect high-order component children:
	var inner = component._component;
	if (inner) {
		unmountComponent(inner);
	} else if (base) {
		if (base['__preactattr_'] && base['__preactattr_'].ref) base['__preactattr_'].ref(null);

		component.nextBase = base;

		removeNode(base);
		collectComponent(component);

		removeChildren(base);
	}

	if (component.__ref) component.__ref(null);
}

/** Base Component class.
 *	Provides `setState()` and `forceUpdate()`, which trigger rendering.
 *	@public
 *
 *	@example
 *	class MyFoo extends Component {
 *		render(props, state) {
 *			return <div />;
 *		}
 *	}
 */
function Component(props, context) {
	this._dirty = true;

	/** @public
  *	@type {object}
  */
	this.context = context;

	/** @public
  *	@type {object}
  */
	this.props = props;

	/** @public
  *	@type {object}
  */
	this.state = this.state || {};
}

extend(Component.prototype, {

	/** Returns a `boolean` indicating if the component should re-render when receiving the given `props` and `state`.
  *	@param {object} nextProps
  *	@param {object} nextState
  *	@param {object} nextContext
  *	@returns {Boolean} should the component re-render
  *	@name shouldComponentUpdate
  *	@function
  */

	/** Update component state by copying properties from `state` to `this.state`.
  *	@param {object} state		A hash of state properties to update with new values
  *	@param {function} callback	A function to be called once component state is updated
  */
	setState: function setState(state, callback) {
		var s = this.state;
		if (!this.prevState) this.prevState = extend({}, s);
		extend(s, typeof state === 'function' ? state(s, this.props) : state);
		if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);
		enqueueRender(this);
	},

	/** Immediately perform a synchronous re-render of the component.
  *	@param {function} callback		A function to be called after component is re-rendered.
  *	@private
  */
	forceUpdate: function forceUpdate(callback) {
		if (callback) (this._renderCallbacks = this._renderCallbacks || []).push(callback);
		renderComponent(this, 2);
	},

	/** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.
  *	Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).
  *	@param {object} props		Props (eg: JSX attributes) received from parent element/component
  *	@param {object} state		The component's current state
  *	@param {object} context		Context object (if a parent component has provided context)
  *	@returns VNode
  */
	render: function render() {}
});

/** Render JSX into a `parent` Element.
 *	@param {VNode} vnode		A (JSX) VNode to render
 *	@param {Element} parent		DOM element to render into
 *	@param {Element} [merge]	Attempt to re-use an existing DOM tree rooted at `merge`
 *	@public
 *
 *	@example
 *	// render a div into <body>:
 *	render(<div id="hello">hello!</div>, document.body);
 *
 *	@example
 *	// render a "Thing" component into #foo:
 *	const Thing = ({ name }) => <span>{ name }</span>;
 *	render(<Thing name="one" />, document.querySelector('#foo'));
 */
function render(vnode, parent, merge) {
	return diff(merge, vnode, {}, false, parent, false);
}

var preact = {
	h: h,
	createElement: h,
	cloneElement: cloneElement,
	Component: Component,
	render: render,
	rerender: rerender,
	options: options
};

exports.h = h;
exports.createElement = h;
exports.cloneElement = cloneElement;
exports.Component = Component;
exports.render = render;
exports.rerender = rerender;
exports.options = options;
exports.default = preact;
//# sourceMappingURL=preact.esm.js.map

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Tests whether or not an object is an array.
 *
 * @private
 * @param {*} val The object to test.
 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
 * @example
 *
 *      _isArray([]); //=> true
 *      _isArray(null); //=> false
 *      _isArray({}); //=> false
 */
module.exports = Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _reduced(x) {
  return x && x['@@transducer/reduced'] ? x : {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
};

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  F: __webpack_require__(164),
  T: __webpack_require__(165),
  __: __webpack_require__(166),
  add: __webpack_require__(35),
  addIndex: __webpack_require__(167),
  adjust: __webpack_require__(73),
  all: __webpack_require__(168),
  allPass: __webpack_require__(169),
  always: __webpack_require__(24),
  and: __webpack_require__(74),
  any: __webpack_require__(75),
  anyPass: __webpack_require__(170),
  ap: __webpack_require__(54),
  aperture: __webpack_require__(171),
  append: __webpack_require__(172),
  apply: __webpack_require__(76),
  applySpec: __webpack_require__(173),
  ascend: __webpack_require__(174),
  assoc: __webpack_require__(36),
  assocPath: __webpack_require__(77),
  binary: __webpack_require__(175),
  bind: __webpack_require__(78),
  both: __webpack_require__(176),
  call: __webpack_require__(177),
  chain: __webpack_require__(55),
  clamp: __webpack_require__(178),
  clone: __webpack_require__(179),
  comparator: __webpack_require__(180),
  complement: __webpack_require__(181),
  compose: __webpack_require__(56),
  composeK: __webpack_require__(79),
  composeP: __webpack_require__(182),
  concat: __webpack_require__(57),
  cond: __webpack_require__(183),
  construct: __webpack_require__(184),
  constructN: __webpack_require__(80),
  contains: __webpack_require__(185),
  converge: __webpack_require__(81),
  countBy: __webpack_require__(186),
  curry: __webpack_require__(37),
  curryN: __webpack_require__(5),
  dec: __webpack_require__(187),
  descend: __webpack_require__(188),
  defaultTo: __webpack_require__(82),
  difference: __webpack_require__(83),
  differenceWith: __webpack_require__(84),
  dissoc: __webpack_require__(85),
  dissocPath: __webpack_require__(189),
  divide: __webpack_require__(190),
  drop: __webpack_require__(86),
  dropLast: __webpack_require__(191),
  dropLastWhile: __webpack_require__(192),
  dropRepeats: __webpack_require__(193),
  dropRepeatsWith: __webpack_require__(87),
  dropWhile: __webpack_require__(194),
  either: __webpack_require__(195),
  empty: __webpack_require__(88),
  eqBy: __webpack_require__(196),
  eqProps: __webpack_require__(197),
  equals: __webpack_require__(11),
  evolve: __webpack_require__(198),
  filter: __webpack_require__(58),
  find: __webpack_require__(199),
  findIndex: __webpack_require__(200),
  findLast: __webpack_require__(201),
  findLastIndex: __webpack_require__(202),
  flatten: __webpack_require__(203),
  flip: __webpack_require__(38),
  forEach: __webpack_require__(204),
  forEachObjIndexed: __webpack_require__(205),
  fromPairs: __webpack_require__(206),
  groupBy: __webpack_require__(207),
  groupWith: __webpack_require__(208),
  gt: __webpack_require__(209),
  gte: __webpack_require__(210),
  has: __webpack_require__(211),
  hasIn: __webpack_require__(212),
  head: __webpack_require__(213),
  identical: __webpack_require__(89),
  identity: __webpack_require__(59),
  ifElse: __webpack_require__(214),
  inc: __webpack_require__(215),
  indexBy: __webpack_require__(216),
  indexOf: __webpack_require__(217),
  init: __webpack_require__(218),
  insert: __webpack_require__(219),
  insertAll: __webpack_require__(220),
  intersection: __webpack_require__(255),
  intersectionWith: __webpack_require__(256),
  intersperse: __webpack_require__(257),
  into: __webpack_require__(258),
  invert: __webpack_require__(259),
  invertObj: __webpack_require__(260),
  invoker: __webpack_require__(29),
  is: __webpack_require__(104),
  isArrayLike: __webpack_require__(30),
  isEmpty: __webpack_require__(261),
  isNil: __webpack_require__(262),
  join: __webpack_require__(263),
  juxt: __webpack_require__(105),
  keys: __webpack_require__(13),
  keysIn: __webpack_require__(264),
  last: __webpack_require__(106),
  lastIndexOf: __webpack_require__(265),
  length: __webpack_require__(107),
  lens: __webpack_require__(44),
  lensIndex: __webpack_require__(266),
  lensPath: __webpack_require__(267),
  lensProp: __webpack_require__(268),
  lift: __webpack_require__(45),
  liftN: __webpack_require__(108),
  lt: __webpack_require__(269),
  lte: __webpack_require__(270),
  map: __webpack_require__(7),
  mapAccum: __webpack_require__(271),
  mapAccumRight: __webpack_require__(272),
  mapObjIndexed: __webpack_require__(273),
  match: __webpack_require__(274),
  mathMod: __webpack_require__(275),
  max: __webpack_require__(25),
  maxBy: __webpack_require__(276),
  mean: __webpack_require__(109),
  median: __webpack_require__(277),
  memoize: __webpack_require__(278),
  merge: __webpack_require__(279),
  mergeAll: __webpack_require__(280),
  mergeWith: __webpack_require__(281),
  mergeWithKey: __webpack_require__(110),
  min: __webpack_require__(282),
  minBy: __webpack_require__(283),
  modulo: __webpack_require__(284),
  multiply: __webpack_require__(111),
  nAry: __webpack_require__(46),
  negate: __webpack_require__(285),
  none: __webpack_require__(286),
  not: __webpack_require__(112),
  nth: __webpack_require__(31),
  nthArg: __webpack_require__(287),
  objOf: __webpack_require__(113),
  of: __webpack_require__(288),
  omit: __webpack_require__(289),
  once: __webpack_require__(290),
  or: __webpack_require__(114),
  over: __webpack_require__(115),
  pair: __webpack_require__(291),
  partial: __webpack_require__(292),
  partialRight: __webpack_require__(293),
  partition: __webpack_require__(294),
  path: __webpack_require__(32),
  pathEq: __webpack_require__(295),
  pathOr: __webpack_require__(296),
  pathSatisfies: __webpack_require__(297),
  pick: __webpack_require__(298),
  pickAll: __webpack_require__(116),
  pickBy: __webpack_require__(299),
  pipe: __webpack_require__(117),
  pipeK: __webpack_require__(300),
  pipeP: __webpack_require__(118),
  pluck: __webpack_require__(33),
  prepend: __webpack_require__(119),
  product: __webpack_require__(301),
  project: __webpack_require__(302),
  prop: __webpack_require__(64),
  propEq: __webpack_require__(303),
  propIs: __webpack_require__(304),
  propOr: __webpack_require__(305),
  propSatisfies: __webpack_require__(306),
  props: __webpack_require__(307),
  range: __webpack_require__(308),
  reduce: __webpack_require__(14),
  reduceBy: __webpack_require__(47),
  reduceRight: __webpack_require__(120),
  reduceWhile: __webpack_require__(309),
  reduced: __webpack_require__(310),
  reject: __webpack_require__(48),
  remove: __webpack_require__(311),
  repeat: __webpack_require__(312),
  replace: __webpack_require__(313),
  reverse: __webpack_require__(49),
  scan: __webpack_require__(314),
  sequence: __webpack_require__(121),
  set: __webpack_require__(315),
  slice: __webpack_require__(23),
  sort: __webpack_require__(316),
  sortBy: __webpack_require__(317),
  sortWith: __webpack_require__(318),
  split: __webpack_require__(319),
  splitAt: __webpack_require__(320),
  splitEvery: __webpack_require__(321),
  splitWhen: __webpack_require__(322),
  subtract: __webpack_require__(323),
  sum: __webpack_require__(122),
  symmetricDifference: __webpack_require__(324),
  symmetricDifferenceWith: __webpack_require__(325),
  tail: __webpack_require__(65),
  take: __webpack_require__(123),
  takeLast: __webpack_require__(326),
  takeLastWhile: __webpack_require__(327),
  takeWhile: __webpack_require__(328),
  tap: __webpack_require__(329),
  test: __webpack_require__(330),
  times: __webpack_require__(124),
  toLower: __webpack_require__(331),
  toPairs: __webpack_require__(332),
  toPairsIn: __webpack_require__(333),
  toString: __webpack_require__(34),
  toUpper: __webpack_require__(334),
  transduce: __webpack_require__(335),
  transpose: __webpack_require__(336),
  traverse: __webpack_require__(337),
  trim: __webpack_require__(338),
  tryCatch: __webpack_require__(339),
  type: __webpack_require__(66),
  unapply: __webpack_require__(340),
  unary: __webpack_require__(341),
  uncurryN: __webpack_require__(342),
  unfold: __webpack_require__(343),
  union: __webpack_require__(344),
  unionWith: __webpack_require__(345),
  uniq: __webpack_require__(67),
  uniqBy: __webpack_require__(125),
  uniqWith: __webpack_require__(68),
  unless: __webpack_require__(346),
  unnest: __webpack_require__(347),
  until: __webpack_require__(348),
  update: __webpack_require__(126),
  useWith: __webpack_require__(127),
  values: __webpack_require__(128),
  valuesIn: __webpack_require__(349),
  view: __webpack_require__(350),
  when: __webpack_require__(351),
  where: __webpack_require__(129),
  whereEq: __webpack_require__(352),
  without: __webpack_require__(353),
  xprod: __webpack_require__(354),
  zip: __webpack_require__(355),
  zipObj: __webpack_require__(356),
  zipWith: __webpack_require__(357)
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _indexOf = __webpack_require__(95);

module.exports = function _contains(a, list) {
  return _indexOf(list, a, 0) >= 0;
};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _checkForMethod = __webpack_require__(28);
var _curry3 = __webpack_require__(2);

/**
 * Returns the elements of the given list or string (or object with a `slice`
 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
 *
 * Dispatches to the `slice` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @sig Number -> Number -> String -> String
 * @param {Number} fromIndex The start index (inclusive).
 * @param {Number} toIndex The end index (exclusive).
 * @param {*} list
 * @return {*}
 * @example
 *
 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
 */
module.exports = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Returns a function that always returns the given value. Note that for
 * non-primitives the value returned is a reference to the original value.
 *
 * This function is known as `const`, `constant`, or `K` (for K combinator) in
 * other languages and libraries.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> (* -> a)
 * @param {*} val The value to wrap in a function
 * @return {Function} A Function :: * -> val.
 * @example
 *
 *      var t = R.always('Tee');
 *      t(); //=> 'Tee'
 */
module.exports = _curry1(function always(val) {
  return function () {
    return val;
  };
});

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns the larger of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.maxBy, R.min
 * @example
 *
 *      R.max(789, 123); //=> 789
 *      R.max('a', 'b'); //=> 'b'
 */
module.exports = _curry2(function max(a, b) {
  return b > a ? b : a;
});

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = __webpack_require__(52);
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(27);
util.inherits = __webpack_require__(19);
/*</replacement>*/

var Readable = __webpack_require__(130);
var Writable = __webpack_require__(132);

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer))

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _isArray = __webpack_require__(17);

/**
 * This checks whether a function has a [methodname] function. If it isn't an
 * array it will execute that function otherwise it will default to the ramda
 * implementation.
 *
 * @private
 * @param {Function} fn ramda implemtation
 * @param {String} methodname property to check for a custom implementation
 * @return {Object} Whatever the return value of the method is.
 */
module.exports = function _checkForMethod(methodname, fn) {
  return function () {
    var length = arguments.length;
    if (length === 0) {
      return fn();
    }
    var obj = arguments[length - 1];
    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _isFunction = __webpack_require__(40);
var curryN = __webpack_require__(5);
var toString = __webpack_require__(34);

/**
 * Turns a named method with a specified arity into a function that can be
 * called directly supplied with arguments and a target object.
 *
 * The returned function is curried and accepts `arity + 1` parameters where
 * the final parameter is the target object.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
 * @param {Number} arity Number of arguments the returned function should take
 *        before the target object.
 * @param {String} method Name of the method to call.
 * @return {Function} A new curried function.
 * @example
 *
 *      var sliceFrom = R.invoker(1, 'slice');
 *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
 *      var sliceFrom6 = R.invoker(2, 'slice')(6);
 *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
 * @symb R.invoker(0, 'method')(o) = o['method']()
 * @symb R.invoker(1, 'method')(a, o) = o['method'](a)
 * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)
 */
module.exports = _curry2(function invoker(arity, method) {
  return curryN(arity + 1, function () {
    var target = arguments[arity];
    if (target != null && _isFunction(target[method])) {
      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
    }
    throw new TypeError(toString(target) + ' does not have a method named "' + method + '"');
  });
});

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _isArray = __webpack_require__(17);
var _isString = __webpack_require__(42);

/**
 * Tests whether or not an object is similar to an array.
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Type
 * @category List
 * @sig * -> Boolean
 * @param {*} x The object to test.
 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
 * @deprecated since v0.23.0
 * @example
 *
 *      R.isArrayLike([]); //=> true
 *      R.isArrayLike(true); //=> false
 *      R.isArrayLike({}); //=> false
 *      R.isArrayLike({length: 10}); //=> false
 *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
 */
module.exports = _curry1(function isArrayLike(x) {
  if (_isArray(x)) {
    return true;
  }
  if (!x) {
    return false;
  }
  if (typeof x !== 'object') {
    return false;
  }
  if (_isString(x)) {
    return false;
  }
  if (x.nodeType === 1) {
    return !!x.length;
  }
  if (x.length === 0) {
    return true;
  }
  if (x.length > 0) {
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  }
  return false;
});

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _isString = __webpack_require__(42);

/**
 * Returns the nth element of the given list or string. If n is negative the
 * element at index length + n is returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> a | Undefined
 * @sig Number -> String -> String
 * @param {Number} offset
 * @param {*} list
 * @return {*}
 * @example
 *
 *      var list = ['foo', 'bar', 'baz', 'quux'];
 *      R.nth(1, list); //=> 'bar'
 *      R.nth(-1, list); //=> 'quux'
 *      R.nth(-99, list); //=> undefined
 *
 *      R.nth(2, 'abc'); //=> 'c'
 *      R.nth(3, 'abc'); //=> ''
 * @symb R.nth(-1, [a, b, c]) = c
 * @symb R.nth(0, [a, b, c]) = a
 * @symb R.nth(1, [a, b, c]) = b
 */
module.exports = _curry2(function nth(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return _isString(list) ? list.charAt(idx) : list[idx];
});

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Retrieve the value at a given path.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> {a} -> a | Undefined
 * @param {Array} path The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path`.
 * @see R.prop
 * @example
 *
 *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
 */
module.exports = _curry2(function path(paths, obj) {
  var val = obj;
  var idx = 0;
  while (idx < paths.length) {
    if (val == null) {
      return;
    }
    val = val[paths[idx]];
    idx += 1;
  }
  return val;
});

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var map = __webpack_require__(7);
var prop = __webpack_require__(64);

/**
 * Returns a new list by plucking the same named property off all objects in
 * the list supplied.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig k -> [{k: v}] -> [v]
 * @param {Number|String} key The key name to pluck off of each object.
 * @param {Array} list The array to consider.
 * @return {Array} The list of values for the given key.
 * @see R.props
 * @example
 *
 *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
 *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
 * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
 * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
 */
module.exports = _curry2(function pluck(p, list) {
  return map(prop(p), list);
});

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _toString = __webpack_require__(238);

/**
 * Returns the string representation of the given value. `eval`'ing the output
 * should result in a value equivalent to the input value. Many of the built-in
 * `toString` methods do not satisfy this requirement.
 *
 * If the given value is an `[object Object]` with a `toString` method other
 * than `Object.prototype.toString`, this method is invoked with no arguments
 * to produce the return value. This means user-defined constructor functions
 * can provide a suitable `toString` method. For example:
 *
 *     function Point(x, y) {
 *       this.x = x;
 *       this.y = y;
 *     }
 *
 *     Point.prototype.toString = function() {
 *       return 'new Point(' + this.x + ', ' + this.y + ')';
 *     };
 *
 *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category String
 * @sig * -> String
 * @param {*} val
 * @return {String}
 * @example
 *
 *      R.toString(42); //=> '42'
 *      R.toString('abc'); //=> '"abc"'
 *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
 *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
 *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
 */
module.exports = _curry1(function toString(val) {
  return _toString(val, []);
});

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Adds two values.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a
 * @param {Number} b
 * @return {Number}
 * @see R.subtract
 * @example
 *
 *      R.add(2, 3);       //=>  5
 *      R.add(7)(10);      //=> 17
 */
module.exports = _curry2(function add(a, b) {
  return Number(a) + Number(b);
});

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Makes a shallow clone of an object, setting or overriding the specified
 * property with the given value. Note that this copies and flattens prototype
 * properties onto the new object as well. All non-primitive properties are
 * copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig String -> a -> {k: v} -> {k: v}
 * @param {String} prop The property name to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except for the changed property.
 * @see R.dissoc
 * @example
 *
 *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
 */
module.exports = _curry3(function assoc(prop, val, obj) {
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  result[prop] = val;
  return result;
});

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var curryN = __webpack_require__(5);

/**
 * Returns a curried equivalent of the provided function. The curried function
 * has two unusual capabilities. First, its arguments needn't be provided one
 * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value `R.__` may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is `R.__`, the
 * following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> a) -> (* -> a)
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curryN
 * @example
 *
 *      var addFourNumbers = (a, b, c, d) => a + b + c + d;
 *
 *      var curriedAddFourNumbers = R.curry(addFourNumbers);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */
module.exports = _curry1(function curry(fn) {
  return curryN(fn.length, fn);
});

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var curry = __webpack_require__(37);

/**
 * Returns a new function much like the supplied one, except that the first two
 * arguments' order is reversed.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)
 * @param {Function} fn The function to invoke with its first two parameters reversed.
 * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
 * @example
 *
 *      var mergeThree = (a, b, c) => [].concat(a, b, c);
 *
 *      mergeThree(1, 2, 3); //=> [1, 2, 3]
 *
 *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
 * @symb R.flip(f)(a, b, c) = f(b, a, c)
 */
module.exports = _curry1(function flip(fn) {
  return curry(function (a, b) {
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = b;
    args[1] = a;
    return fn.apply(this, args);
  });
});

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arity = __webpack_require__(12);
var _isPlaceholder = __webpack_require__(41);

/**
 * Internal curryN function.
 *
 * @private
 * @category Function
 * @param {Number} length The arity of the curried function.
 * @param {Array} received An array of arguments received thus far.
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
module.exports = function _curryN(length, received, fn) {
  return function () {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;
    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;
      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }
      combined[combinedIdx] = result;
      if (!_isPlaceholder(result)) {
        left -= 1;
      }
      combinedIdx += 1;
    }
    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
  };
};

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _isFunction(x) {
  return Object.prototype.toString.call(x) === '[object Function]';
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _isPlaceholder(a) {
       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _isString(x) {
  return Object.prototype.toString.call(x) === '[object String]';
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _map(fn, functor) {
  var idx = 0;
  var len = functor.length;
  var result = Array(len);
  while (idx < len) {
    result[idx] = fn(functor[idx]);
    idx += 1;
  }
  return result;
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var map = __webpack_require__(7);

/**
 * Returns a lens for the given getter and setter functions. The getter "gets"
 * the value of the focus; the setter "sets" the value of the focus. The setter
 * should not mutate the data structure.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig (s -> a) -> ((a, s) -> s) -> Lens s a
 * @param {Function} getter
 * @param {Function} setter
 * @return {Lens}
 * @see R.view, R.set, R.over, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lens(R.prop('x'), R.assoc('x'));
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */
module.exports = _curry2(function lens(getter, setter) {
  return function (toFunctorFn) {
    return function (target) {
      return map(function (focus) {
        return setter(focus, target);
      }, toFunctorFn(getter(target)));
    };
  };
});

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var liftN = __webpack_require__(108);

/**
 * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
 * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.liftN
 * @example
 *
 *      var madd3 = R.lift((a, b, c) => a + b + c);
 *
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 *
 *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
 *
 *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
 */
module.exports = _curry1(function lift(fn) {
  return liftN(fn.length, fn);
});

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly `n` parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} n The desired arity of the new function.
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity `n`.
 * @example
 *
 *      var takesTwoArgs = (a, b) => [a, b];
 *
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      var takesOneArg = R.nAry(1, takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only `n` arguments are passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.nAry(0, f)(a, b) = f()
 * @symb R.nAry(1, f)(a, b) = f(a)
 * @symb R.nAry(2, f)(a, b) = f(a, b)
 */
module.exports = _curry2(function nAry(n, fn) {
  switch (n) {
    case 0:
      return function () {
        return fn.call(this);
      };
    case 1:
      return function (a0) {
        return fn.call(this, a0);
      };
    case 2:
      return function (a0, a1) {
        return fn.call(this, a0, a1);
      };
    case 3:
      return function (a0, a1, a2) {
        return fn.call(this, a0, a1, a2);
      };
    case 4:
      return function (a0, a1, a2, a3) {
        return fn.call(this, a0, a1, a2, a3);
      };
    case 5:
      return function (a0, a1, a2, a3, a4) {
        return fn.call(this, a0, a1, a2, a3, a4);
      };
    case 6:
      return function (a0, a1, a2, a3, a4, a5) {
        return fn.call(this, a0, a1, a2, a3, a4, a5);
      };
    case 7:
      return function (a0, a1, a2, a3, a4, a5, a6) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
      };
    case 8:
      return function (a0, a1, a2, a3, a4, a5, a6, a7) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
      };
    case 9:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
      };
    case 10:
      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      };
    default:
      throw new Error('First argument to nAry must be a non-negative integer no greater than ten');
  }
});

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curryN = __webpack_require__(39);
var _dispatchable = __webpack_require__(3);
var _has = __webpack_require__(6);
var _reduce = __webpack_require__(8);
var _xreduceBy = __webpack_require__(252);

/**
 * Groups the elements of the list according to the result of calling
 * the String-returning function `keyFn` on each element and reduces the elements
 * of each group to a single value via the reducer function `valueFn`.
 *
 * This function is basically a more general `groupBy` function.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category List
 * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
 * @param {Function} valueFn The function that reduces the elements of each group to a single
 *        value. Receives two values, accumulator for a particular group and the current element.
 * @param {*} acc The (initial) accumulator value for each group.
 * @param {Function} keyFn The function that maps the list's element into a key.
 * @param {Array} list The array to group.
 * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
 *         `valueFn` for elements which produced that key when passed to `keyFn`.
 * @see R.groupBy, R.reduce
 * @example
 *
 *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);
 *      var namesByGrade = reduceToNamesBy(function(student) {
 *        var score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      var students = [{name: 'Lucy', score: 92},
 *                      {name: 'Drew', score: 85},
 *                      // ...
 *                      {name: 'Bart', score: 62}];
 *      namesByGrade(students);
 *      // {
 *      //   'A': ['Lucy'],
 *      //   'B': ['Drew']
 *      //   // ...,
 *      //   'F': ['Bart']
 *      // }
 */
module.exports = _curryN(4, [], _dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
  return _reduce(function (acc, elt) {
    var key = keyFn(elt);
    acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);
    return acc;
  }, {}, list);
}));

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _complement = __webpack_require__(92);
var _curry2 = __webpack_require__(0);
var filter = __webpack_require__(58);

/**
 * The complement of `filter`.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array}
 * @see R.filter, R.transduce, R.addIndex
 * @example
 *
 *      var isOdd = (n) => n % 2 === 1;
 *
 *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
module.exports = _curry2(function reject(pred, filterable) {
  return filter(_complement(pred), filterable);
});

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _isString = __webpack_require__(42);

/**
 * Returns a new list or string with the elements or characters in reverse
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {Array|String} list
 * @return {Array|String}
 * @example
 *
 *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
 *      R.reverse([1, 2]);     //=> [2, 1]
 *      R.reverse([1]);        //=> [1]
 *      R.reverse([]);         //=> []
 *
 *      R.reverse('abc');      //=> 'cba'
 *      R.reverse('ab');       //=> 'ba'
 *      R.reverse('a');        //=> 'a'
 *      R.reverse('');         //=> ''
 */
module.exports = _curry1(function reverse(list) {
  return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();
});

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trace = undefined;

var _preact = __webpack_require__(16);

var _console = __webpack_require__(141);

var _console2 = _interopRequireDefault(_console);

var _ramda = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const trace = exports.trace = msg => ({ debug: true, message: msg });

var Singleton;

(function () {
  var instance;

  Singleton = function Singleton() {
    if (instance) {
      return instance;
    }

    let console_shell;
    let component_instance;
    let data_history = [];

    instance = Object.freeze({
      init: (0, _ramda.once)(node => {
        console_shell = node;
        console_shell.setAttribute('class', 'console');
        component_instance = (0, _preact.render)((0, _preact.h)(_console2.default, { data: data_history }), console_shell);
        return component_instance;
      }),
      log: (data, title) => {
        return (0, _preact.render)((0, _preact.h)(_console2.default, { data: instance.pushLog({ data, title }) }), undefined, component_instance);
      },
      pushLog: ({ data, title }) => {
        data_history = (0, _ramda.append)({ data, title })(data_history);
        return data_history;
      },
      renderComponent: () => (0, _preact.render)((0, _preact.h)(_console2.default, { data: data_history }), undefined, component_instance)
    });

    return instance;
  };
})();

exports.default = Singleton();

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var buffer = __webpack_require__(9);
var Buffer = buffer.Buffer;
var SlowBuffer = buffer.SlowBuffer;
var MAX_LEN = buffer.kMaxLength || 2147483647;
exports.alloc = function alloc(size, fill, encoding) {
  if (typeof Buffer.alloc === 'function') {
    return Buffer.alloc(size, fill, encoding);
  }
  if (typeof encoding === 'number') {
    throw new TypeError('encoding must not be number');
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  var enc = encoding;
  var _fill = fill;
  if (_fill === undefined) {
    enc = undefined;
    _fill = 0;
  }
  var buf = new Buffer(size);
  if (typeof _fill === 'string') {
    var fillBuf = new Buffer(_fill, enc);
    var flen = fillBuf.length;
    var i = -1;
    while (++i < size) {
      buf[i] = fillBuf[i % flen];
    }
  } else {
    buf.fill(_fill);
  }
  return buf;
};
exports.allocUnsafe = function allocUnsafe(size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    return Buffer.allocUnsafe(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new Buffer(size);
};
exports.from = function from(value, encodingOrOffset, length) {
  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
    return Buffer.from(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof value === 'string') {
    return new Buffer(value, encodingOrOffset);
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    var offset = encodingOrOffset;
    if (arguments.length === 1) {
      return new Buffer(value);
    }
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    var len = length;
    if (typeof len === 'undefined') {
      len = value.byteLength - offset;
    }
    if (offset >= value.byteLength) {
      throw new RangeError('\'offset\' is out of bounds');
    }
    if (len > value.byteLength - offset) {
      throw new RangeError('\'length\' is out of bounds');
    }
    return new Buffer(value.slice(offset, offset + len));
  }
  if (Buffer.isBuffer(value)) {
    var out = new Buffer(value.length);
    value.copy(out, 0, 0, value.length);
    return out;
  }
  if (value) {
    if (Array.isArray(value) || typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer || 'length' in value) {
      return new Buffer(value);
    }
    if (value.type === 'Buffer' && Array.isArray(value.data)) {
      return new Buffer(value.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
};
exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
  if (typeof Buffer.allocUnsafeSlow === 'function') {
    return Buffer.allocUnsafeSlow(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size >= MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new SlowBuffer(size);
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);
    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });
    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });
    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });
    default:
      args = new Array(len - 1);
      i = 0;
      while (i < args.length) {
        args[i++] = arguments[i];
      }
      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20)))

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(162);
exports.encode = exports.stringify = __webpack_require__(163);

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(10);
var _curry2 = __webpack_require__(0);
var _reduce = __webpack_require__(8);
var map = __webpack_require__(7);

/**
 * ap applies a list of functions to a list of values.
 *
 * Dispatches to the `ap` method of the second argument, if present. Also
 * treats curried functions as applicatives.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig [a -> b] -> [a] -> [b]
 * @sig Apply f => f (a -> b) -> f a -> f b
 * @param {Array} fns An array of functions
 * @param {Array} vs An array of values
 * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.
 * @example
 *
 *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
 *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
 * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
 */
module.exports = _curry2(function ap(applicative, fn) {
  return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? function (x) {
    return applicative(x)(fn(x));
  } :
  // else
  _reduce(function (acc, f) {
    return _concat(acc, map(f, fn));
  }, [], applicative);
});

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _makeFlat = __webpack_require__(100);
var _xchain = __webpack_require__(241);
var map = __webpack_require__(7);

/**
 * `chain` maps a function over a list and concatenates the results. `chain`
 * is also known as `flatMap` in some libraries
 *
 * Dispatches to the `chain` method of the second argument, if present,
 * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain m => (a -> m b) -> m a -> m b
 * @param {Function} fn The function to map with
 * @param {Array} list The list to map over
 * @return {Array} The result of flat-mapping `list` with `fn`
 * @example
 *
 *      var duplicate = n => [n, n];
 *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
 *
 *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]
 */
module.exports = _curry2(_dispatchable(['chain'], _xchain, function chain(fn, monad) {
  if (typeof monad === 'function') {
    return function (x) {
      return fn(monad(x))(x);
    };
  }
  return _makeFlat(false)(map(fn, monad));
}));

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pipe = __webpack_require__(117);
var reverse = __webpack_require__(49);

/**
 * Performs right-to-left function composition. The rightmost function may have
 * any arity; the remaining functions must be unary.
 *
 * **Note:** The result of compose is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipe
 * @example
 *
 *      var classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
 *      var yellGreeting = R.compose(R.toUpper, classyGreeting);
 *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
 *
 *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
 *
 * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
 */
module.exports = function compose() {
  if (arguments.length === 0) {
    throw new Error('compose requires at least one argument');
  }
  return pipe.apply(this, reverse(arguments));
};

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _isArray = __webpack_require__(17);
var _isFunction = __webpack_require__(40);
var toString = __webpack_require__(34);

/**
 * Returns the result of concatenating the given lists or strings.
 *
 * Note: `R.concat` expects both arguments to be of the same type,
 * unlike the native `Array.prototype.concat` method. It will throw
 * an error if you `concat` an Array with a non-Array value.
 *
 * Dispatches to the `concat` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @sig String -> String -> String
 * @param {Array|String} firstList The first list
 * @param {Array|String} secondList The second list
 * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of
 * `secondList`.
 *
 * @example
 *
 *      R.concat('ABC', 'DEF'); // 'ABCDEF'
 *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
 *      R.concat([], []); //=> []
 */
module.exports = _curry2(function concat(a, b) {
  if (a == null || !_isFunction(a.concat)) {
    throw new TypeError(toString(a) + ' does not have a method named "concat"');
  }
  if (_isArray(a) && !_isArray(b)) {
    throw new TypeError(toString(b) + ' is not an array');
  }
  return a.concat(b);
});

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _filter = __webpack_require__(94);
var _isObject = __webpack_require__(99);
var _reduce = __webpack_require__(8);
var _xfilter = __webpack_require__(246);
var keys = __webpack_require__(13);

/**
 * Takes a predicate and a "filterable", and returns a new filterable of the
 * same type containing the members of the given filterable which satisfy the
 * given predicate.
 *
 * Dispatches to the `filter` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array}
 * @see R.reject, R.transduce, R.addIndex
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *
 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
module.exports = _curry2(_dispatchable(['filter'], _xfilter, function (pred, filterable) {
  return _isObject(filterable) ? _reduce(function (acc, key) {
    if (pred(filterable[key])) {
      acc[key] = filterable[key];
    }
    return acc;
  }, {}, keys(filterable)) :
  // else
  _filter(pred, filterable);
}));

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _identity = __webpack_require__(62);

/**
 * A function that does nothing but return the parameter supplied to it. Good
 * as a default or placeholder function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig a -> a
 * @param {*} x The value to return.
 * @return {*} The input value, `x`.
 * @example
 *
 *      R.identity(1); //=> 1
 *
 *      var obj = {};
 *      R.identity(obj) === obj; //=> true
 * @symb R.identity(a) = a
 */
module.exports = _curry1(_identity);

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _objectAssign = __webpack_require__(231);

module.exports = typeof Object.assign === 'function' ? Object.assign : _objectAssign;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _containsWith(pred, x, list) {
  var idx = 0;
  var len = list.length;

  while (idx < len) {
    if (pred(x, list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
};

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _identity(x) {
  return x;
};

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _isTransformer(obj) {
  return typeof obj['@@transducer/step'] === 'function';
};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns a function that when supplied an object returns the indicated
 * property of that object, if it exists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig s -> {s: a} -> a | Undefined
 * @param {String} p The property name
 * @param {Object} obj The object to query
 * @return {*} The value at `obj.p`.
 * @see R.path
 * @example
 *
 *      R.prop('x', {x: 100}); //=> 100
 *      R.prop('x', {}); //=> undefined
 */
module.exports = _curry2(function prop(p, obj) {
  return obj[p];
});

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _checkForMethod = __webpack_require__(28);
var _curry1 = __webpack_require__(1);
var slice = __webpack_require__(23);

/**
 * Returns all but the first element of the given list or string (or object
 * with a `tail` method).
 *
 * Dispatches to the `slice` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.head, R.init, R.last
 * @example
 *
 *      R.tail([1, 2, 3]);  //=> [2, 3]
 *      R.tail([1, 2]);     //=> [2]
 *      R.tail([1]);        //=> []
 *      R.tail([]);         //=> []
 *
 *      R.tail('abc');  //=> 'bc'
 *      R.tail('ab');   //=> 'b'
 *      R.tail('a');    //=> ''
 *      R.tail('');     //=> ''
 */
module.exports = _curry1(_checkForMethod('tail', slice(1, Infinity)));

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Gives a single-word string description of the (native) type of a value,
 * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
 * attempt to distinguish user Object types any further, reporting them all as
 * 'Object'.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Type
 * @sig (* -> {*}) -> String
 * @param {*} val The value to test
 * @return {String}
 * @example
 *
 *      R.type({}); //=> "Object"
 *      R.type(1); //=> "Number"
 *      R.type(false); //=> "Boolean"
 *      R.type('s'); //=> "String"
 *      R.type(null); //=> "Null"
 *      R.type([]); //=> "Array"
 *      R.type(/[A-z]/); //=> "RegExp"
 */
module.exports = _curry1(function type(val) {
  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
});

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var identity = __webpack_require__(59);
var uniqBy = __webpack_require__(125);

/**
 * Returns a new list containing only one copy of each element in the original
 * list. `R.equals` is used to determine equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
 *      R.uniq([1, '1']);     //=> [1, '1']
 *      R.uniq([[42], [42]]); //=> [[42]]
 */
module.exports = uniqBy(identity);

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _containsWith = __webpack_require__(61);
var _curry2 = __webpack_require__(0);

/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied predicate to
 * two list elements. Prefers the first item if two items compare equal based
 * on the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category List
 * @sig (a, a -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      var strEq = R.eqBy(String);
 *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
 *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
 *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
 *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
 */
module.exports = _curry2(function uniqWith(pred, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var item;
  while (idx < len) {
    item = list[idx];
    if (!_containsWith(pred, item, result)) {
      result[result.length] = item;
    }
    idx += 1;
  }
  return result;
});

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConcepts = exports.conceptIdPairs = exports.reduceByTerm = exports.dotVerbActivity = exports.reduceFilter = exports.compareByTypeAndLabel = undefined;

var _ramda = __webpack_require__(21);

const compareByTypeAndLabel = exports.compareByTypeAndLabel = (0, _ramda.curry)((term, type, langISO, obj) => (0, _ramda.toLower)(obj['type'] || obj['@type']) === type && (0, _ramda.toLower)(term) === obj.prefLabel[langISO]);

const reduceFilter = exports.reduceFilter = (compare, concepts) => (0, _ramda.compose)((0, _ramda.reduce)((acc, value) => {
  return (0, _ramda.pipe)((0, _ramda.filter)(ea => compare(ea)), (0, _ramda.concat)(acc))(value);
}, []), _ramda.values)(concepts);

const dotVerbActivity = exports.dotVerbActivity = ({ verb, activity }, langISO, profile_data) => {
  if (verb && activity) {
    const concepts = getConcepts(profile_data);
    return [{ [verb]: reduceByTerm(verb, 'verb', langISO, concepts) }, { [activity]: reduceByTerm(activity, 'activitytype', langISO, concepts) }];
  } else {
    return [];
  }
};

const reduceByTerm = exports.reduceByTerm = (term, type, langISO, concepts) => {
  return reduceFilter(compareByTypeAndLabel(term, type, langISO), concepts);
};

const conceptIdPairs = exports.conceptIdPairs = profile_data => {
  return (0, _ramda.map)(ea => ea.concepts.map(e => ({ profile: ea, concept: e })))(profile_data);
};

const getConcepts = exports.getConcepts = profile_data => {
  return (0, _ramda.zipObj)((0, _ramda.map)(ea => ea.id)(profile_data), (0, _ramda.map)(ea => ea.concepts)(profile_data));
};

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function (n) {
  if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function (type) {
  var er, handler, len, args, i, listeners;

  if (!this._events) this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler)) return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++) listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function (type, listener) {
  var m;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function (type, listener) {
  if (!isFunction(listener)) throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function (type, listener) {
  var list, position, length, i;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events || !this._events[type]) return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener || isFunction(list.listener) && list.listener === listener) {
    delete this._events[type];
    if (this._events.removeListener) this.emit('removeListener', type, listener);
  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener) this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function (type) {
  var key, listeners;

  if (!this._events) return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function (type) {
  var ret;
  if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function (type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function (emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = __webpack_require__(9).Buffer;

var isBufferEncoding = Buffer.isEncoding || function (encoding) {
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function (encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};

// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function (buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function (buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = buffer.length >= 3 ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function (buffer) {
  var res = '';
  if (buffer && buffer.length) res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(10);
var _curry3 = __webpack_require__(2);

/**
 * Applies a function to the value at the given index of an array, returning a
 * new copy of the array with the element at the given index replaced with the
 * result of the function application.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig (a -> a) -> Number -> [a] -> [a]
 * @param {Function} fn The function to apply.
 * @param {Number} idx The index.
 * @param {Array|Arguments} list An array-like object whose value
 *        at the supplied index will be replaced.
 * @return {Array} A copy of the supplied array-like object with
 *         the element at index `idx` replaced with the value
 *         returned by applying `fn` to the existing element.
 * @see R.update
 * @example
 *
 *      R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]
 *      R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]
 * @symb R.adjust(f, -1, [a, b]) = [a, f(b)]
 * @symb R.adjust(f, 0, [a, b]) = [f(a), b]
 */
module.exports = _curry3(function adjust(fn, idx, list) {
  if (idx >= list.length || idx < -list.length) {
    return list;
  }
  var start = idx < 0 ? list.length : 0;
  var _idx = start + idx;
  var _list = _concat(list);
  _list[_idx] = fn(list[_idx]);
  return _list;
});

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns `true` if both arguments are `true`; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if it is falsy, otherwise the second argument.
 * @see R.both
 * @example
 *
 *      R.and(true, true); //=> true
 *      R.and(true, false); //=> false
 *      R.and(false, true); //=> false
 *      R.and(false, false); //=> false
 */
module.exports = _curry2(function and(a, b) {
  return a && b;
});

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xany = __webpack_require__(101);

/**
 * Returns `true` if at least one of elements of the list match the predicate,
 * `false` otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
 *         otherwise.
 * @see R.all, R.none, R.transduce
 * @example
 *
 *      var lessThan0 = R.flip(R.lt)(0);
 *      var lessThan2 = R.flip(R.lt)(2);
 *      R.any(lessThan0)([1, 2]); //=> false
 *      R.any(lessThan2)([1, 2]); //=> true
 */
module.exports = _curry2(_dispatchable(['any'], _xany, function any(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (fn(list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}));

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Applies function `fn` to the argument list `args`. This is useful for
 * creating a fixed-arity function from a variadic function. `fn` should be a
 * bound function if context is significant.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig (*... -> a) -> [*] -> a
 * @param {Function} fn The function which will be called with `args`
 * @param {Array} args The arguments to call `fn` with
 * @return {*} result The result, equivalent to `fn(...args)`
 * @see R.call, R.unapply
 * @example
 *
 *      var nums = [1, 2, 3, -99, 42, 6, 7];
 *      R.apply(Math.max, nums); //=> 42
 * @symb R.apply(f, [a, b, c]) = f(a, b, c)
 */
module.exports = _curry2(function apply(fn, args) {
  return fn.apply(this, args);
});

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var _has = __webpack_require__(6);
var _isArray = __webpack_require__(17);
var _isInteger = __webpack_require__(97);
var assoc = __webpack_require__(36);

/**
 * Makes a shallow clone of an object, setting or overriding the nodes required
 * to create the given path, and placing the specific value at the tail end of
 * that path. Note that this copies and flattens prototype properties onto the
 * new object as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> {a}
 * @param {Array} path the path to set
 * @param {*} val The new value
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original except along the specified path.
 * @see R.dissocPath
 * @example
 *
 *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
 *
 *      // Any missing or non-object keys in path will be overridden
 *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}
 */
module.exports = _curry3(function assocPath(path, val, obj) {
  if (path.length === 0) {
    return val;
  }
  var idx = path[0];
  if (path.length > 1) {
    var nextObj = _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};
    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);
  }
  if (_isInteger(idx) && _isArray(obj)) {
    var arr = [].concat(obj);
    arr[idx] = val;
    return arr;
  } else {
    return assoc(idx, val, obj);
  }
});

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arity = __webpack_require__(12);
var _curry2 = __webpack_require__(0);

/**
 * Creates a function that is bound to a context.
 * Note: `R.bind` does not provide the additional argument-binding capabilities of
 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @category Object
 * @sig (* -> *) -> {*} -> (* -> *)
 * @param {Function} fn The function to bind to context
 * @param {Object} thisObj The context to bind `fn` to
 * @return {Function} A function that will execute in the context of `thisObj`.
 * @see R.partial
 * @example
 *
 *      var log = R.bind(console.log, console);
 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
 *      // logs {a: 2}
 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
 */
module.exports = _curry2(function bind(fn, thisObj) {
  return _arity(fn.length, function () {
    return fn.apply(thisObj, arguments);
  });
});

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var chain = __webpack_require__(55);
var compose = __webpack_require__(56);
var map = __webpack_require__(7);

/**
 * Returns the right-to-left Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
 * @param {...Function} ...functions The functions to compose
 * @return {Function}
 * @see R.pipeK
 * @example
 *
 *       //  get :: String -> Object -> Maybe *
 *       var get = R.curry((propName, obj) => Maybe(obj[propName]))
 *
 *       //  getStateCode :: Maybe String -> Maybe String
 *       var getStateCode = R.composeK(
 *         R.compose(Maybe.of, R.toUpper),
 *         get('state'),
 *         get('address'),
 *         get('user'),
 *       );
 *       getStateCode({"user":{"address":{"state":"ny"}}}); //=> Maybe.Just("NY")
 *       getStateCode({}); //=> Maybe.Nothing()
 * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))
 */
module.exports = function composeK() {
  if (arguments.length === 0) {
    throw new Error('composeK requires at least one argument');
  }
  var init = Array.prototype.slice.call(arguments);
  var last = init.pop();
  return compose(compose.apply(this, map(chain, init)), last);
};

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var curry = __webpack_require__(37);
var nAry = __webpack_require__(46);

/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type. The arity of the function
 * returned is specified to allow using variadic constructor functions.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Function
 * @sig Number -> (* -> {*}) -> (* -> {*})
 * @param {Number} n The arity of the constructor function.
 * @param {Function} Fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @example
 *
 *      // Variadic Constructor function
 *      function Salad() {
 *        this.ingredients = arguments;
 *      };
 *      Salad.prototype.recipe = function() {
 *        var instructions = R.map((ingredient) => (
 *          'Add a whollop of ' + ingredient, this.ingredients)
 *        )
 *        return R.join('\n', instructions)
 *      }
 *
 *      var ThreeLayerSalad = R.constructN(3, Salad)
 *
 *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.
 *      var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup')
 *      console.log(salad.recipe());
 *      // Add a whollop of Mayonnaise
 *      // Add a whollop of Potato Chips
 *      // Add a whollop of Potato Ketchup
 */
module.exports = _curry2(function constructN(n, Fn) {
  if (n > 10) {
    throw new Error('Constructor with greater than ten arguments');
  }
  if (n === 0) {
    return function () {
      return new Fn();
    };
  }
  return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
    switch (arguments.length) {
      case 1:
        return new Fn($0);
      case 2:
        return new Fn($0, $1);
      case 3:
        return new Fn($0, $1, $2);
      case 4:
        return new Fn($0, $1, $2, $3);
      case 5:
        return new Fn($0, $1, $2, $3, $4);
      case 6:
        return new Fn($0, $1, $2, $3, $4, $5);
      case 7:
        return new Fn($0, $1, $2, $3, $4, $5, $6);
      case 8:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
      case 9:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
      case 10:
        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
    }
  }));
});

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _map = __webpack_require__(43);
var curryN = __webpack_require__(5);
var max = __webpack_require__(25);
var pluck = __webpack_require__(33);
var reduce = __webpack_require__(14);

/**
 * Accepts a converging function and a list of branching functions and returns
 * a new function. When invoked, this new function is applied to some
 * arguments, each branching function is applied to those same arguments. The
 * results of each branching function are passed as arguments to the converging
 * function to produce the return value.
 *
 * @func
 * @memberOf R
 * @since v0.4.2
 * @category Function
 * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} after A function. `after` will be invoked with the return values of
 *        `fn1` and `fn2` as its arguments.
 * @param {Array} functions A list of functions.
 * @return {Function} A new function.
 * @see R.useWith
 * @example
 *
 *      var average = R.converge(R.divide, [R.sum, R.length])
 *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4
 *
 *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])
 *      strangeConcat("Yodel") //=> "YODELyodel"
 *
 * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))
 */
module.exports = _curry2(function converge(after, fns) {
  return curryN(reduce(max, 0, pluck('length', fns)), function () {
    var args = arguments;
    var context = this;
    return after.apply(context, _map(function (fn) {
      return fn.apply(context, args);
    }, fns));
  });
});

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns the second argument if it is not `null`, `undefined` or `NaN`
 * otherwise the first argument is returned.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {a} default The default value.
 * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
 * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
 * @example
 *
 *      var defaultTo42 = R.defaultTo(42);
 *
 *      defaultTo42(null);  //=> 42
 *      defaultTo42(undefined);  //=> 42
 *      defaultTo42('Ramda');  //=> 'Ramda'
 *      // parseInt('string') results in NaN
 *      defaultTo42(parseInt('string')); //=> 42
 */
module.exports = _curry2(function defaultTo(d, v) {
  return v == null || v !== v ? d : v;
});

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _contains = __webpack_require__(22);
var _curry2 = __webpack_require__(0);

/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Objects and Arrays are compared are compared
 * in terms of value equality, not reference equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith
 * @example
 *
 *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
 *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
 *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]
 */
module.exports = _curry2(function difference(first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!_contains(first[idx], second) && !_contains(first[idx], out)) {
      out[out.length] = first[idx];
    }
    idx += 1;
  }
  return out;
});

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _containsWith = __webpack_require__(61);
var _curry3 = __webpack_require__(2);

/**
 * Finds the set (i.e. no duplicates) of all elements in the first list not
 * contained in the second list. Duplication is determined according to the
 * value returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` that are not in `list2`.
 * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith
 * @example
 *
 *      var cmp = (x, y) => x.a === y.a;
 *      var l1 = [{a: 1}, {a: 2}, {a: 3}];
 *      var l2 = [{a: 3}, {a: 4}];
 *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
 */
module.exports = _curry3(function differenceWith(pred, first, second) {
  var out = [];
  var idx = 0;
  var firstLen = first.length;
  while (idx < firstLen) {
    if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {
      out.push(first[idx]);
    }
    idx += 1;
  }
  return out;
});

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns a new object that does not contain a `prop` property.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Object
 * @sig String -> {k: v} -> {k: v}
 * @param {String} prop The name of the property to dissociate
 * @param {Object} obj The object to clone
 * @return {Object} A new object equivalent to the original but without the specified property
 * @see R.assoc
 * @example
 *
 *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
 */
module.exports = _curry2(function dissoc(prop, obj) {
  var result = {};
  for (var p in obj) {
    result[p] = obj[p];
  }
  delete result[prop];
  return result;
});

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xdrop = __webpack_require__(242);
var slice = __webpack_require__(23);

/**
 * Returns all but the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `drop` method).
 *
 * Dispatches to the `drop` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {[a]} list
 * @return {[a]} A copy of list without the first `n` elements
 * @see R.take, R.transduce, R.dropLast, R.dropWhile
 * @example
 *
 *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.drop(3, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(4, ['foo', 'bar', 'baz']); //=> []
 *      R.drop(3, 'ramda');               //=> 'da'
 */
module.exports = _curry2(_dispatchable(['drop'], _xdrop, function drop(n, xs) {
  return slice(Math.max(0, n), Infinity, xs);
}));

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xdropRepeatsWith = __webpack_require__(102);
var last = __webpack_require__(106);

/**
 * Returns a new list without any consecutively repeating elements. Equality is
 * determined by applying the supplied predicate to each pair of consecutive elements. The
 * first element in a series of equal elements will be preserved.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig (a, a -> Boolean) -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
 *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
 */
module.exports = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
  var result = [];
  var idx = 1;
  var len = list.length;
  if (len !== 0) {
    result[0] = list[0];
    while (idx < len) {
      if (!pred(last(result), list[idx])) {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
  }
  return result;
}));

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _isArguments = __webpack_require__(96);
var _isArray = __webpack_require__(17);
var _isObject = __webpack_require__(99);
var _isString = __webpack_require__(42);

/**
 * Returns the empty value of its argument's type. Ramda defines the empty
 * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
 * types are supported if they define `<Type>.empty` and/or
 * `<Type>.prototype.empty`.
 *
 * Dispatches to the `empty` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> a
 * @param {*} x
 * @return {*}
 * @example
 *
 *      R.empty(Just(42));      //=> Nothing()
 *      R.empty([1, 2, 3]);     //=> []
 *      R.empty('unicorns');    //=> ''
 *      R.empty({x: 1, y: 2});  //=> {}
 */
module.exports = _curry1(function empty(x) {
  return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {
    return arguments;
  }() :
  // else
  void 0;
});

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns true if its arguments are identical, false otherwise. Values are
 * identical if they reference the same memory. `NaN` is identical to `NaN`;
 * `0` and `-0` are not identical.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Relation
 * @sig a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @example
 *
 *      var o = {};
 *      R.identical(o, o); //=> true
 *      R.identical(1, 1); //=> true
 *      R.identical(1, '1'); //=> false
 *      R.identical([], []); //=> false
 *      R.identical(0, -0); //=> false
 *      R.identical(NaN, NaN); //=> true
 */
module.exports = _curry2(function identical(a, b) {
  // SameValue algorithm
  if (a === b) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return a !== 0 || 1 / a === 1 / b;
  } else {
    // Step 6.a: NaN == NaN
    return a !== a && b !== b;
  }
});

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _cloneRegExp = __webpack_require__(91);
var type = __webpack_require__(66);

/**
 * Copies an object.
 *
 * @private
 * @param {*} value The value to be copied
 * @param {Array} refFrom Array containing the source references
 * @param {Array} refTo Array containing the copied source references
 * @param {Boolean} deep Whether or not to perform deep cloning.
 * @return {*} The copied value.
 */
module.exports = function _clone(value, refFrom, refTo, deep) {
  var copy = function copy(copiedValue) {
    var len = refFrom.length;
    var idx = 0;
    while (idx < len) {
      if (value === refFrom[idx]) {
        return refTo[idx];
      }
      idx += 1;
    }
    refFrom[idx + 1] = value;
    refTo[idx + 1] = copiedValue;
    for (var key in value) {
      copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];
    }
    return copiedValue;
  };
  switch (type(value)) {
    case 'Object':
      return copy({});
    case 'Array':
      return copy([]);
    case 'Date':
      return new Date(value.valueOf());
    case 'RegExp':
      return _cloneRegExp(value);
    default:
      return value;
  }
};

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _cloneRegExp(pattern) {
                                  return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));
};

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _complement(f) {
  return function () {
    return !f.apply(this, arguments);
  };
};

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arity = __webpack_require__(12);
var _curry2 = __webpack_require__(0);

module.exports = function _createPartialApplicator(concat) {
  return _curry2(function (fn, args) {
    return _arity(Math.max(0, fn.length - args.length), function () {
      return fn.apply(this, concat(args, arguments));
    });
  });
};

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _filter(fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];

  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }
    idx += 1;
  }
  return result;
};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var equals = __webpack_require__(11);

module.exports = function _indexOf(list, a, idx) {
  var inf, item;
  // Array.prototype.indexOf doesn't exist below IE9
  if (typeof list.indexOf === 'function') {
    switch (typeof a) {
      case 'number':
        if (a === 0) {
          // manually crawl the list to distinguish between +0 and -0
          inf = 1 / a;
          while (idx < list.length) {
            item = list[idx];
            if (item === 0 && 1 / item === inf) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        } else if (a !== a) {
          // NaN
          while (idx < list.length) {
            item = list[idx];
            if (typeof item === 'number' && item !== item) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        }
        // non-zero numbers can utilise Set
        return list.indexOf(a, idx);

      // all these types can utilise Set
      case 'string':
      case 'boolean':
      case 'function':
      case 'undefined':
        return list.indexOf(a, idx);

      case 'object':
        if (a === null) {
          // null can utilise Set
          return list.indexOf(a, idx);
        }
    }
  }
  // anything else not covered above, defer to R.equals
  while (idx < list.length) {
    if (equals(list[idx], a)) {
      return idx;
    }
    idx += 1;
  }
  return -1;
};

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _has = __webpack_require__(6);

module.exports = function () {
  var toString = Object.prototype.toString;
  return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
    return toString.call(x) === '[object Arguments]';
  } : function _isArguments(x) {
    return _has('callee', x);
  };
}();

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determine if the passed argument is an integer.
 *
 * @private
 * @param {*} n
 * @category Type
 * @return {Boolean}
 */
module.exports = Number.isInteger || function _isInteger(n) {
  return n << 0 === n;
};

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _isNumber(x) {
  return Object.prototype.toString.call(x) === '[object Number]';
};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _isObject(x) {
  return Object.prototype.toString.call(x) === '[object Object]';
};

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArrayLike = __webpack_require__(30);

/**
 * `_makeFlat` is a helper function that returns a one-level or fully recursive
 * function based on the flag passed in.
 *
 * @private
 */
module.exports = function _makeFlat(recursive) {
  return function flatt(list) {
    var value, jlen, j;
    var result = [];
    var idx = 0;
    var ilen = list.length;

    while (idx < ilen) {
      if (isArrayLike(list[idx])) {
        value = recursive ? flatt(list[idx]) : list[idx];
        j = 0;
        jlen = value.length;
        while (j < jlen) {
          result[result.length] = value[j];
          j += 1;
        }
      } else {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
    return result;
  };
};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(18);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XAny(f, xf) {
    this.xf = xf;
    this.f = f;
    this.any = false;
  }
  XAny.prototype['@@transducer/init'] = _xfBase.init;
  XAny.prototype['@@transducer/result'] = function (result) {
    if (!this.any) {
      result = this.xf['@@transducer/step'](result, false);
    }
    return this.xf['@@transducer/result'](result);
  };
  XAny.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.any = true;
      result = _reduced(this.xf['@@transducer/step'](result, true));
    }
    return result;
  };

  return _curry2(function _xany(f, xf) {
    return new XAny(f, xf);
  });
}();

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XDropRepeatsWith(pred, xf) {
    this.xf = xf;
    this.pred = pred;
    this.lastValue = undefined;
    this.seenFirstValue = false;
  }

  XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;
  XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;
  XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {
    var sameAsLast = false;
    if (!this.seenFirstValue) {
      this.seenFirstValue = true;
    } else if (this.pred(this.lastValue, input)) {
      sameAsLast = true;
    }
    this.lastValue = input;
    return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
  };

  return _curry2(function _xdropRepeatsWith(pred, xf) {
    return new XDropRepeatsWith(pred, xf);
  });
}();

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function () {
  function XWrap(fn) {
    this.f = fn;
  }
  XWrap.prototype['@@transducer/init'] = function () {
    throw new Error('init not implemented on XWrap');
  };
  XWrap.prototype['@@transducer/result'] = function (acc) {
    return acc;
  };
  XWrap.prototype['@@transducer/step'] = function (acc, x) {
    return this.f(acc, x);
  };

  return function _xwrap(fn) {
    return new XWrap(fn);
  };
}();

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * See if an object (`val`) is an instance of the supplied constructor. This
 * function will check up the inheritance chain, if any.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Type
 * @sig (* -> {*}) -> a -> Boolean
 * @param {Object} ctor A constructor
 * @param {*} val The value to test
 * @return {Boolean}
 * @example
 *
 *      R.is(Object, {}); //=> true
 *      R.is(Number, 1); //=> true
 *      R.is(Object, 1); //=> false
 *      R.is(String, 's'); //=> true
 *      R.is(String, new String('')); //=> true
 *      R.is(Object, new String('')); //=> true
 *      R.is(Object, 's'); //=> false
 *      R.is(Number, {}); //=> false
 */
module.exports = _curry2(function is(Ctor, val) {
  return val != null && val.constructor === Ctor || val instanceof Ctor;
});

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var converge = __webpack_require__(81);

/**
 * juxt applies a list of functions to a list of values.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Function
 * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
 * @param {Array} fns An array of functions
 * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
 * @see R.applySpec
 * @example
 *
 *      var getRange = R.juxt([Math.min, Math.max]);
 *      getRange(3, 4, 9, -3); //=> [-3, 9]
 * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]
 */
module.exports = _curry1(function juxt(fns) {
  return converge(function () {
    return Array.prototype.slice.call(arguments, 0);
  }, fns);
});

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var nth = __webpack_require__(31);

/**
 * Returns the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.init, R.head, R.tail
 * @example
 *
 *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
 *      R.last([]); //=> undefined
 *
 *      R.last('abc'); //=> 'c'
 *      R.last(''); //=> ''
 */
module.exports = nth(-1);

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _isNumber = __webpack_require__(98);

/**
 * Returns the number of elements in the array by returning `list.length`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [a] -> Number
 * @param {Array} list The array to inspect.
 * @return {Number} The length of the array.
 * @example
 *
 *      R.length([]); //=> 0
 *      R.length([1, 2, 3]); //=> 3
 */
module.exports = _curry1(function length(list) {
  return list != null && _isNumber(list.length) ? list.length : NaN;
});

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _reduce = __webpack_require__(8);
var ap = __webpack_require__(54);
var curryN = __webpack_require__(5);
var map = __webpack_require__(7);

/**
 * "lifts" a function to be the specified arity, so that it may "map over" that
 * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Function
 * @sig Number -> (*... -> *) -> ([*]... -> [*])
 * @param {Function} fn The function to lift into higher context
 * @return {Function} The lifted function.
 * @see R.lift, R.ap
 * @example
 *
 *      var madd3 = R.liftN(3, (...args) => R.sum(args));
 *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
 */
module.exports = _curry2(function liftN(arity, fn) {
  var lifted = curryN(arity, fn);
  return curryN(arity, function () {
    return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
  });
});

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var sum = __webpack_require__(122);

/**
 * Returns the mean of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @example
 *
 *      R.mean([2, 7, 9]); //=> 6
 *      R.mean([]); //=> NaN
 */
module.exports = _curry1(function mean(list) {
  return sum(list) / list.length;
});

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var _has = __webpack_require__(6);

/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the key
 * and the values associated with the key in each object, with the result being
 * used as the value associated with the key in the returned object. The key
 * will be excluded from the returned object if the resulting value is
 * `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.merge, R.mergeWith
 * @example
 *
 *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
 *      R.mergeWithKey(concatValues,
 *                     { a: true, thing: 'foo', values: [10, 20] },
 *                     { b: true, thing: 'bar', values: [15, 35] });
 *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
 * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }
 */
module.exports = _curry3(function mergeWithKey(fn, l, r) {
  var result = {};
  var k;

  for (k in l) {
    if (_has(k, l)) {
      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
    }
  }

  for (k in r) {
    if (_has(k, r) && !_has(k, result)) {
      result[k] = r[k];
    }
  }

  return result;
});

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Multiplies two numbers. Equivalent to `a * b` but curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a * b`.
 * @see R.divide
 * @example
 *
 *      var double = R.multiply(2);
 *      var triple = R.multiply(3);
 *      double(3);       //=>  6
 *      triple(4);       //=> 12
 *      R.multiply(2, 5);  //=> 10
 */
module.exports = _curry2(function multiply(a, b) {
  return a * b;
});

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * A function that returns the `!` of its argument. It will return `true` when
 * passed false-y value, and `false` when passed a truth-y one.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig * -> Boolean
 * @param {*} a any value
 * @return {Boolean} the logical inverse of passed argument.
 * @see R.complement
 * @example
 *
 *      R.not(true); //=> false
 *      R.not(false); //=> true
 *      R.not(0); //=> true
 *      R.not(1); //=> false
 */
module.exports = _curry1(function not(a) {
  return !a;
});

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Creates an object containing a single key:value pair.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @sig String -> a -> {String:a}
 * @param {String} key
 * @param {*} val
 * @return {Object}
 * @see R.pair
 * @example
 *
 *      var matchPhrases = R.compose(
 *        R.objOf('must'),
 *        R.map(R.objOf('match_phrase'))
 *      );
 *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
 */
module.exports = _curry2(function objOf(key, val) {
  var obj = {};
  obj[key] = val;
  return obj;
});

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns `true` if one or both of its arguments are `true`. Returns `false`
 * if both arguments are `false`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> b -> a | b
 * @param {Any} a
 * @param {Any} b
 * @return {Any} the first argument if truthy, otherwise the second argument.
 * @see R.either
 * @example
 *
 *      R.or(true, true); //=> true
 *      R.or(true, false); //=> true
 *      R.or(false, true); //=> true
 *      R.or(false, false); //=> false
 */
module.exports = _curry2(function or(a, b) {
  return a || b;
});

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the result of applying the given function to
 * the focused value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> (a -> a) -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var headLens = R.lensIndex(0);
 *
 *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']
 */
module.exports = function () {
  // `Identity` is a functor that holds a single value, where `map` simply
  // transforms the held value with the provided function.
  var Identity = function (x) {
    return { value: x, map: function (f) {
        return Identity(f(x));
      } };
  };

  return _curry3(function over(lens, f, x) {
    // The value returned by the getter function is first transformed with `f`,
    // then set as the value of an `Identity`. This is then mapped over with the
    // setter function of the lens.
    return lens(function (y) {
      return Identity(f(y));
    })(x).value;
  });
}();

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Similar to `pick` except that this one includes a `key: undefined` pair for
 * properties that don't exist.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.pick
 * @example
 *
 *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
 */
module.exports = _curry2(function pickAll(names, obj) {
  var result = {};
  var idx = 0;
  var len = names.length;
  while (idx < len) {
    var name = names[idx];
    result[name] = obj[name];
    idx += 1;
  }
  return result;
});

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arity = __webpack_require__(12);
var _pipe = __webpack_require__(233);
var reduce = __webpack_require__(14);
var tail = __webpack_require__(65);

/**
 * Performs left-to-right function composition. The leftmost function may have
 * any arity; the remaining functions must be unary.
 *
 * In some libraries this function is named `sequence`.
 *
 * **Note:** The result of pipe is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.compose
 * @example
 *
 *      var f = R.pipe(Math.pow, R.negate, R.inc);
 *
 *      f(3, 4); // -(3^4) + 1
 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
 */
module.exports = function pipe() {
  if (arguments.length === 0) {
    throw new Error('pipe requires at least one argument');
  }
  return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
};

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arity = __webpack_require__(12);
var _pipeP = __webpack_require__(234);
var reduce = __webpack_require__(14);
var tail = __webpack_require__(65);

/**
 * Performs left-to-right composition of one or more Promise-returning
 * functions. The leftmost function may have any arity; the remaining functions
 * must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.composeP
 * @example
 *
 *      //  followersForUser :: String -> Promise [User]
 *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);
 */
module.exports = function pipeP() {
  if (arguments.length === 0) {
    throw new Error('pipeP requires at least one argument');
  }
  return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));
};

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(10);
var _curry2 = __webpack_require__(0);

/**
 * Returns a new list with the given element at the front, followed by the
 * contents of the list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The item to add to the head of the output list.
 * @param {Array} list The array to add to the tail of the output list.
 * @return {Array} A new array.
 * @see R.append
 * @example
 *
 *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
 */
module.exports = _curry2(function prepend(el, list) {
  return _concat([el], list);
});

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * Similar to `reduce`, except moves through the input list from the right to
 * the left.
 *
 * The iterator function receives two values: *(value, acc)*, while the arguments'
 * order of `reduce`'s iterator function is *(acc, value)*.
 *
 * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a, b -> b) -> b -> [a] -> b
 * @param {Function} fn The iterator function. Receives two values, the current element from the array
 *        and the accumulator.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.addIndex
 * @example
 *
 *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2
 *          -               -2
 *         / \              / \
 *        1   -            1   3
 *           / \              / \
 *          2   -     ==>    2  -1
 *             / \              / \
 *            3   -            3   4
 *               / \              / \
 *              4   0            4   0
 *
 * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))
 */
module.exports = _curry3(function reduceRight(fn, acc, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    acc = fn(list[idx], acc);
    idx -= 1;
  }
  return acc;
});

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var ap = __webpack_require__(54);
var map = __webpack_require__(7);
var prepend = __webpack_require__(119);
var reduceRight = __webpack_require__(120);

/**
 * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)
 * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an
 * Applicative of Traversable.
 *
 * Dispatches to the `sequence` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
 * @param {Function} of
 * @param {*} traversable
 * @return {*}
 * @see R.traverse
 * @example
 *
 *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])
 *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()
 *
 *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]
 *      R.sequence(R.of, Nothing());       //=> [Nothing()]
 */
module.exports = _curry2(function sequence(of, traversable) {
  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (x, acc) {
    return ap(map(prepend, x), acc);
  }, of([]), traversable);
});

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var add = __webpack_require__(35);
var reduce = __webpack_require__(14);

/**
 * Adds together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The sum of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.sum([2,4,6,8,100,1]); //=> 121
 */
module.exports = reduce(add, 0);

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xtake = __webpack_require__(253);
var slice = __webpack_require__(23);

/**
 * Returns the first `n` elements of the given list, string, or
 * transducer/transformer (or object with a `take` method).
 *
 * Dispatches to the `take` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n
 * @param {*} list
 * @return {*}
 * @see R.drop
 * @example
 *
 *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.take(3, 'ramda');               //=> 'ram'
 *
 *      var personnel = [
 *        'Dave Brubeck',
 *        'Paul Desmond',
 *        'Eugene Wright',
 *        'Joe Morello',
 *        'Gerry Mulligan',
 *        'Bob Bates',
 *        'Joe Dodge',
 *        'Ron Crotty'
 *      ];
 *
 *      var takeFive = R.take(5);
 *      takeFive(personnel);
 *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
 * @symb R.take(-1, [a, b]) = [a, b]
 * @symb R.take(0, [a, b]) = []
 * @symb R.take(1, [a, b]) = [a]
 * @symb R.take(2, [a, b]) = [a, b]
 */
module.exports = _curry2(_dispatchable(['take'], _xtake, function take(n, xs) {
  return slice(0, n < 0 ? Infinity : n, xs);
}));

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Calls an input function `n` times, returning an array containing the results
 * of those function calls.
 *
 * `fn` is passed one argument: The current value of `n`, which begins at `0`
 * and is gradually incremented to `n - 1`.
 *
 * @func
 * @memberOf R
 * @since v0.2.3
 * @category List
 * @sig (Number -> a) -> Number -> [a]
 * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
 * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
 * @return {Array} An array containing the return values of all calls to `fn`.
 * @example
 *
 *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
 * @symb R.times(f, 0) = []
 * @symb R.times(f, 1) = [f(0)]
 * @symb R.times(f, 2) = [f(0), f(1)]
 */
module.exports = _curry2(function times(fn, n) {
  var len = Number(n);
  var idx = 0;
  var list;

  if (len < 0 || isNaN(len)) {
    throw new RangeError('n must be a non-negative number');
  }
  list = new Array(len);
  while (idx < len) {
    list[idx] = fn(idx);
    idx += 1;
  }
  return list;
});

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Set = __webpack_require__(221);
var _curry2 = __webpack_require__(0);

/**
 * Returns a new list containing only one copy of each element in the original
 * list, based upon the value returned by applying the supplied function to
 * each list element. Prefers the first item if the supplied function produces
 * the same value on two items. `R.equals` is used for comparison.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> b) -> [a] -> [a]
 * @param {Function} fn A function used to produce a value to use during comparisons.
 * @param {Array} list The array to consider.
 * @return {Array} The list of unique items.
 * @example
 *
 *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
 */
module.exports = _curry2(function uniqBy(fn, list) {
  var set = new _Set();
  var result = [];
  var idx = 0;
  var appliedItem, item;

  while (idx < list.length) {
    item = list[idx];
    appliedItem = fn(item);
    if (set.add(appliedItem)) {
      result.push(item);
    }
    idx += 1;
  }
  return result;
});

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var adjust = __webpack_require__(73);
var always = __webpack_require__(24);

/**
 * Returns a new copy of the array with the element at the provided index
 * replaced with the given value.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} idx The index to update.
 * @param {*} x The value to exist at the given index of the returned array.
 * @param {Array|Arguments} list The source array-like object to be updated.
 * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.
 * @see R.adjust
 * @example
 *
 *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]
 *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]
 * @symb R.update(-1, a, [b, c]) = [b, a]
 * @symb R.update(0, a, [b, c]) = [a, c]
 * @symb R.update(1, a, [b, c]) = [b, a]
 */
module.exports = _curry3(function update(idx, x, list) {
  return adjust(always(x), idx, list);
});

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var curryN = __webpack_require__(5);

/**
 * Accepts a function `fn` and a list of transformer functions and returns a
 * new curried function. When the new function is invoked, it calls the
 * function `fn` with parameters consisting of the result of calling each
 * supplied handler on successive arguments to the new function.
 *
 * If more arguments are passed to the returned function than transformer
 * functions, those arguments are passed directly to `fn` as additional
 * parameters. If you expect additional arguments that don't need to be
 * transformed, although you can ignore them, it's best to pass an identity
 * function so that the new function reports the correct arity.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
 * @param {Function} fn The function to wrap.
 * @param {Array} transformers A list of transformer functions
 * @return {Function} The wrapped function.
 * @see R.converge
 * @example
 *
 *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
 *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
 *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
 *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
 * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))
 */
module.exports = _curry2(function useWith(fn, transformers) {
  return curryN(transformers.length, function () {
    var args = [];
    var idx = 0;
    while (idx < transformers.length) {
      args.push(transformers[idx].call(this, arguments[idx]));
      idx += 1;
    }
    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
  });
});

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var keys = __webpack_require__(13);

/**
 * Returns a list of all the enumerable own properties of the supplied object.
 * Note that the order of the output array is not guaranteed across different
 * JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own properties.
 * @example
 *
 *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
 */
module.exports = _curry1(function values(obj) {
  var props = keys(obj);
  var len = props.length;
  var vals = [];
  var idx = 0;
  while (idx < len) {
    vals[idx] = obj[props[idx]];
    idx += 1;
  }
  return vals;
});

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _has = __webpack_require__(6);

/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec. Each of the spec's own properties must be a predicate function.
 * Each predicate is applied to the value of the corresponding property of the
 * test object. `where` returns true if all the predicates return true, false
 * otherwise.
 *
 * `where` is well suited to declaratively expressing constraints for other
 * functions such as `filter` and `find`.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Object
 * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @example
 *
 *      // pred :: Object -> Boolean
 *      var pred = R.where({
 *        a: R.equals('foo'),
 *        b: R.complement(R.equals('bar')),
 *        x: R.gt(__, 10),
 *        y: R.lt(__, 20)
 *      });
 *
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true
 *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false
 *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false
 */
module.exports = _curry2(function where(spec, testObj) {
  for (var prop in spec) {
    if (_has(prop, spec) && !spec[prop](testObj[prop])) {
      return false;
    }
  }
  return true;
});

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

module.exports = Readable;

/*<replacement>*/
var processNextTick = __webpack_require__(52);
/*</replacement>*/

/*<replacement>*/
var isArray = __webpack_require__(71);
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(70).EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(133);
/*</replacement>*/

var Buffer = __webpack_require__(9).Buffer;
/*<replacement>*/
var bufferShim = __webpack_require__(51);
/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(27);
util.inherits = __webpack_require__(19);
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(375);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(359);
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(26);

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(72).StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(26);

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = bufferShim.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(72).StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = bufferShim.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20)))

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(26);

/*<replacement>*/
var util = __webpack_require__(27);
util.inherits = __webpack_require__(19);
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



module.exports = Writable;

/*<replacement>*/
var processNextTick = __webpack_require__(52);
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(27);
util.inherits = __webpack_require__(19);
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(368)
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(133);
/*</replacement>*/

var Buffer = __webpack_require__(9).Buffer;
/*<replacement>*/
var bufferShim = __webpack_require__(51);
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(26);

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(26);

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = Buffer.isBuffer(chunk);

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = bufferShim.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    chunk = decodeChunk(state, chunk, encoding);
    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20), __webpack_require__(364).setImmediate))

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(70).EventEmitter;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports = module.exports = __webpack_require__(130);
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(132);
exports.Duplex = __webpack_require__(26);
exports.Transform = __webpack_require__(131);
exports.PassThrough = __webpack_require__(358);

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var ClientRequest = __webpack_require__(361);
var extend = __webpack_require__(371);
var statusCodes = __webpack_require__(153);
var url = __webpack_require__(137);

var http = exports;

http.request = function (opts, cb) {
	if (typeof opts === 'string') opts = url.parse(opts);else opts = extend(opts);

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

	var protocol = opts.protocol || defaultProtocol;
	var host = opts.hostname || opts.host;
	var port = opts.port;
	var path = opts.path || '/';

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1) host = '[' + host + ']';

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;
	opts.method = (opts.method || 'GET').toUpperCase();
	opts.headers = opts.headers || {};

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts);
	if (cb) req.on('response', cb);
	return req;
};

http.get = function get(opts, cb) {
	var req = http.request(opts, cb);
	req.end();
	return req;
};

http.Agent = function () {};
http.Agent.defaultMaxSockets = 4;

http.STATUS_CODES = statusCodes;

http.METHODS = ['CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REPORT', 'SEARCH', 'SUBSCRIBE', 'TRACE', 'UNLOCK', 'UNSUBSCRIBE'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);

exports.blobConstructor = false;
try {
	new Blob([new ArrayBuffer(1)]);
	exports.blobConstructor = true;
} catch (e) {}

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr;
function getXHR() {
	// Cache the xhr value
	if (xhr !== undefined) return xhr;

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest();
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com');
		} catch (e) {
			xhr = null;
		}
	} else {
		// Service workers don't have XHR
		xhr = null;
	}
	return xhr;
}

function checkTypeSupport(type) {
	var xhr = getXHR();
	if (!xhr) return false;
	try {
		xhr.responseType = type;
		return xhr.responseType === type;
	} catch (e) {}
	return false;
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice);

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || haveArrayBuffer && checkTypeSupport('arraybuffer');

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream');
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer && checkTypeSupport('moz-chunked-arraybuffer');

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);

exports.vbArray = isFunction(global.VBArray);

function isFunction(value) {
	return typeof value === 'function';
}

xhr = null; // Help gc
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(161);
var util = __webpack_require__(367);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,


// Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,


// RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],


// RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),


// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),

// Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,

// protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},

// protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},

// protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
},
    querystring = __webpack_require__(53);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }

  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || query && '?' + query || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// features
// - works with existing Reveal presentations
// - sends to endpoint or back to Reveal and presentation
// - defined actor or anonymous sent back to Reveal and presentation
// - records statements automatically through navigation
//
const userconfig = Reveal.getConfig().xapi;

const defaults = {
  lrs: {
    endpoint: "https://cloud.scorm.com/tc/public/",
    actor: { "mbox": "mailto:love2learn@example.com", "name": "OS 4 Learning" },
    authUser: "<User>",
    authPassword: "<Password>",
    allowFail: false
  },
  lang_ISO: 'en',
  local_ISO: 'US'
};

const plugin = function () {
  return __webpack_require__(140).default(Reveal, Object.assign(defaults, userconfig, { lrs: _extends({}, defaults.lrs, userconfig.lrs) }));
}();

module.exports = plugin;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = [{
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "https://w3id.org/xapi/cmi5",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "prefLabel": {
    "en": "cmi5 Profile"
  },
  "definition": {
    "en": "This specification describes interoperable runtime communication between Learning Management Systems (LMS) and Assignable Units (AU).\n\nThe runtime communication and behavior of all parts of the system are carefully described in the full specification, which can be found at https://github.com/AICC/CMI-5_Spec_Current/blob/quartz/cmi5_spec.md . This is a structured representation of cmi5 concepts, statement structure, and statement communications patterns that the additional rules in the full specification build upon and provide the definitive interpretation of."
  },
  "seeAlso": "https://github.com/AICC/CMI-5_Spec_Current/blob/quartz/cmi5_spec.md",
  "versions": [{
    "id": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "generatedAtTime": "2017-03-27T12:30:00-07:00"
  }],
  "author": {
    "type": "Organization",
    "name": "cmi5 Working Group"
  },
  "concepts": [{
    "@id": "https://w3id.org/xapi/adl/verbs/abandoned",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "@type": "Verb",
    "definition": {
      "en": "Indicates that the AU session was abnormally terminated by a learner's action (or due to a system failure)."
    },
    "prefLabel": {
      "en": "abandoned"
    }
  }, {
    "@id": "https://w3id.org/xapi/adl/verbs/satisfied",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "@type": "Verb",
    "definition": {
      "en": "Indicates that the authority or activity provider determined the actor has fulfilled the criteria of the object or activity."
    },
    "prefLabel": {
      "en": "satisfied"
    }
  }, {
    "@id": "https://w3id.org/xapi/adl/verbs/waived",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "@type": "Verb",
    "definition": {
      "en": "Indicates that the learning activity requirements were met by means other than completing the activity. A waived statement is used to indicate that the activity may be skipped by the actor."
    },
    "prefLabel": {
      "en": "waived"
    }
  }, {
    "@id": "https://w3id.org/xapi/cmi5/activities/block",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "@type": "ActivityType",
    "definition": {
      "en": "A block represents a number of Assignable Units of which progress (completion/success) is rolled up to.  In cmi5 it is every level above the AU and below the Course."
    },
    "prefLabel": {
      "en": "block"
    }
  }, {
    "@id": "https://w3id.org/xapi/cmi5/activities/course",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "@type": "ActivityType",
    "exactMatch": ["http://adlnet.gov/expapi/activities/course"],
    "definition": {
      "en": "A course represents an amount of content that is published and registered for with the purpose of gaining completion.  It is represented with a Course Structure Format in cmi5 as the highest level of content (above Block and AU)."
    },
    "prefLabel": {
      "en": "course"
    }
  }, {
    "id": "https://w3id.org/xapi/cmi5/result/extensions/progress",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "type": "ResultExtension",
    "prefLabel": {
      "en": "progress"
    },
    "definition": {
      "en": "An integer value between 0 and 100 (inclusive) indicating the completion of the AU as a percentage.\n\nThe AU may set this value in statements to indicate level of completion. The AU SHOULD NOT set a progress value in a Completed statement or if it has previously issued a Completed statement for the AU in the current registration."
    },
    "inlineSchema": "{ \"type\": \"number\", \"maximum\": 100, \"minimum\": 0, \"multipleOf\": 1.0 }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/result/extensions/reason",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "type": "ResultExtension",
    "prefLabel": {
      "en": "reason"
    },
    "definition": {
      "en": "Indicates the reason why an AU was 'waived' (marked complete by an alternative means)"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/sessionid",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "type": "ContextExtension",
    "exactMatch": ["id", "https://w3id.org/xapi/video/extensions/session-id"],
    "prefLabel": {
      "en": "session ID"
    },
    "definition": {
      "en": "A unique identifier for a single AU launch session based on actor and course registration."
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/masteryscore",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "mastery score"
    },
    "definition": {
      "en": "'masteryScore' as provided in the LMS Launch Data for the AU plus registration used to determine the pass/fail result based on score"
    },
    "inlineSchema": "{ \"type\": \"number\",  \"maximum\": 1, \"minimum\": 0 }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/launchmode",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "launch mode"
    },
    "definition": {
      "en": "Indicates what launch mode an AU was launched with by the LMS"
    },
    "inlineSchema": "{ \"enum\": [\"Normal\", \"Browse\", \"Review\"] }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/launchurl",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "launch URL"
    },
    "definition": {
      "en": "The URL used by the LMS to launch the AU"
    },
    "inlineSchema": "{ \"type\": \"string\", \"format\": \"uri\" }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/launchparameters",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "launch parameters"
    },
    "definition": {
      "en": "'launchParameters' as provided in the LMS Launch Data for the AU plus registration"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/moveon",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "move on"
    },
    "definition": {
      "en": "'moveOn' as provided in the LMS Launch Data for the AU plus registration"
    },
    "inlineSchema": "{ \"enum\": [\"Passed\", \"Completed\", \"CompletedAndPassed\", \"CompletedOrPassed\", \"NotApplicable\"] }"
  }],
  "templates": [{
    "id": "https://w3id.org/xapi/cmi5#generalrestrictions",
    "type": "StatementTemplate",
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "prefLabel": {
      "en": "Restrictions for all cmi5-defined Statements"
    },
    "rules": [{
      "location": "$.id",
      "presence": "included"
    }, {
      "location": "$.timestamp",
      "presence": "included"
    }, {
      "location": "$.context.contextActivities.grouping[*]",
      "presence": "included",
      "scopeNote": "An Activity object with an 'id' property whose value is the unaltered value of the AU's id attribute from the course structure (See Section 13.1.4 AU Metadata – id) MUST be included in the 'grouping' context activities."
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/cmi5/context/extensions/sessionid']",
      "presence": "included"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#launched",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Launched"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "verb": "http://adlnet.gov/expapi/verbs/launched",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "none": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/cmi5/context/extensions/launchmode']",
      "presence": "included",
      "all": ["Normal", "Browse", "Review"]
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/cmi5/context/extensions/launchurl']",
      "presence": "included",
      "scopeNote": "The LMS MUST put a fully qualified URL equivalent to the one that the LMS used to launch the AU without the name/value pairs included as defined in section 8.1 in the context extensions of the 'Launched' statement."
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/cmi5/context/extensions/moveon']",
      "presence": "included",
      "all": ["Passed", "Completed", "CompletedAndPassed", "CompletedOrPassed", "NotApplicable"]
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/cmi5/context/extensions/launchparameters']",
      "presence": "included"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#initialized",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Initialized"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "verb": "http://adlnet.gov/expapi/verbs/initialized",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "none": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completed",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Completed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "verb": "http://adlnet.gov/expapi/verbs/completed",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "included",
      "all": [true]
    }, {
      "location": "$.result.duration",
      "presence": "included",
      "scopeNote": "The AU SHOULD calculate duration as the time spent by the learner to achieve completion status."
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "presence": "included",
      "any": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#passed",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Passed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "verb": "http://adlnet.gov/expapi/verbs/passed",
    "rules": [{
      "location": "$.result.score",
      "presence": "recommended"
    }, {
      "location": "$.result.success",
      "presence": "included",
      "all": [true]
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.result.duration",
      "presence": "included",
      "scopeNote": "The AU SHOULD calculate duration as the time spent by the learner to attempt and succeed in a judged activity of the AU."
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "presence": "included",
      "any": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#failed",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Failed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "verb": "http://adlnet.gov/expapi/verbs/failed",
    "rules": [{
      "location": "$.result.score",
      "presence": "recommended"
    }, {
      "location": "$.result.success",
      "presence": "included",
      "all": [false]
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.result.duration",
      "presence": "included",
      "scopeNote": "The AU SHOULD calculate duration as the time spent by the learner to attempt and fail in a judged activity of the AU."
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "presence": "included",
      "any": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#abandoned",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Abandoned"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "verb": "https://w3id.org/xapi/adl/verbs/abandoned",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.result.duration",
      "presence": "included",
      "scopeNote": "The duration property MUST, at a minimum, be set as the total session time, calculated as the time between the 'Launched' statement and the last statement (of any kind) issued by the AU. The LMS SHOULD also use other (LMS specific) methods (if available) to determine if the total session time was longer."
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "none": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#waived",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Waived"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "verb": "http://adlnet.gov/expapi/verbs/waived",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "included",
      "all": [true]
    }, {
      "location": "$.result.completion",
      "presence": "included",
      "all": [true]
    }, {
      "location": "$.result['https://w3id.org/xapi/cmi5/result/extensions/reason']",
      "presence": "included"
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "presence": "included",
      "any": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#terminated",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Terminated"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "verb": "http://adlnet.gov/expapi/verbs/terminated",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.result.duration",
      "presence": "included",
      "scopeNote": "The AU SHOULD calculate duration for Terminated statements as the time difference between the 'Initialized' statement and the 'Terminated' statement. The AU may use other methods to calculate the duration based on criteria determined by the AU."
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "none": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#satisfied",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Satisfied"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "verb": "http://adlnet.gov/expapi/verbs/satisfied",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "none": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }, {
      "location": "$.object.definition.type",
      "presence": "included",
      "any": ["https://w3id.org/xapi/cmi5/activitytype/block", "https://w3id.org/xapi/cmi5/activitytype/course"]
    }]
  }],
  "patterns": [{
    "id": "https://w3id.org/xapi/cmi5#satisfieds",
    "type": "Pattern",
    "prefLabel": {
      "en": "Satisfieds"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "zeroOrMore": "https://w3id.org/xapi/cmi5#satisfied"
  }, {
    "id": "https://w3id.org/xapi/cmi5#waivedsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Waived Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#waived", "https://w3id.org/xapi/cmi5#satisfieds"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#noresultsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "No Result Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completionnosuccesssession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completion No Success Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#completed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#passedsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completed And Maybe Failed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#passed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completionpassedsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completed And Passed Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#completedandpassed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#failedsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Failed Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#failed", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completionmaybefailedsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completion Maybe Failed Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#completedandmaybefailed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#terminatedorabandoned",
    "type": "Pattern",
    "prefLabel": {
      "en": "Terminated Or Abandoned"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "alternates": ["https://w3id.org/xapi/cmi5#terminated", "https://w3id.org/xapi/cmi5#abandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completedandpassed",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completed And Passed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "alternates": ["https://w3id.org/xapi/cmi5#completedthenpassed", "https://w3id.org/xapi/cmi5#passedthencompleted"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completedthenpassed",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completed Then Passed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#completed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#passed"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#passedthencompleted",
    "type": "Pattern",
    "prefLabel": {
      "en": "Passed Then Completed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#passed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#completed"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completedandmaybefailed",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completed And Maybe Failed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "alternates": ["https://w3id.org/xapi/cmi5#maybecompletedthenfailed", "https://w3id.org/xapi/cmi5#failedthenmaybecompleted"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#maybecompletedthenfailed",
    "type": "Pattern",
    "prefLabel": {
      "en": "Maybe Completed Then Failed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#maybecompleted", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#failed"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#failedthenmaybecompleted",
    "type": "Pattern",
    "prefLabel": {
      "en": "Failed Then Maybe Completed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#failed", "https://w3id.org/xapi/cmi5#maybecompleted"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#maybecompleted",
    "type": "Pattern",
    "prefLabel": {
      "en": "Maybe Completed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "optional": "https://w3id.org/xapi/cmi5#completed"
  }, {
    "id": "https://w3id.org/xapi/cmi5#typicalsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Typical Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "alternates": ["https://w3id.org/xapi/cmi5#completionmaybefailedsession", "https://w3id.org/xapi/cmi5#completionpassedsession", "https://w3id.org/xapi/cmi5#failedsession", "https://w3id.org/xapi/cmi5#noresultsession", "https://w3id.org/xapi/cmi5#passedsession", "https://w3id.org/xapi/cmi5#completionnosuccesssession", "https://w3id.org/xapi/cmi5#waivedsession"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#typicalsessions",
    "type": "Pattern",
    "prefLabel": {
      "en": "Typical Sessions"
    },
    "definition": {
      "en": "This pattern provides an option to use zero or more of the alernates for the Typical Session pattern."
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "zeroOrMore": "https://w3id.org/xapi/cmi5#typicalsession"
  }, {
    "id": "https://w3id.org/xapi/cmi5#toplevel",
    "type": "Pattern",
    "primary": true,
    "prefLabel": {
      "en": "General Pattern"
    },
    "definition": {
      "en": "This pattern describes the sequence of statements sent over the an entire course registration."
    },
    "inScheme": "https://w3id.org/xapi/cmi5/context/categories/cmi5",
    "sequence": ["https://w3id.org/xapi/cmi5#satisfieds", "typicalsessions"]
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "http://activitystrea.ms/schema/",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "prefLabel": {
    "en": "Activity Streams Vocabulary"
  },
  "definition": {
    "en": "An list of concepts from an obsolete version (1.0) of the Activity Streams specification."
  },
  "versions": [{
    "id": "http://activitystrea.ms/schema/1.0.0",
    "generatedAtTime": "2017-07-14T11:35:00Z"
  }],
  "seeAlso": "http://activitystrea.ms/specs/json/1.0/",
  "author": {
    "type": "Organization",
    "name": "Activity Streams Working Group"
  },
  "concepts": [{
    "id": "http://activitystrea.ms/accept",
    "prefLabel": {
      "en": "accepted"
    },
    "definition": {
      "en": "Indicates that that the actor has accepted the object. For instance, a person accepting an award, or accepting an assignment."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/access",
    "prefLabel": {
      "en": "accessed"
    },
    "definition": {
      "en": "Indicates that the actor has accessed the object. For instance, a person accessing a room, or accessing a file."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb",
    "relatedMatch": ["https://w3id.org/xapi/seriousgames/verbs/accessed"]
  }, {
    "id": "http://activitystrea.ms/acknowledge",
    "prefLabel": {
      "en": "acknowledged"
    },
    "definition": {
      "en": "Indicates that the actor has acknowledged the object. This effectively signals that the actor is aware of the objects existence."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/add",
    "prefLabel": {
      "en": "added"
    },
    "definition": {
      "en": "Indicates that the actor has added the object to the target. For instance, adding a photo to an album."
    },
    "exactMatch": ["https://brindlewaye.com/xAPITerms/verbs/added/"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/agree",
    "prefLabel": {
      "en": "agreed"
    },
    "definition": {
      "en": "Indicates that the actor agrees with the object. For example, a person agreeing with an argument, or expressing agreement with a particular issue."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/append",
    "prefLabel": {
      "en": "appended"
    },
    "definition": {
      "en": "Indicates that the actor has appended the object to the target. For instance, a person appending a new record to a database."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/approve",
    "prefLabel": {
      "en": "approved"
    },
    "definition": {
      "en": "Indicates that the actor has approved the object. For instance, a manager might approve a travel request."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/archive",
    "prefLabel": {
      "en": "archived"
    },
    "definition": {
      "en": "Indicates that the actor has archived the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/assign",
    "prefLabel": {
      "en": "assigned"
    },
    "definition": {
      "en": "Indicates that the actor has assigned the object to the target."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/attach",
    "prefLabel": {
      "en": "attached"
    },
    "definition": {
      "en": "Indicates that the actor has attached the object to the target. For instance, a person attaching a file to a wiki page or an email."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/attend",
    "prefLabel": {
      "en": "attended"
    },
    "definition": {
      "en": "Indicates that the actor has attended the object. For instance, a person attending a meeting."
    },
    "exactMatch": ["http://adlnet.gov/expapi/verbs/attended"],
    "relatedMatch": ["http://adlnet.gov/expapi/verbs/attended"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/author",
    "prefLabel": {
      "en": "authored"
    },
    "definition": {
      "en": "Indicates that the actor has authored the object. Note that this is a more specific form of the verb create."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/authorize",
    "prefLabel": {
      "en": "authorized"
    },
    "definition": {
      "en": "Indicates that the actor has authorized the object. If a target is specified, it means that the authorization is specifically in regards to the target. For instance, a service can authorize a person to access a given application; in which case the actor is the service, the object is the person, and the target is the application. In contrast, a person can authorize a request; in which case the actor is the person and the object is the request and there might be no explicit target."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/borrow",
    "prefLabel": {
      "en": "borrowed"
    },
    "definition": {
      "en": "Indicates that the actor has borrowed the object. If a target is specified, it identifies the entity from which the object was borrowed. For instance, if a person borrows a book from a library, the person is the actor, the book is the object and the library is the target."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/build",
    "prefLabel": {
      "en": "built"
    },
    "definition": {
      "en": "Indicates that the actor has built the object. For example, if a person builds a model or compiles code."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/cancel",
    "prefLabel": {
      "en": "canceled"
    },
    "definition": {
      "en": "Indicates that the actor has canceled the object. For instance, canceling a calendar event."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/checkin",
    "prefLabel": {
      "en": "checkedin"
    },
    "definition": {
      "en": "Indicates that the actor has checked-in to the object. For instance, a person checking-in to a place."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/close",
    "prefLabel": {
      "en": "closed"
    },
    "definition": {
      "en": "Indicates that the actor has closed the object. For instance, the object could represent a ticket being tracked in an issue management system."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/complete",
    "prefLabel": {
      "en": "completed"
    },
    "definition": {
      "en": "Indicates that the actor has completed the object."
    },
    "exactMatch": ["http://adlnet.gov/expapi/verbs/completed"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/confirm",
    "prefLabel": {
      "en": "confirmed"
    },
    "definition": {
      "en": "Indicates that the actor has confirmed or agrees with the object. For instance, a software developer might confirm an issue reported against a product."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/consume",
    "prefLabel": {
      "en": "consumed"
    },
    "narrower": ["http://activitystrea.ms/play"],
    "definition": {
      "en": "Indicates that the actor has consumed the object. The specific meaning is dependent largely on the objects type. For instance, an actor may consume an audio object, indicating that the actor has listened to it; or an actor may consume a book, indicating that the book has been read. As such, the consume verb is a more generic form of other more specific verbs such as read and play."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/create",
    "prefLabel": {
      "en": "created"
    },
    "definition": {
      "en": "Indicates that the actor has created the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/delete",
    "prefLabel": {
      "en": "deleted"
    },
    "definition": {
      "en": "Indicates that the actor has deleted the object. This implies, but does not require, the permanent destruction of the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/deliver",
    "prefLabel": {
      "en": "delivered"
    },
    "definition": {
      "en": "Indicates that the actor has delivered the object. For example, delivering a package."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/deny",
    "prefLabel": {
      "en": "denied"
    },
    "definition": {
      "en": "Indicates that the actor has denied the object. For example, a manager may deny a travel request."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/disagree",
    "prefLabel": {
      "en": "disagreed"
    },
    "definition": {
      "en": "Indicates that the actor disagrees with the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/dislike",
    "prefLabel": {
      "en": "disliked"
    },
    "relatedMatch": ["https://w3id.org/xapi/acrossx/verbs/disliked"],
    "definition": {
      "en": "Indicates that the actor dislikes the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/experience",
    "prefLabel": {
      "en": "experienced"
    },
    "definition": {
      "en": "Indicates that the actor has experienced the object in some manner. Note that, depending on the specific object types used for both the actor and object, the meaning of this verb can overlap that of the consume and play verbs. For instance, a person might experience a movie; or play the movie; or consume the movie. The experience verb can be considered a more generic form of other more specific verbs as consume, play, watch, listen, and read."
    },
    "exactMatch": ["http://adlnet.gov/expapi/verbs/experienced"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/favorite",
    "prefLabel": {
      "en": "favorited"
    },
    "definition": {
      "en": "Indicates that the actor marked the object as an item of special interest."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/flag-as-inappropriate",
    "prefLabel": {
      "en": "flagged as inappropriate"
    },
    "definition": {
      "en": "Indicates that the actor has flagged the object as being inappropriate for some reason. When using this verb, the context property, as specified within Section 4.1 can be used to provide additional detail about why the object has been flagged."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/follow",
    "prefLabel": {
      "en": "followed"
    },
    "definition": {
      "en": "Indicates that the actor began following the activity of the object. In most cases, the objectType will be a person, but it can potentially be of any type that can sensibly generate activity. Processors MAY ignore (silently drop) successive identical follow activities."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/find",
    "prefLabel": {
      "en": "found"
    },
    "definition": {
      "en": "Indicates that the actor has found the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/give",
    "prefLabel": {
      "en": "gave"
    },
    "definition": {
      "en": "Indicates that the actor is giving an object to the target. Examples include one person giving a badge object to another person. The object identifies the object being given. The target identifies the receiver."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/host",
    "prefLabel": {
      "en": "hosted"
    },
    "definition": {
      "en": "Indicates that the actor is hosting the object. As in hosting an event, or hosting a service."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/ignore",
    "relatedMatch": ["https://w3id.org/xapi/medbiq/verbs/ignored"],
    "prefLabel": {
      "en": "ignored"
    },
    "definition": {
      "en": "Indicates that the actor has ignored the object. For instance, this verb may be used when an actor has ignored a friend request, in which case the object may be the request-friend activity."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/insert",
    "prefLabel": {
      "en": "inserted"
    },
    "definition": {
      "en": "Indicates that the actor has inserted the object into the target."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/install",
    "prefLabel": {
      "en": "installed"
    },
    "definition": {
      "en": "Indicates that the actor has installed the object, as in installing an application."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/interact",
    "relatedMatch": ["http://adlnet.gov/expapi/verbs/interacted"],
    "prefLabel": {
      "en": "interacted"
    },
    "definition": {
      "en": "Indicates that the actor has interacted with the object. For instance, when one person interacts with another."
    },
    "exactMatch": ["http://adlnet.gov/expapi/verbs/interacted"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/invite",
    "prefLabel": {
      "en": "invited"
    },
    "definition": {
      "en": "Indicates that the actor has invited the object, typically a person object, to join or participate in the object described by the target. The target could, for instance, be an event, group or a service."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/join",
    "prefLabel": {
      "en": "joined"
    },
    "definition": {
      "en": "Indicates that the actor has become a member of the object. This specification only defines the meaning of this verb when the object of the Activity has an objectType of group, though implementors need to be prepared to handle other types of objects."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/leave",
    "prefLabel": {
      "en": "left"
    },
    "definition": {
      "en": "Indicates that the actor has left the object. For instance, a Person leaving a Group or checking-out of a Place."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/like",
    "related": ["https://w3id.org/xapi/acrossx/verbs/liked"],
    "prefLabel": {
      "en": "liked"
    },
    "definition": {
      "en": "Indicates that the actor marked the object as an item of special interest. The like verb is considered to be an alias of favorite. The two verb are semantically identical."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/listen",
    "prefLabel": {
      "en": "listened"
    },
    "definition": {
      "en": "Indicates that the actor has listened to the object. This is typically only applicable for objects representing audio content, such as music, an audio-book, or a radio broadcast. The listen verb is a more specific form of the consume, experience and play verbs."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/lose",
    "prefLabel": {
      "en": "lost"
    },
    "definition": {
      "en": "Indicates that the actor has lost the object. For instance, if a person loses a game."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/make-friend",
    "prefLabel": {
      "en": "madefriend"
    },
    "definition": {
      "en": "Indicates the creation of a friendship that is reciprocated by the object. Since this verb implies an activity on the part of its object, processors MUST NOT accept activities with this verb unless they are able to verify through some external means that there is in fact a reciprocated connection. For example, a processor may have received a guarantee from a particular publisher that the publisher will only use this Verb in cases where a reciprocal relationship exists."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/open",
    "prefLabel": {
      "en": "opened"
    },
    "definition": {
      "en": "Indicates that the actor has opened the object. For instance, the object could represent a ticket being tracked in an issue management system."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/play",
    "prefLabel": {
      "en": "played"
    },
    "definition": {
      "en": "Indicates that the actor spent some time enjoying the object. For example, if the object is a video this indicates that the subject watched all or part of the video. The play verb is a more specific form of the consume verb."
    },
    "exactMatch": ["https://w3id.org/xapi/video/verbs/played"],
    "broader": ["http://activitystrea.ms/consume"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/present",
    "prefLabel": {
      "en": "presented"
    },
    "definition": {
      "en": "Indicates that the actor has presented the object. For instance, when a person gives a presentation at a conference."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/purchase",
    "prefLabel": {
      "en": "purchased"
    },
    "definition": {
      "en": "Indicates that the actor has purchased the object. If a target is specified, in indicates the entity from which the object was purchased."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/qualify",
    "prefLabel": {
      "en": "qualified"
    },
    "definition": {
      "en": "Indicates that the actor has qualified for the object. If a target is specified, it indicates the context within which the qualification applies."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/read",
    "exactMatch": ["https://w3id.org/xapi/adb/verbs/read"],
    "prefLabel": {
      "en": "read"
    },
    "definition": {
      "en": "Indicates that the actor has read the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/receive",
    "prefLabel": {
      "en": "received"
    },
    "definition": {
      "en": "Indicates that the actor is receiving an object. Examples include a person receiving a badge object. The object identifies the object being received."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/reject",
    "prefLabel": {
      "en": "rejected"
    },
    "definition": {
      "en": "Indicates that the actor has rejected the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/remove",
    "prefLabel": {
      "en": "removed"
    },
    "definition": {
      "en": "Indicates that the actor has removed the object from the target."
    },
    "exactMatch": ["https://brindlewaye.com/xAPITerms/verbs/removed"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/remove-friend",
    "prefLabel": {
      "en": "removed friend"
    },
    "definition": {
      "en": "Indicates that the actor has removed the object from the collection of friends."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/replace",
    "prefLabel": {
      "en": "replaced"
    },
    "definition": {
      "en": "Indicates that the actor has replaced the target with the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/request",
    "exactMatch": ["http://activitystrea.ms/request"],
    "prefLabel": {
      "en": "requested"
    },
    "definition": {
      "en": "Indicates that the actor has requested the object. If a target is specified, it indicates the entity from which the object is being requested."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/request-friend",
    "prefLabel": {
      "en": "requested friend"
    },
    "definition": {
      "en": "Indicates the creation of a friendship that has not yet been reciprocated by the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/resolve",
    "prefLabel": {
      "en": "resolved"
    },
    "definition": {
      "en": "Indicates that the actor has resolved the object. For instance, the object could represent a ticket being tracked in an issue management system."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/retract",
    "prefLabel": {
      "en": "retracted"
    },
    "definition": {
      "en": "Indicates that the actor has retracted the object. For instance, if an actor wishes to retract a previously published activity, the object would be the previously published activity that is being retracted."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/return",
    "prefLabel": {
      "en": "returned"
    },
    "definition": {
      "en": "Indicates that the actor has returned the object. If a target is specified, it indicates the entity to which the object was returned."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/rsvp-maybe",
    "prefLabel": {
      "en": "rsvp maybe"
    },
    "definition": {
      "en": "The possible RSVP verb indicates that the actor has made a possible RSVP for the object. This specification only defines the meaning of this verb when its object is an event (see Section 3.3), though implementors need to be prepared to handle other object types. The use of this verb is only appropriate when the RSVP was created by an explicit action by the actor. It is not appropriate to use this verb when a user has been added as an attendee by an event organizer or administrator. This verb is included for data conversion with Activity Streams, its not recommended for use in new Tin Can statements."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/rsvp-no",
    "prefLabel": {
      "en": "rsvp no"
    },
    "definition": {
      "en": "The negative RSVP verb indicates that the actor has made a negative RSVP for the object. This specification only defines the meaning of this verb when its object is an event (see Section 3.3), though implementors need to be prepared to handle other object types. The use of this verb is only appropriate when the RSVP was created by an explicit action by the actor. It is not appropriate to use this verb when a user has been added as an attendee by an event organizer or administrator. This verb is included for data conversion with Activity Streams, its not recommended for use in new Tin Can statements."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/rsvp-yes",
    "prefLabel": {
      "en": "rsvp yes"
    },
    "definition": {
      "en": "The positive RSVP verb indicates that the actor has made a positive RSVP for an object. This specification only defines the meaning of this verb when its object is an event (see Section 3.3), though implementors need to be prepared to handle other object types. The use of this verb is only appropriate when the RSVP was created by an explicit action by the actor. It is not appropriate to use this verb when a user has been added as an attendee by an event organizer or administrator. This verb is included for data conversion with Activity Streams, its not recommended for use in new Tin Can statements."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/satisfy",
    "prefLabel": {
      "en": "satisfied"
    },
    "definition": {
      "en": "Indicates that the actor has satisfied the object. If a target is specified, it indicate the context within which the object was satisfied. For instance, if a person satisfies the requirements for a particular challenge: the person is the actor, the requirement is the object, and the challenge is the target."
    },
    "exactMatch": ["https://w3id.org/xapi/adl/verbs/satisfied"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/save",
    "prefLabel": {
      "en": "saved"
    },
    "definition": {
      "en": "Indicates that the actor has called out the object as being of interest primarily to him or herself. Though this action MAY be shared publicly, the implication is that the object has been saved primarily for the actors own benefit rather than to show it to others as would be indicated by the share verb."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/schedule",
    "prefLabel": {
      "en": "scheduled"
    },
    "definition": {
      "en": "Indicates that the actor has scheduled the object. For instance, scheduling a meeting."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/search",
    "exactMatch": ["https://w3id.org/xapi/acrossx/verbs/searched"],
    "prefLabel": {
      "en": "searched"
    },
    "definition": {
      "en": "Indicates that the actor is or has searched for the object. If a target is specified, it indicates the context within which the search is or has been conducted."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/send",
    "prefLabel": {
      "en": "sent"
    },
    "definition": {
      "en": "Indicates that the actor has sent the object. If a target is specified, it indicates the entity to which the object was sent."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/share",
    "prefLabel": {
      "en": "shared"
    },
    "definition": {
      "en": "Indicates that the actor has called out the object to readers. In most cases, the actor did not create the object being shared, but is instead drawing attention to it."
    },
    "exactMatch": ["http://adlnet.gov/expapi/verbs/shared"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/sell",
    "prefLabel": {
      "en": "sold"
    },
    "definition": {
      "en": "Indicates that the actor has sold the object. If a target is specified, it indicates the entity to which the object was sold."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/sponsor",
    "prefLabel": {
      "en": "sponsored"
    },
    "definition": {
      "en": "Indicates that the actor has sponsored the object. If a target is specified, it indicates the context within which the sponsorship is offered. For instance, a company can sponsor an event or an individual can sponsor a project, etc."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/start",
    "prefLabel": {
      "en": "started"
    },
    "definition": {
      "en": "Indicates that the actor has started the object. For instance, when a person starts a project."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/stop-following",
    "prefLabel": {
      "en": "stopped following"
    },
    "definition": {
      "en": "Indicates that the actor has stopped following the object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/submit",
    "prefLabel": {
      "en": "submitted"
    },
    "definition": {
      "en": "Indicates that the actor has submitted the object. If a target is specified, it indicates the entity to which the object was submitted."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/tag",
    "prefLabel": {
      "en": "tagged"
    },
    "definition": {
      "en": "Indicates that the actor has associated the object with the target. For example, if the actor specifies that a particular user appears in a photo. the object is the user and the target is the photo."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/terminate",
    "prefLabel": {
      "en": "terminated"
    },
    "definition": {
      "en": "Indicates that the actor successfully ended an activity."
    },
    "exactMatch": ["http://adlnet.gov/expapi/verbs/terminated"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/tie",
    "prefLabel": {
      "en": "tied"
    },
    "definition": {
      "en": "Indicates that the actor has neither won or lost the object. This verb is generally only applicable when the object represents some form of competition, such as a game."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/unfavorite",
    "prefLabel": {
      "en": "unfavorited"
    },
    "definition": {
      "en": "Indicates that the actor has removed the object from the collection of favorited items."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/unlike",
    "prefLabel": {
      "en": "unliked"
    },
    "definition": {
      "en": "Indicates that the actor has removed the object from the collection of liked items."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/unsatisfy",
    "prefLabel": {
      "en": "unsatisfied"
    },
    "definition": {
      "en": "Indicates that the actor has not satisfied the object. If a target is specified, it indicates the context within which the object was not satisfied. For instance, if a person fails to satisfy the requirements of some particular challenge, the person is the actor; the requirement is the object and the challenge is the target."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/unsave",
    "prefLabel": {
      "en": "unsaved"
    },
    "definition": {
      "en": "Indicates that the actor has removed the object from the collection of saved items."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/unshare",
    "prefLabel": {
      "en": "unshared"
    },
    "definition": {
      "en": "Indicates that the actor is no longer sharing the object. If a target is specified, it indicates the entity with whom the object is no longer being shared."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/update",
    "prefLabel": {
      "en": "updated"
    },
    "narrowMatch": ["https://w3id.org/xapi/medbiq/verbs/updated"],
    "definition": {
      "en": "Indicates that the actor has updated the object. Note, however, that this vocabulary does not define a mechanism for describing the actual set of modifications made to object."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/use",
    "prefLabel": {
      "en": "used"
    },
    "definition": {
      "en": "Indicates that the actor has used the object in some manner."
    },
    "exactMatch": ["https://w3id.org/xapi/seriousgames/verbs/used"],

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/at",
    "prefLabel": {
      "en": "was at"
    },
    "definition": {
      "en": "Indicates that the actor was located at the object. For instance, a person being at a specific physical location."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/watch",
    "prefLabel": {
      "en": "watched"
    },
    "definition": {
      "en": "Indicates that the actor has watched the object. This verb is typically applicable only when the object represents dynamic, visible content such as a movie, a television show or a public performance. This verb is a more specific form of the verbs experience, play and consume."
    },
    "exactMatch": ["https://w3id.org/xapi/acrossx/verbs/watched", "https://w3id.org/xapi/adb/verbs/watched"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/win",
    "prefLabel": {
      "en": "won"
    },
    "definition": {
      "en": "Indicates that the actor has won the object. This verb is typically applicable only when the object represents some form of competition, such as a game."
    },

    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "Verb"
  }, {
    "id": "http://activitystrea.ms/alert",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents any kind of significant notification."
    },
    "prefLabel": {
      "en": "alert"
    }
  }, {
    "id": "http://activitystrea.ms/application",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents any kind of software application."
    },
    "prefLabel": {
      "en": "application"
    }
  }, {
    "id": "http://activitystrea.ms/article",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "related": ["http://activitystrea.ms/note"],
    "type": "ActivityType",
    "definition": {
      "en": "Represents objects such as news articles, knowledge base entries, or other similar construct. Such objects generally consist of paragraphs of text, in some cases incorporating embedded media such as photos and inline hyperlinks to other resources."
    },
    "prefLabel": {
      "en": "article"
    }
  }, {
    "id": "http://activitystrea.ms/audio",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents audio content of any kind. Objects of this type MAY contain an additional property as specified in Section 3.1."
    },
    "prefLabel": {
      "en": "audio"
    }
  }, {
    "id": "http://activitystrea.ms/badge",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a badge or award granted to an object (typically a person object)."
    },
    "prefLabel": {
      "en": "badge"
    }
  }, {
    "id": "http://activitystrea.ms/binary",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Objects of this type are used to carry arbitrary Base64-encoded binary data within an Activity Stream object. It is primarily intended to attach binary data to other types of objects through the use of the attachments property. Objects of this type will contain the additional properties specified in Section 3.2. This activity type is included for data conversion with Activity Streams, its not recommended for use in new Tin Can statements."
    },
    "prefLabel": {
      "en": "binary"
    }
  }, {
    "id": "http://activitystrea.ms/bookmark",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a pointer to some URL, typically a web page. In most cases, bookmarks are specific to a given user and contain metadata chosen by that user. Bookmark Objects are similar in principle to the concept of bookmarks or favorites in a web browser. A bookmark represents a pointer to the URL, not the URL or the associated resource itself. Objects of this type SHOULD contain an additional targetUrl property whose value is a String containing the IRI of the target of the bookmark."
    },
    "prefLabel": {
      "en": "bookmark"
    }
  }, {
    "id": "http://activitystrea.ms/collection",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a generic collection of objects of any type. This object type can be used, for instance, to represent a collection of files like a folder; a collection of photos like an album; and so forth. Objects of this type MAY contain an additional objectTypes property whose value is an Array of Strings specifying the expected objectType of objects contained within the collection. This activity type is included for data conversion with Activity Streams, its not recommended for use in new Tin Can statements."
    },
    "prefLabel": {
      "en": "collection"
    }
  }, {
    "id": "http://activitystrea.ms/comment",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a textual response to another object. Objects of this type MAY contain an additional inReplyTo property whose value is an Array of one or more other Activity Stream Objects for which the object is to be considered a response."
    },
    "prefLabel": {
      "en": "comment"
    }
  }, {
    "id": "http://activitystrea.ms/device",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a device of any sort."
    },
    "prefLabel": {
      "en": "device"
    }
  }, {
    "id": "http://activitystrea.ms/event",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents an event that occurs at a certain location during a particular period of time. Objects of this type MAY contain the additional properties specified in Section 3.3."
    },
    "prefLabel": {
      "en": "event"
    }
  }, {
    "id": "http://activitystrea.ms/file",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents any form of document or file. Objects of this type MAY contain an additional fileUrl property whose value a dereferenceable IRI that can be used to retrieve the file; and an additional mimeType property whose value is the MIME type of the file described by the object."
    },
    "prefLabel": {
      "en": "file"
    }
  }, {
    "id": "http://activitystrea.ms/game",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a game or competition of any kind."
    },
    "prefLabel": {
      "en": "game"
    }
  }, {
    "id": "http://activitystrea.ms/group",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a grouping of objects in which member objects can join or leave."
    },
    "prefLabel": {
      "en": "group"
    }
  }, {
    "id": "http://activitystrea.ms/image",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a graphical image. Objects of this type MAY contain an additional fullImage property whose value is an Activity Streams Media Link to a full-sized representation of the image."
    },
    "prefLabel": {
      "en": "image"
    }
  }, {
    "id": "http://activitystrea.ms/issue",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a report about a problem or situation that needs to be resolved. For instance, the issue object can be used to represent reports detailing software defects, or reports of acceptable use violations, and so forth. Objects of this type MAY contain the additional properties specified in Section 3.4."
    },
    "prefLabel": {
      "en": "issue"
    }
  }, {
    "id": "http://activitystrea.ms/job",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents information about a job or a job posting."
    },
    "prefLabel": {
      "en": "job"
    }
  }, {
    "id": "http://activitystrea.ms/note",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "related": ["http://activitystrea.ms/article"],
    "exactMatch": ["https://w3id.org/xapi/acrossx/activities/note"],
    "type": "ActivityType",
    "definition": {
      "en": "Represents a short-form text message. This object is intended primarily for use in micro-blogging scenarios and in systems where users are invited to publish short, often plain-text messages whose useful lifespan is generally shorter than that of an article of weblog entry. A note is similar in structure to an article, but typically does not have a title or distinct paragraphs and tends to be much shorter in length."
    },
    "prefLabel": {
      "en": "note"
    }
  }, {
    "id": "http://activitystrea.ms/offer",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents an offer of any kind."
    },
    "prefLabel": {
      "en": "offer"
    }
  }, {
    "id": "http://activitystrea.ms/organization",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents an organization of any kind."
    },
    "prefLabel": {
      "en": "organization"
    }
  }, {
    "id": "http://activitystrea.ms/page",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "narrowMatch": ["https://w3id.org/xapi/acrossx/activities/page"],
    "type": "ActivityType",
    "definition": {
      "en": "Represents an area, typically a web page, that is representative of, and generally managed by a particular entity. Such areas are usually dedicated to displaying descriptive information about the entity and showcasing recent content such as articles, photographs and videos. Most social networking applications, for example, provide individual users with their own dedicated profile pages. Several allow similar types of pages to be created for commercial entities, organizations or events. While the specific details of how pages are implemented, their characteristics and use may vary, the one unifying property is that they are typically owned by a single entity that is represented by the content provided by the page itself."
    },
    "prefLabel": {
      "en": "page"
    }
  }, {
    "id": "http://activitystrea.ms/person",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents an individual person. This activity type is included for data conversion with Activity Streams, its not recommended for use in new Tin Can statements. Agent should be used instead of person."
    },
    "prefLabel": {
      "en": "person"
    }
  }, {
    "id": "http://activitystrea.ms/place",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a physical location. Locations can be represented using geographic coordinates, a physical address, a free-form location name, or any combination of these. Objects of this type MAY contain the additional properties specified in Section 3.5."
    },
    "prefLabel": {
      "en": "place"
    }
  }, {
    "id": "http://activitystrea.ms/process",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents any form of process. For instance, a long-running task that is started and expected to continue operating for a period of time."
    },
    "prefLabel": {
      "en": "process"
    }
  }, {
    "id": "http://activitystrea.ms/product",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a commercial good or service. Objects of this type MAY contain an additional fullImage property whose value is an Activity Streams Media Link to an image resource representative of the product."
    },
    "prefLabel": {
      "en": "product"
    }
  }, {
    "id": "http://activitystrea.ms/question",
    "exactMatch": ["http://adlnet.gov/expapi/activities/question"],
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a question or a poll. Objects of this type MAY contain an additional options property whose value is an Array of possible answers to the question in the form of Activity Stream objects of any type."
    },
    "prefLabel": {
      "en": "question"
    }
  }, {
    "id": "http://activitystrea.ms/review",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a primarily prose-based commentary on another object. Objects of this type MAY contain a rating property as specified in Section 4.4."
    },
    "prefLabel": {
      "en": "review"
    }
  }, {
    "id": "http://activitystrea.ms/service",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents any form of hosted or consumable service that performs some kind of work or benefit for other entities. Examples of such objects include websites, businesses, etc."
    },
    "prefLabel": {
      "en": "service"
    }
  }, {
    "id": "http://activitystrea.ms/task",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Represents an activity that has yet to be completed. Objects of this type can contain additional properties as specified in Section 3.6."
    },
    "prefLabel": {
      "en": "task"
    }
  }, {
    "id": "http://activitystrea.ms/video",
    "inScheme": "http://activitystrea.ms/schema/1.0.0",
    "exactMatch": ["https://w3id.org/xapi/acrossx/activities/video", "https://w3id.org/xapi/video/activity-type/video"],
    "type": "ActivityType",
    "definition": {
      "en": "Represents video content of any kind. Objects of this type MAY contain additional properties as specified in Section 3.1."
    },
    "prefLabel": {
      "en": "video"
    }
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "https://w3id.org/xapi/adb",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0.0",
  "prefLabel": {
    "en": "Actionable Data Book (ADB) Profile"
  },
  "definition": {
    "en": "The xAPI ABD profile is used to identify interactions between an actor and an eBook activity based on the IEEE ADB project."
  },
  "seeAlso": "https://standards.ieee.org/develop/indconn/adb/",
  "author": {
    "type": "Organization",
    "name": "IEEE Industry Connections"
  },
  "versions": [{
    "id": "https://w3id.org/xapi/adb/v1.1.0",
    "generatedAtTime": "2017-06-30T8:26:00Z",
    "wasRevisionOf": ["https://w3id.org/xapi/adb/v1"]
  }],
  "concepts": [{
    "id": "https://w3id.org/xapi/adb/verbs/annotated",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "definition": {
      "en": "Provide notes or symbols for further explanation or thoughts while reading."
    },
    "narrower": ["https://w3id.org/xapi/adb/verbs/highlighted"],
    "relatedMatch": ["http://risc-inc.com/annotator/verbs/annotated", "https://w3id.org/xapi/acrossx/verbs/annotated"],
    "prefLabel": {
      "en": "annotated"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/arrived",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "broadMatch": ["http://adlnet.gov/expapi/verbs/progressed"],
    "definition": {
      "en": "Indicates the actor arrived a specific location by movement or progress. To arrive a specific scene within a story or book experience."
    },
    "prefLabel": {
      "en": "arrived"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/attended",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "exactMatch": ["http://adlnet.gov/expapi/verbs/attended"],
    "relatedMatch": ["http://adlnet.gov/expapi/verbs/attended"],
    "definition": {
      "en": "Indicates the actor was present at a virtual or physical event or activity. "
    },
    "prefLabel": {
      "en": "attended"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/bookmarked",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "definition": {
      "en": "Persisting the current location (page) where the reader stopped the ebook activity."
    },
    "prefLabel": {
      "en": "bookmarked"
    },
    "related": ["https://w3id.org/xapi/adb/verbs/annotated"]
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/coached",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "definition": {
      "en": "To teach or lead another person through an activity. Coached is a direct response to the Requested verb. The receiver of a Requested statement will periodically respond by sending a Coached statement that clears out the coach's queue."
    },
    "prefLabel": {
      "en": "coached"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/demanded",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "definition": {
      "en": "Indicates a request for eBook session or redirect. Shall be distinct from requested which refers to actor conversations (e.g., requested help fom instructor)."
    },
    "prefLabel": {
      "en": "demanded"
    },
    "related": ["https://w3id.org/xapi/adb/verbs/requested"]
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/described",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "definition": {
      "en": "Detailed answer as a result of an interaction in an ebook activity or assessment."
    },
    "prefLabel": {
      "en": "described"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/highlighted",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "broader": ["https://w3id.org/xapi/adb/verbs/annotated"],
    "prefLabel": {
      "en": "highlighted"
    },
    "definition": {
      "en": "Highlight important areas in an eBook for the purpose of later review or note taking."
    },
    "narrower": ["https://w3id.org/xapi/adb/verbs/noted"]

  }, {
    "id": "https://w3id.org/xapi/adb/verbs/initiated",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "definition": {
      "en": "Used to initiate text code, user preferences or accessibility preferences to a teacher."
    },
    "prefLabel": {
      "en": "initiated"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/noted",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "broader": ["https://w3id.org/xapi/adb/verbs/annotated"],
    "definition": {
      "en": "Add annotation or notes to selected text within an ebook or highlight."
    },
    "prefLabel": {
      "en": "noted"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/read",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "exactMatch": ["http://activitystrea.ms/schema/1.0.0/read"],
    "definition": {
      "en": "Indicates that the actor read the object. This is typically only applicable for objects representing printed or written content, such as a book, a message or a comment."
    },
    "prefLabel": {
      "en": "read"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/referenced",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "definition": {
      "en": "Use dictionary or other resource to look up a selected word. A learner might reference outside information in support of the topic and could reference additional reading for his/her colleagues or mentor."
    },
    "prefLabel": {
      "en": "referenced"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/requested",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "exactMatch": ["http://activitystrea.ms/schema/1.0.0/request"],
    "definition": {
      "en": "Indicates the actor needed or demanded an object or another actor. Requested indicates a comment that is shared with peers as a group or Coach as a trainer. The request for coaching or help prompts users to respond giving them coaching credit."
    },
    "prefLabel": {
      "en": "requested"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/selected",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "definition": {
      "en": "Choose section of text to copy to clipboard."
    },
    "prefLabel": {
      "en": "selected"
    }
  }, {
    "id": "https://w3id.org/xapi/adb/verbs/watched",
    "inScheme": "https://w3id.org/xapi/adb/v1.1.0",
    "type": "Verb",
    "exactMatch": ["http://activitystrea.ms/schema/1.0.0/watch", "https://w3id.org/xapi/acrossx/verbs/watched"],
    "definition": {
      "en": "Indicates that the actor has watched the object. This verb is typically applicable only when the object represents dynamic, visible content such as a movie, a television show or a public performance."
    },
    "prefLabel": {
      "en": "watched"
    }
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "https://w3id.org/xapi/adl",
  "type": "Profile",
  "prefLabel": {
    "en": "ADL Vocabulary"
  },
  "definition": {
    "en": "The ADL vocabulary list includes Verbs and Activity Types used to represent common learning experiences in xAPI."
  },
  "conformsTo": "https://w3id.org/xapi/profiles#1.0.0",
  "versions": [{
    "id": "https://w3id.org/xapi/adl/v1.1.0",
    "generatedAtTime": "2017-08-21T14:25:59.295Z",
    "wasRevisionOf": ["https://w3id.org/xapi/adl/v1"]
  }],
  "author": {
    "type": "Organization",
    "name": "Advanced Distributed Learning(ADL) Initiative"
  },
  "concepts": [{
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/answered",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "answered"
    },
    "definition": {
      "en": "Indicates the actor replied to a question, where the object is generally an activity representing the question. The text of the answer will often be included in the response inside result."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/asked",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "asked"
    },
    "definition": {
      "en": "Indicates an inquiry by an actor with the expectation of a response or answer to a question."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/attempted",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "attempted"
    },
    "definition": {
      "en": "Indicates the actor made an effort to access the object. An attempt statement without additional activities could be considered incomplete in some cases."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/attended",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "attended"
    },
    "relatedMatch": ["https://w3id.org/xapi/adb/verbs/attended", "http://activitystrea.ms/schema/1.0.0/attend"],
    "definition": {
      "en": "Indicates the actor was present at a virtual or physical event or activity."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/commented",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "commented"
    },
    "definition": {
      "en": "Indicates the actor provided digital or written annotations on or about an object."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/exited",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "exited"
    },
    "definition": {
      "en": "Indicates the actor intentionally departed from the activity or object."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/experienced",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "exactMatch": ["http://adlnet.gov/expapi/verbs/experienced"],
    "prefLabel": {
      "en": "experienced"
    },
    "definition": {
      "en": "Indicates the actor only encountered the object, and is applicable in situations where a specific achievement or completion is not required."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/imported",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "imported"
    },
    "definition": {
      "en": "Indicates the actor introduced an object into a physical or virtual location."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/interacted",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "relatedMatch": ["http://activitystrea.ms/schema/1.0/interact"],
    "prefLabel": {
      "en": "interacted"
    },
    "definition": {
      "en": "Indicates the actor engaged with a physical or virtual object."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/launched",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "launched"
    },
    "definition": {
      "en": "Indicates the actor attempted to start an activity."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/mastered",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "mastered"
    },
    "definition": {
      "en": "Indicates the highest level of comprehension or competence the actor performed in an activity."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/preferred",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "preferred"
    },
    "definition": {
      "en": "Indicates the selected choices, favored options or settings of an actor in relation to an object or activity."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/progressed",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "progressed"
    },
    "definition": {
      "en": "Indicates a value of how much of an actor has advanced or moved through an activity."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/registered",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "registered"
    },
    "definition": {
      "en": "Indicates the actor is officially enrolled or inducted in an activity."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/shared",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "exactMatch": ["http://activitystrea.ms/schema/1.0.0/share"],
    "prefLabel": {
      "en": "shared"
    },
    "definition": {
      "en": "Indicates the actor's intent to openly provide access to an object of common interest to other actors or groups."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/voided",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "voided"
    },
    "definition": {
      "en": "A special reserved verb used by a LRS or application to mark a statement as invalid. See the xAPI specification for details on Voided statements."
    }
  }, {
    "type": "Verb",
    "id": "https://w3id.org/xapi/adl/verbs/logged-in",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "definition": {
      "en": "Indicates the actor gained access to a system or service by identifying and authenticating with the credentials provided by the actor."
    },
    "prefLabel": {
      "en": "logged-in"
    }
  }, {
    "type": "Verb",
    "id": "https://w3id.org/xapi/adl/verbs/logged-out",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "definition": {
      "en": "Indicates the actor either lost or discontinued access to a system or service."
    },
    "prefLabel": {
      "en": "logged-out"
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/file",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "file"
    },
    "definition": {
      "en": "A file is similar to a link, only the resource is more likely to be used at a) a different time, b) can be used offline, and/or c) could be used with a different system. Only the expectation changes. Files are not considered learning content or SCOs. If a file is intended for this purpose, it should be re-categorized."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/link",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "link"
    },
    "definition": {
      "en": "A link is simply a means of expressing a link to another resource within, or external to, an activity. A link is not synonymous with launching another resource and should be considered external to the current resource. Links are not learning content, nor SCOs. If a link is intended for this purpose, it should be re-categorized."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/media",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "media"
    },
    "definition": {
      "en": "Media refers to text, audio, or video used to convey information. Media can be consumed (tracked: completed), but doesn’t have an interactive component that may result in a score, success, or failure."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/meeting",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "meeting"
    },
    "definition": {
      "en": "A meeting is a gathering of multiple people for a common cause or interest."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/performance",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "performance"
    },
    "definition": {
      "en": "A performance is an attempted task or series of tasks within a particular context. Tasks would likely take on the form of interactions, or the performance could be self-contained content. It emphasizes students or learners being able to do, or perform, specific skills as a result of the instruction."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/question",
    "exactMatch": ["http://activitystrea.ms/schema/1.0.0/question"],
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "question"
    },
    "definition": {
      "en": "A question is typically part of an assessment and requires a response from the learner, a response that is then evaluated for correctness."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/simulation",
    "inScheme": "https://w3id.org/xapi/adl/v1.1.0",
    "prefLabel": {
      "en": "simulation"
    },
    "definition": {
      "en": "A simulation is an attempted task or series of tasks in an artificial context that mimics reality. Tasks would likely take on the form of interactions, or the simulation could be self-contained content."
    }
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "https://w3id.org/xapi/cmi5",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "prefLabel": {
    "en": "cmi5 Profile"
  },
  "definition": {
    "en": "This specification describes interoperable runtime communication between Learning Management Systems (LMS) and Assignable Units (AU).\n\nThe runtime communication and behavior of all parts of the system are carefully described in the full specification, which can be found at https://github.com/AICC/CMI-5_Spec_Current/blob/quartz/cmi5_spec.md . This is a structured representation of cmi5 concepts, statement structure, and statement communications patterns that the additional rules in the full specification build upon and provide the definitive interpretation of."
  },
  "seeAlso": "https://github.com/AICC/CMI-5_Spec_Current/blob/quartz/cmi5_spec.md",
  "versions": [{
    "id": "https://w3id.org/xapi/cmi5/v1.0.0",
    "generatedAtTime": "2017-03-27T12:30:00-07:00"
  }],
  "author": {
    "type": "Organization",
    "name": "cmi5 Working Group"
  },
  "concepts": [{
    "@id": "https://w3id.org/xapi/adl/verbs/abandoned",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "@type": "Verb",
    "definition": {
      "en": "Indicates that the AU session was abnormally terminated by a learner's action (or due to a system failure)."
    },
    "prefLabel": {
      "en": "abandoned"
    }
  }, {
    "@id": "https://w3id.org/xapi/adl/verbs/abandoned",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "@type": "Verb",
    "definition": {
      "en": "Indicates that the AU session was abnormally terminated by a learner's action (or due to a system failure)."
    },
    "prefLabel": {
      "en": "abandoned"
    }
  }, {
    "@id": "https://w3id.org/xapi/adl/verbs/satisfied",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "@type": "Verb",
    "definition": {
      "en": "Indicates that the authority or activity provider determined the actor has fulfilled the criteria of the object or activity."
    },
    "prefLabel": {
      "en": "satisfied"
    }
  }, {
    "@id": "https://w3id.org/xapi/adl/verbs/waived",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "@type": "Verb",
    "definition": {
      "en": "Indicates that the learning activity requirements were met by means other than completing the activity. A waived statement is used to indicate that the activity may be skipped by the actor."
    },
    "prefLabel": {
      "en": "waived"
    }
  }, {
    "@id": "https://w3id.org/xapi/cmi5/activities/block",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "@type": "ActivityType",
    "definition": {
      "en": "A block represents a number of Assignable Units of which progress (completion/success) is rolled up to.  In cmi5 it is every level above the AU and below the Course."
    },
    "prefLabel": {
      "en": "block"
    }
  }, {
    "@id": "https://w3id.org/xapi/cmi5/activities/course",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "@type": "ActivityType",
    "exactMatch": ["http://adlnet.gov/expapi/activities/course"],
    "definition": {
      "en": "A course represents an amount of content that is published and registered for with the purpose of gaining completion.  It is represented with a Course Structure Format in cmi5 as the highest level of content (above Block and AU)."
    },
    "prefLabel": {
      "en": "course"
    }
  }, {
    "id": "https://w3id.org/xapi/cmi5/result/extensions/progress",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "type": "ResultExtension",
    "prefLabel": {
      "en": "progress"
    },
    "definition": {
      "en": "An integer value between 0 and 100 (inclusive) indicating the completion of the AU as a percentage.\n\nThe AU may set this value in statements to indicate level of completion. The AU SHOULD NOT set a progress value in a Completed statement or if it has previously issued a Completed statement for the AU in the current registration."
    },
    "inlineSchema": "{ \"type\": \"number\", \"maximum\": 100, \"minimum\": 0, \"multipleOf\": 1.0 }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/result/extensions/reason",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "type": "ResultExtension",
    "prefLabel": {
      "en": "reason"
    },
    "definition": {
      "en": "Indicates the reason why an AU was 'waived' (marked complete by an alternative means)"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/sessionid",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "type": "ContextExtension",
    "exactMatch": ["id", "https://w3id.org/xapi/video/extensions/session-id"],
    "prefLabel": {
      "en": "session ID"
    },
    "definition": {
      "en": "A unique identifier for a single AU launch session based on actor and course registration."
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/masteryscore",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "mastery score"
    },
    "definition": {
      "en": "'masteryScore' as provided in the LMS Launch Data for the AU plus registration used to determine the pass/fail result based on score"
    },
    "inlineSchema": "{ \"type\": \"number\",  \"maximum\": 1, \"minimum\": 0 }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/launchmode",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "launch mode"
    },
    "definition": {
      "en": "Indicates what launch mode an AU was launched with by the LMS"
    },
    "inlineSchema": "{ \"enum\": [\"Normal\", \"Browse\", \"Review\"] }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/launchurl",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "launch URL"
    },
    "definition": {
      "en": "The URL used by the LMS to launch the AU"
    },
    "inlineSchema": "{ \"type\": \"string\", \"format\": \"uri\" }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/launchparameters",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "launch parameters"
    },
    "definition": {
      "en": "'launchParameters' as provided in the LMS Launch Data for the AU plus registration"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/cmi5/context/extensions/moveon",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "move on"
    },
    "definition": {
      "en": "'moveOn' as provided in the LMS Launch Data for the AU plus registration"
    },
    "inlineSchema": "{ \"enum\": [\"Passed\", \"Completed\", \"CompletedAndPassed\", \"CompletedOrPassed\", \"NotApplicable\"] }"
  }],
  "templates": [{
    "id": "https://w3id.org/xapi/cmi5#generalrestrictions",
    "type": "StatementTemplate",
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "prefLabel": {
      "en": "Restrictions for all cmi5-defined Statements"
    },
    "rules": [{
      "location": "$.id",
      "presence": "included"
    }, {
      "location": "$.timestamp",
      "presence": "included"
    }, {
      "location": "$.context.contextActivities.grouping[*]",
      "presence": "included",
      "scopeNote": "An Activity object with an 'id' property whose value is the unaltered value of the AU's id attribute from the course structure (See Section 13.1.4 AU Metadata – id) MUST be included in the 'grouping' context activities."
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/cmi5/context/extensions/sessionid']",
      "presence": "included"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#launched",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Launched"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "verb": "http://adlnet.gov/expapi/verbs/launched",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "none": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/cmi5/context/extensions/launchmode']",
      "presence": "included",
      "all": ["Normal", "Browse", "Review"]
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/cmi5/context/extensions/launchurl']",
      "presence": "included",
      "scopeNote": "The LMS MUST put a fully qualified URL equivalent to the one that the LMS used to launch the AU without the name/value pairs included as defined in section 8.1 in the context extensions of the 'Launched' statement."
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/cmi5/context/extensions/moveon']",
      "presence": "included",
      "all": ["Passed", "Completed", "CompletedAndPassed", "CompletedOrPassed", "NotApplicable"]
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/cmi5/context/extensions/launchparameters']",
      "presence": "included"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#initialized",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Initialized"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "verb": "http://adlnet.gov/expapi/verbs/initialized",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "none": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completed",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Completed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "verb": "http://adlnet.gov/expapi/verbs/completed",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "included",
      "all": [true]
    }, {
      "location": "$.result.duration",
      "presence": "included",
      "scopeNote": "The AU SHOULD calculate duration as the time spent by the learner to achieve completion status."
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "presence": "included",
      "any": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#passed",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Passed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "verb": "http://adlnet.gov/expapi/verbs/passed",
    "rules": [{
      "location": "$.result.score",
      "presence": "recommended"
    }, {
      "location": "$.result.success",
      "presence": "included",
      "all": [true]
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.result.duration",
      "presence": "included",
      "scopeNote": "The AU SHOULD calculate duration as the time spent by the learner to attempt and succeed in a judged activity of the AU."
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "presence": "included",
      "any": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#failed",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Failed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "verb": "http://adlnet.gov/expapi/verbs/failed",
    "rules": [{
      "location": "$.result.score",
      "presence": "recommended"
    }, {
      "location": "$.result.success",
      "presence": "included",
      "all": [false]
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.result.duration",
      "presence": "included",
      "scopeNote": "The AU SHOULD calculate duration as the time spent by the learner to attempt and fail in a judged activity of the AU."
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "presence": "included",
      "any": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#abandoned",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Abandoned"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "verb": "https://w3id.org/xapi/adl/verbs/abandoned",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.result.duration",
      "presence": "included",
      "scopeNote": "The duration property MUST, at a minimum, be set as the total session time, calculated as the time between the 'Launched' statement and the last statement (of any kind) issued by the AU. The LMS SHOULD also use other (LMS specific) methods (if available) to determine if the total session time was longer."
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "none": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#waived",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Waived"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "verb": "http://adlnet.gov/expapi/verbs/waived",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "included",
      "all": [true]
    }, {
      "location": "$.result.completion",
      "presence": "included",
      "all": [true]
    }, {
      "location": "$.result['https://w3id.org/xapi/cmi5/result/extensions/reason']",
      "presence": "included"
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "presence": "included",
      "any": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#terminated",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Terminated"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "verb": "http://adlnet.gov/expapi/verbs/terminated",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.result.duration",
      "presence": "included",
      "scopeNote": "The AU SHOULD calculate duration for Terminated statements as the time difference between the 'Initialized' statement and the 'Terminated' statement. The AU may use other methods to calculate the duration based on criteria determined by the AU."
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "none": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }]
  }, {
    "id": "https://w3id.org/xapi/cmi5#satisfied",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "Satisfied"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "verb": "http://adlnet.gov/expapi/verbs/satisfied",
    "rules": [{
      "location": "$.result.score",
      "presence": "excluded"
    }, {
      "location": "$.result.success",
      "presence": "excluded"
    }, {
      "location": "$.result.completion",
      "presence": "excluded"
    }, {
      "location": "$.context.contextActivities.category[*].id",
      "none": "https://w3id.org/xapi/cmi5/context/categories/moveon"
    }, {
      "location": "$.object.definition.type",
      "presence": "included",
      "any": ["https://w3id.org/xapi/cmi5/activitytype/block", "https://w3id.org/xapi/cmi5/activitytype/course"]
    }]
  }],
  "patterns": [{
    "id": "https://w3id.org/xapi/cmi5#satisfieds",
    "type": "Pattern",
    "prefLabel": {
      "en": "Satisfieds"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "zeroOrMore": "https://w3id.org/xapi/cmi5#satisfied"
  }, {
    "id": "https://w3id.org/xapi/cmi5#waivedsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Waived Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#waived", "https://w3id.org/xapi/cmi5#satisfieds"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#noresultsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "No Result Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completionnosuccesssession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completion No Success Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#completed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#passedsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completed And Maybe Failed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#passed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completionpassedsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completed And Passed Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#completedandpassed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#failedsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Failed Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#failed", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completionmaybefailedsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completion Maybe Failed Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#launched", "https://w3id.org/xapi/cmi5#initialized", "https://w3id.org/xapi/cmi5#completedandmaybefailed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#terminatedorabandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#terminatedorabandoned",
    "type": "Pattern",
    "prefLabel": {
      "en": "Terminated Or Abandoned"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "alternates": ["https://w3id.org/xapi/cmi5#terminated", "https://w3id.org/xapi/cmi5#abandoned"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completedandpassed",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completed And Passed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "alternates": ["https://w3id.org/xapi/cmi5#completedthenpassed", "https://w3id.org/xapi/cmi5#passedthencompleted"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completedthenpassed",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completed Then Passed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#completed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#passed"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#passedthencompleted",
    "type": "Pattern",
    "prefLabel": {
      "en": "Passed Then Completed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#passed", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#completed"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#completedandmaybefailed",
    "type": "Pattern",
    "prefLabel": {
      "en": "Completed And Maybe Failed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "alternates": ["https://w3id.org/xapi/cmi5#maybecompletedthenfailed", "https://w3id.org/xapi/cmi5#failedthenmaybecompleted"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#maybecompletedthenfailed",
    "type": "Pattern",
    "prefLabel": {
      "en": "Maybe Completed Then Failed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#maybecompleted", "https://w3id.org/xapi/cmi5#satisfieds", "https://w3id.org/xapi/cmi5#failed"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#failedthenmaybecompleted",
    "type": "Pattern",
    "prefLabel": {
      "en": "Failed Then Maybe Completed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#failed", "https://w3id.org/xapi/cmi5#maybecompleted"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#maybecompleted",
    "type": "Pattern",
    "prefLabel": {
      "en": "Maybe Completed"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "optional": "https://w3id.org/xapi/cmi5#completed"
  }, {
    "id": "https://w3id.org/xapi/cmi5#typicalsession",
    "type": "Pattern",
    "prefLabel": {
      "en": "Typical Session"
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "alternates": ["https://w3id.org/xapi/cmi5#completionmaybefailedsession", "https://w3id.org/xapi/cmi5#completionpassedsession", "https://w3id.org/xapi/cmi5#failedsession", "https://w3id.org/xapi/cmi5#noresultsession", "https://w3id.org/xapi/cmi5#passedsession", "https://w3id.org/xapi/cmi5#completionnosuccesssession", "https://w3id.org/xapi/cmi5#waivedsession"]
  }, {
    "id": "https://w3id.org/xapi/cmi5#typicalsessions",
    "type": "Pattern",
    "prefLabel": {
      "en": "Typical Sessions"
    },
    "definition": {
      "en": "This pattern provides an option to use zero or more of the alernates for the Typical Session pattern."
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "zeroOrMore": "https://w3id.org/xapi/cmi5#typicalsession"
  }, {
    "id": "https://w3id.org/xapi/cmi5#toplevel",
    "type": "Pattern",
    "primary": true,
    "prefLabel": {
      "en": "General Pattern"
    },
    "definition": {
      "en": "This pattern describes the sequence of statements sent over the an entire course registration."
    },
    "inScheme": "https://w3id.org/xapi/cmi5/v1.0.0",
    "sequence": ["https://w3id.org/xapi/cmi5#satisfieds", "typicalsessions"]
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "http://activitystrea.ms/schema/",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "prefLabel": {
    "en": "xAPI Open Badges Profile"
  },
  "definition": {
    "en": "A profile that combines xAPI with Mozilla Open Badges."
  },
  "seeAlso": "https://registry.tincanapi.com/#profile/44",
  "author": {
    "type": "Organization",
    "name": "xAPI Open Badges Community of Practice"
  },
  "versions": [{
    "id": "http://activitystrea.ms/schema/1.0.0/",
    "generatedAtTime": "2017-07-14T11:35:00Z"
  }],
  "concepts": [{
    "id": "http://specification.openbadges.org/xapi/extensions/badgeassertion",
    "inScheme": "http://activitystrea.ms/schema/1.0.0/",
    "type": "ResultExtension",
    "definition": {
      "en": "Result Extension containing an object with an @id property pointing to the IRI of a hosted Open Badge Assertion."
    },
    "prefLabel": {
      "en": "open badge assertion"
    }
  }, {
    "id": "http://specification.openbadges.org/xapi/extensions/badgeclass",
    "inScheme": "http://activitystrea.ms/schema/1.0.0/",
    "type": "ContextExtension",
    "definition": {
      "en": "Activity Definition Extension containing an object with an @id property pointing to the IRI of a hosted Open Badge Class definition."
    },
    "prefLabel": {
      "en": "open badge class"
    }
  }, {
    "id": "http://specification.openbadges.org/xapi/attachment/badge",
    "inScheme": "http://activitystrea.ms/schema/1.0.0/",
    "type": "AttachmentUsageType",
    "definition": {
      "en": "An attached Baked Badge Image. This is a png image containing additional metadata as defined by the Open Badges specification."
    },
    "prefLabel": {
      "en": "open badges baked badge image"
    }
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "http://www.risc-inc.com/annotator",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "prefLabel": {
    "en": "PDF Annotator"
  },
  "definition": {
    "en": "A profile for recording PDF annotations."
  },
  "seeAlso": "http://risc-inc.com/pdf-annotation-cloud-real-world-xapi-application/",
  "author": {
    "type": "Organization",
    "name": "RISC, Inc"
  },
  "versions": [{
    "id": "http://www.risc-inc.com/annotator/1.0.0",
    "generatedAtTime": "2017-07-14T11:35:00Z"
  }],
  "concepts": [{
    "id": "http://www.risc-inc.com/annotator/extensions/color",
    "inScheme": "http://www.risc-inc.com/annotator/1.0.0",
    "type": "ContextExtension",
    "definition": {
      "en": "This extension is used to describe the RGB colour of a PDF annotation highlight, underline of typewriter annotation. The value of this extension is a string, for example #FFCC66. For any use cases outside of PDF annotations, consider the tincan color extension to record the colour of an activity."
    },
    "prefLabel": {
      "en": "pdf annotation highlight colour"
    }
  }, {
    "id": "http://www.risc-inc.com/annotator/extensions/highlightedString",
    "inScheme": "http://www.risc-inc.com/annotator/1.0.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Activity definition extension used with highlight and underline activity types. Stores the string of text that has been highlighted or underlined."
    },
    "prefLabel": {
      "en": "highlighted string"
    }
  }, {
    "id": "http://www.risc-inc.com/annotator/extensions/page",
    "inScheme": "http://www.risc-inc.com/annotator/1.0.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Activity Definition extension used for activities representing entities on a page, for example highlights or notes on an annotated PDF. The value of this extension is an integer that represents the zero-based page index of the document that the activity is on. This document should be listed as the contextActivities parent. Note that the page index is not normally equal to the page number printed on the document."
    },
    "prefLabel": {
      "en": "page index"
    }
  }, {
    "id": "http://www.risc-inc.com/annotator/extensions/rects",
    "inScheme": "http://www.risc-inc.com/annotator/1.0.0",
    "type": "ContextExtension",
    "definition": {
      "en": "A collection of rectangles marking an area within a PDF document. This is used to denote the location of an element on a page such as a highlight or annotation on a PDF document. Multiple rectangles may represent a single element. The value of the extension is an array of rectangle objects. Each rectangle object has x, y, width and height properties. The value of each of these properties is a number measured in PDF Units. The X and Y coordinates are taken from the bottom left of the page. Note that in some implementations, this the value of this extension has been a string containing a JSON encoded array of rectangle objects. This is not recommended, but tools reading statements using this extension may wish to additionally accept this JSON encoded format."
    },
    "prefLabel": {
      "en": "pdf Rectangle map"
    }
  }, {
    "id": "http://risc-inc.com/annotator/activities/highlight",
    "inScheme": "http://www.risc-inc.com/annotator/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "An annotation of the highlight type. Highlights are used to mark strings of text in a document with a color. This activity type should only be used for highlighted text and not for highlighted images or other elements."
    },
    "prefLabel": {
      "en": "highlighted text annotation"
    }
  }, {
    "id": "http://risc-inc.com/annotator/activities/note",
    "inScheme": "http://www.risc-inc.com/annotator/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Indicates an annotation made to a document of the note form. This is a string of text appended to the document at a specified location. Note annotations can be added anywhere on the page. This activity type should not be used for other types of note that are not annotations to a document."
    },
    "prefLabel": {
      "en": "note annotation"
    }
  }, {
    "id": "http://risc-inc.com/annotator/activities/underline",
    "inScheme": "http://www.risc-inc.com/annotator/1.0.0",
    "type": "ActivityType",
    "exactMatch": ["http://risc-inc.com/annotator/activities/underline"],
    "definition": {
      "en": "An annotation of the underline type. Underlines are used to mark strings of text in a document with a line underneath the text. This activity type should only be used for underlined text and not for images or other elements."
    },
    "prefLabel": {
      "en": "underline annotation"
    }
  }, {
    "id": "http://www.risc-inc.com/annotator/activities/freetext",
    "inScheme": "http://www.risc-inc.com/annotator/1.0.0",
    "type": "ActivityType",
    "definition": {
      "en": "Indicates an annotation made to a document of the freetext form. This is a string of text written direction onto the document at a specified location. Freetext annotations can be added anywhere on the page. Unlike note annotations, they have no border or background."
    },
    "prefLabel": {
      "en": "freetext annotation"
    }
  }, {
    "id": "http://risc-inc.com/annotator/verbs/annotated",
    "inScheme": "http://www.risc-inc.com/annotator/1.0.0",
    "relatedMatch": ["https://w3id.org/xapi/adb/verbs/annotated", "https://w3id.org/xapi/acrossx/verbs/annotated"],
    "type": "Verb",
    "definition": {
      "en": "Indicates a new annotation has been added to a document. This verb may be used with PDFs, images, assignment submissions or any other type of document which may be annotated."
    },
    "prefLabel": {
      "en": "annotated"
    }
  }, {
    "id": "http://risc-inc.com/annotator/verbs/modified",
    "inScheme": "http://www.risc-inc.com/annotator/1.0.0",
    "type": "Verb",
    "definition": {
      "en": "This verb is used on annotations created with the annotated verb. It indicates that an existing annotation has been modified, for example editing the text of a note annotation or adjusting the position of a underline or highlight."
    },
    "prefLabel": {
      "en": "modified annotation"
    }
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "https://w3id.org/xapi/scorm",
  "type": "Profile",
  "prefLabel": {
    "en": "SCORM Profile"
  },
  "definition": {
    "en": "The SCORM profile includes Verbs, Activity Types and xAPI Document definitions used to represent SCORM learning experiences in xAPI."
  },
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "seeAlso": "https://adl.gitbooks.io/scorm-profile-xapi/content/",
  "versions": [{
    "id": "https://w3id.org/xapi/scorm/v1.1.0",
    "generatedAtTime": "2017-08-21T14:25:59.295Z",
    "wasRevisionOf": ["https://w3id.org/xapi/scorm/v1"]
  }],
  "author": {
    "type": "Organization",
    "name": "Advanced Distributed Learning(ADL) Initiative"
  },
  "concepts": [{
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/completed",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "exactMatch": ["http://activitystrea.ms/schema/1.0/complete"],
    "prefLabel": {
      "en": "completed"
    },
    "definition": {
      "en": "Indicates the actor finished or concluded the activity normally."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/failed",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "failed"
    },
    "definition": {
      "en": "Indicates the actor did not successfully pass an activity to a level of predetermined satisfaction."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/initialized",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "initialized"
    },
    "definition": {
      "en": "Indicates the activity provider has determined that the actor successfully started an activity."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/passed",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "passed"
    },
    "definition": {
      "en": "Indicates the actor successfully passed an activity to a level of predetermined satisfaction."
    },
    "broader": ["http://adlnet.gov/expapi/verbs/completed"]
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/responded",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "responded"
    },
    "definition": {
      "en": "Indicates an actor reacted or replied to an object."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/resumed",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "resumed"
    },
    "definition": {
      "en": "Indicates the application has determined that the actor continued or reopened a suspended attempt on an activity."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/scored",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "scored"
    },
    "definition": {
      "en": "Indicates a numerical value related to an actor's performance on an activity."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/suspended",
    "exactMatch": ["http://activitystrea.ms/schema/1.0/terminate"],
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "suspended"
    },
    "definition": {
      "en": "Indicates the status of a temporarily halted activity when an actor's intent is returning to the or object activity at a later time."
    }
  }, {
    "type": "Verb",
    "id": "http://adlnet.gov/expapi/verbs/terminated",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "terminated"
    },
    "definition": {
      "en": "Indicates that the actor successfully ended an activity."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/assessment",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "assessment"
    },
    "definition": {
      "en": "An assessment is an activity type that determines a learner’s mastery of a particular subject area. An assessment typically has one or more questions."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/attempt",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "attempt"
    },
    "definition": {
      "en": "An attempt is a discrete set of learner experiences in an activity. This activity gives systems the ability to uniquely identify experiences when they may have happened in different interactions with the same activity."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/course",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "exactMatch": ["https://w3id.org/xapi/cmi5/activities/course"],
    "prefLabel": {
      "en": "course"
    },
    "definition": {
      "en": "A course represents an entire “content package” worth of material. The largest level of granularity. Unless flat, a course consists of multiple modules."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/interaction",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "interaction"
    },
    "definition": {
      "en": "An interaction is typically a part of a larger activity (such as a assessment, game, or simulation) and refers to a control to which a learner provides input. An interaction can be either an asset or function independently."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/lesson",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "lesson"
    },
    "definition": {
      "en": "A lesson is learning content that may or may not take on the form of a SCO (formal, tracked learning). A lesson may stand-alone or may be part of a larger course."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/module",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "module"
    },
    "definition": {
      "en": "A module represents any “content aggregation” at least one level below the course level. Modules of modules can exist for layering purposes. Modules are not content. Modules are one level up from all content."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/objective",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "objective"
    },
    "definition": {
      "en": "An objective determines whether competency has been achieved in a desired area. Objectives typically are associated with questions and assessments. Objectives are not learning content and cannot be SCOs."
    }
  }, {
    "type": "ActivityType",
    "id": "http://adlnet.gov/expapi/activities/profile",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "exactMatch": ["https://w3id.org/xapi/profiles/ontology#Profile"],
    "prefLabel": {
      "en": "profile"
    },
    "definition": {
      "en": "A profile is an activity that defines a set of rules and recommendations for generating xAPI statements for a particular domain. The inclusion of a profile activity in a statement identifies that statement as following the rules outlined in the profile."
    }
  }, {
    "type": "StateResource",
    "id": "https://w3id.org/xapi/scorm/activity-state",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "SCORM Activity State"
    },
    "definition": {
      "en": "Used to store document data associated with the activity and not intended to capture learning experience data in the form of a statement. The SCORM Activity State Object contains a list of Attempt IRIs for the specified Activity."
    },
    "contentType": "application/json",
    "schema": "https://raw.githubusercontent.com/adlnet/xAPI-SCORM-Profile/master/document-schemas/scorm.profile.activity.state.schema.json"
  }, {
    "type": "StateResource",
    "id": "https://w3id.org/xapi/scorm/attempt-state",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "prefLabel": {
      "en": "SCORM Activity Attempt State"
    },
    "definition": {
      "en": "The SCORM Activity Attempt State Object contains the state data for the specified attempt on an Activity. It has the following properties: credit, mode, location, preferences, total_time, and adl_data."
    },
    "contentType": "application/json",
    "schema": "https://raw.githubusercontent.com/adlnet/xAPI-SCORM-Profile/master/document-schemas/scorm.profile.attempt.state.schema.json",
    "context": "https://raw.githubusercontent.com/adlnet/xAPI-SCORM-Profile/master/context/attempt-state-context.jsonld"
  }, {
    "type": "ActivityProfileResource",
    "id": "https://w3id.org/xapi/scorm/activity-profile",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "definition": {
      "en": "Used to store document data associated with the activity and not intended to capture learning experience data in the form of a statement. The SCORM Activity Profile Object contains the profile data for the specified Activity."
    },
    "prefLabel": {
      "en": "SCORM Activity Profile"
    },
    "contentType": "application/json",
    "schema": "https://w3id.org/xapi/scorm/activity-profile/scorm.profile.activity.profile.schema"
  }, {
    "type": "AgentProfileResource",
    "id": "https://w3id.org/xapi/scorm/agent-profile",
    "inScheme": "https://w3id.org/xapi/scorm/v1.1.0",
    "definition": {
      "en": "The SCORM Activity State Object contains the profile data for the specified Agent. The agent profile has three properties: learner_id, learner_name, and preferences. "
    },
    "prefLabel": {
      "en": "SCORM Agent Profile"
    },
    "contentType": "application/json",
    "schema": "https://raw.githubusercontent.com/adlnet/xAPI-SCORM-Profile/master/document-schemas/scorm.profile.agent.profile.schema.json"
  }],
  "templates": [{
    "id": "https://w3id.org/xapi/scorm#generalrestrictions",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "general restrictions on statements"
    },
    "definition": {
      "en": "This is the general template that defines restrictions for all statements conforming to the SCORM profile."
    },
    "rules": [{
      "location": "context.contextActivities.grouping[*].definition.type",
      "any": ["http://adlnet.gov/expapi/activities/attempt"]
    }, {
      "location": "context.contextActivities.grouping[*].definition.type",
      "any": ["http://adlnet.gov/expapi/activities/course"]
    }, {
      "location": "timestamp",
      "presence": "included"
    }]
  }, {
    "id": "https://w3id.org/xapi/scorm#initialization",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "initialization"
    },
    "definition": {
      "en": "The statement template used for when initilizing communication with the LMS."
    },
    "verb": "http://adlnet.gov/expapi/verbs/initialized",
    "objectActivityType": "http://adlnet.gov/expapi/activities/lesson",
    "rules": []
  }, {
    "id": "https://w3id.org/xapi/scorm#termination",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "termination"
    },
    "definition": {
      "en": "The statement template used for when terminating communication with the LMS."
    },
    "verb": "http://adlnet.gov/expapi/verbs/terminated",
    "objectActivityType": "http://adlnet.gov/expapi/activities/lesson",
    "rules": []
  }, {
    "id": "https://w3id.org/xapi/scorm#suspension",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "suspension"
    },
    "definition": {
      "en": "The statement template used for when suspending the attempt on the lesson."
    },
    "verb": "http://adlnet.gov/expapi/verbs/suspended",
    "objectActivityType": "http://adlnet.gov/expapi/activities/lesson",
    "rules": []
  }, {
    "id": "https://w3id.org/xapi/scorm#resumption",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "resumption"
    },
    "definition": {
      "en": "The statement template used for when resuming a suspended attempt."
    },
    "verb": "http://adlnet.gov/expapi/verbs/resumed",
    "objectActivityType": "http://adlnet.gov/expapi/activities/lesson",
    "rules": []
  }, {
    "id": "https://w3id.org/xapi/scorm#scoactivity",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "SCO activity"
    },
    "definition": {
      "en": "The statement template used for any general lesson activity."
    },
    "objectActivityType": "http://adlnet.gov/expapi/activities/lesson",
    "rules": []
  }, {
    "id": "https://w3id.org/xapi/scorm#commenting",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "commenting"
    },
    "definition": {
      "en": "The statement template used for making comments about the lesson."
    },
    "verb": "http://adlnet.gov/expapi/verbs/commented",
    "objectActivityType": "http://adlnet.gov/expapi/activities/lesson",
    "rules": [{
      "location": "result.response",
      "presence": "included"
    }]
  }, {
    "id": "https://w3id.org/xapi/scorm#completing",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "completing"
    },
    "definition": {
      "en": "The statement template used for completing the lesson."
    },
    "verb": "http://adlnet.gov/expapi/verbs/completed",
    "objectActivityType": "http://adlnet.gov/expapi/activities/lesson",
    "rules": []
  }, {
    "id": "https://w3id.org/xapi/scorm#otheractivity",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "other activity"
    },
    "definition": {
      "en": "The statement template used for other types of activities."
    },
    "contextParentActivityType": "http://adlnet.gov/expapi/activities/lesson",
    "rules": []
  }, {
    "id": "https://w3id.org/xapi/scorm#interactionactivity",
    "type": "StatementTemplate",
    "prefLabel": {
      "en": "interaction activity"
    },
    "definition": {
      "en": "The statement template used for cmi interaction activities."
    },
    "verb": "http://adlnet.gov/expapi/verbs/responded",
    "objectActivityType": "http://adlnet.gov/expapi/activities/cmi.interaction",
    "contextParentActivityType": "http://adlnet.gov/expapi/activities/lesson",
    "rules": []
  }],
  "patterns": [{
    "id": "https://w3id.org/xapi/scorm#generalpattern",
    "type": "Pattern",
    "primary": true,
    "prefLabel": {
      "en": "general pattern"
    },
    "definition": {
      "en": "This pattern describes the overall sequence of statements sent over the course of an attempt"
    },
    "sequence": ["https://w3id.org/xapi/scorm#initialization", "https://w3id.org/xapi/scorm#middlestatements", "https://w3id.org/xapi/scorm#optionallycontinue", "https://w3id.org/xapi/scorm#termination"]
  }, {
    "id": "https://w3id.org/xapi/scorm#activitystatements",
    "prefLabel": {
      "en": "activity statements"
    },
    "definition": {
      "en": "This pattern provides all of the alternate options for SCORM activity statements."
    },
    "type": "Pattern",
    "alternates": ["https://w3id.org/xapi/scorm#scoactivity", "https://w3id.org/xapi/scorm#otheractivity", "https://w3id.org/xapi/scorm#commenting", "https://w3id.org/xapi/scorm#interactionactivity", "https://w3id.org/xapi/scorm#completing"]
  }, {
    "id": "https://w3id.org/xapi/scorm#middlestatements",
    "prefLabel": {
      "en": "middle statements"
    },
    "definition": {
      "en": "This pattern provides that zero or more activity statement patterns will be used."
    },
    "type": "Pattern",
    "zeroOrMore": "https://w3id.org/xapi/scorm#activitystatements"
  }, {
    "id": "https://w3id.org/xapi/scorm#suspendresume",
    "prefLabel": {
      "en": "suspend resume"
    },
    "definition": {
      "en": "This pattern provides the sequence used for for suspending and resuming."
    },
    "type": "Pattern",
    "sequence": ["https://w3id.org/xapi/scorm#suspension", "https://w3id.org/xapi/scorm#resumption", "https://w3id.org/xapi/scorm#middlestatements"]
  }, {
    "id": "https://w3id.org/xapi/scorm#optionallycontinue",
    "prefLabel": {
      "en": "optionally continue"
    },
    "definition": {
      "en": "This pattern provies an option for suspending and resuming."
    },
    "type": "Pattern",
    "zeroOrMore": "https://w3id.org/xapi/scorm#suspendresume"
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "https://w3id.org/xapi/seriousgames",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "prefLabel": {
    "en": "Serious Games Profile"
  },
  "definition": {
    "en": "The serous games profile of the xAPI was created to identify and standardize the common interactions that can be tracked in a serious game. This profile was designed as part of the RAGE project."
  },
  "seeAlso": "https://github.com/e-ucm/xapi-seriousgames",
  "author": {
    "type": "Organization",
    "name": "The RAGE project"
  },
  "versions": [{
    "id": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "generatedAtTime": "2017-07-14T10:00:00Z",
    "wasRevisionOf": ["https://w3id.org/xapi/seriousgames/v1"]
  }],
  "concepts": [{
    "id": "https://w3id.org/xapi/seriousgames/activity-types/area",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "An identified area inside the game world. In some games they can also be worlds. Represents an aggregation of zones."
    },
    "prefLabel": {
      "en": "area"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/controller",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A game controller whose input affects the action in an activity. Game controllers are common in non-pc games. This activity represents this device."
    },
    "prefLabel": {
      "en": "controller"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/cutscene",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A non-interactive scene that can be skipped. A cutscene is a non-interactive scene within the game (e.g., a video, a conversation, an automated sequence). The player can usually skip them pressing some button."
    },
    "prefLabel": {
      "en": "cutscene"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/dialog-tree",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "An alternative presented during a conversation with an non-playable character. Dialog trees are a common mechanic in video games, where players can answer questions to NPC. This activity represents that type of alternative."
    },
    "prefLabel": {
      "en": "dialog-tree"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/enemy",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A game object that poses a threat inside the game world. Enemies are common elements in video games. Defeating them indicates a player accomplishment."
    },
    "prefLabel": {
      "en": "enemy"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/item",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A collectable game object whose use or interaction results in an effect in a game. Items are common elements in video games. Players can collect/use/combine them."
    },
    "prefLabel": {
      "en": "item"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/keyboard",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A keyboard whose keystrokes affects the action in an activity. Somes games can receive inputs from keyboards: physical keyboards in a PC, or virtual keyboards in a smartphone screen. This activity represent both."
    },
    "prefLabel": {
      "en": "keyboard"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/level",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "exactMatch": {
      "id": "http://curatr3.com/define/type/level"
    },
    "definition": {
      "en": "A level of a game or of a gamified learning platform. A level is logic partition of progression in any video game. Completing a level means advancing in the progression of the game."
    },
    "prefLabel": {
      "en": "level"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/menu",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A menu with several buttons/options whose selection produces different effects. Represents a menu, integrated in the user interface (UI), with several a options."
    },
    "prefLabel": {
      "en": "menu"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/mouse",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A mouse device whose clicks and movement affects the action in an activity. PC games are usually controlled by mouse interaction. This activity represents this device."
    },
    "prefLabel": {
      "en": "mouse"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/non-player-character",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A character that can offer a conversation or other type of interaction inside a game. Players usually have conversations with non-player characters."
    },
    "prefLabel": {
      "en": "non-player-character"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/quest",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A accomplishable challenge or mission presented inside a game. Completing quests marks the players' progress."
    },
    "prefLabel": {
      "en": "quest"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/screen",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A game screen where a concrete game task is developed. Games are usually composed by a set of screens the player navigates. A screen has a concrete function within the game. A screen contains a menu, or the gameplay. To define virtual zones inside the game world, it is recommended to use area or zone."
    },
    "prefLabel": {
      "en": "screen"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/serious-game",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A game designed for a primary purpose other than pure entertainment. For instance, an educational game or a game-like simulation. A serious game is the root container for the rest of game elements."
    },
    "prefLabel": {
      "en": "serious-game"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/touchscreen",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A screen the player can touch or press."
    },
    "prefLabel": {
      "en": "touchscreen"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/activity-types/zone",
    "type": "ActivityType",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "An identified zone inside an area of the game world. A zone is inside an area, and defines a logic self-contained place."
    },
    "prefLabel": {
      "en": "zone"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/extensions/progress",
    "type": "ResultExtension",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A decimal number (3 significant figures with 2 figures following the decimal point) between 0 and 1 (inclusive) to indicate the value of progress in a completable. Indicates the progress in a completable. This extension appears in the Statement's result."
    },
    "prefLabel": {
      "en": "progress"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/extensions/health",
    "type": "ResultExtension",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "A decimal number (3 significant figures with 2 figures following the decimal point) between 0 and 1 (inclusive) to indicate the remaining health or stamina within a game. Used to represent the remaining health of the player (e.g., number of hearts, energy bar). This extension appears in the Statement's result."
    },
    "prefLabel": {
      "en": "health"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/extensions/position",
    "type": "ResultExtension",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "An object with attributes x, y and z indicating the position of the player within a particular area in a game. Used to represent the current position of the player inside the game world. This position should be expressed in a coordinate system known by the data analysts. This extension appears in the Statement's result."
    },
    "prefLabel": {
      "en": "position"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/verbs/accessed",
    "type": "Verb",
    "relatedMatch": ["http://activitystrea.ms/access"],
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "exactMatch": {
      "id": "http://activitystrea.ms/access"
    },
    "definition": {
      "en": "Indicates that the actor has gained access to the object. Associated to the virtual places a player visits during a gameplay."
    },
    "prefLabel": {
      "en": "accessed"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/verbs/pressed",
    "type": "Verb",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "exactMatch": {
      "id": "http://future-learning.info/xAPI/verb/pressed"
    },
    "definition": {
      "en": "Indicates that the actor made physical contact with the object. Used when the player presses some button in an input device. Press the left button in a mouse, press the X button in a XBox controller, etc. "
    },
    "prefLabel": {
      "en": "pressed"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/verbs/released",
    "type": "Verb",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "exactMatch": {
      "id": "http://future-learning.info/xAPI/verb/released"
    },
    "definition": {
      "en": "Indicates that the actor released the object from one's grip from or a specific state. Used when the player releases a previously pressed button."
    },
    "prefLabel": {
      "en": "released"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/verbs/unlocked",
    "type": "Verb",
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "Indicates the actor unlocked an option that was previously unavailable. Used when the player unlocks an option in an alternative."
    },
    "prefLabel": {
      "en": "unlocked"
    }
  }, {
    "id": "https://w3id.org/xapi/seriousgames/verbs/used",
    "type": "Verb",
    "exactMatch": ["http://activitystrea.ms/schema/use"],
    "inScheme": "https://w3id.org/xapi/seriousgames/v1.1.0",
    "definition": {
      "en": "Indicates the actor used a virtual object. Used when player uses items they find during the gameplay, to obtain different benefits."
    },
    "prefLabel": {
      "en": "used"
    }
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "https://registry.tincanapi.com",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "prefLabel": {
    "en": "TinCan Vocabulary"
  },
  "definition": {
    "en": "A list of vocabulary concepts originally created in the TinCan registry."
  },
  "seeAlso": "https://registry.tincanapi.com",
  "author": {
    "type": "Organization",
    "name": "Rustici Software"
  },
  "concepts": [{
    "id": "http://id.tincanapi.com/verb/adjourned",
    "prefLabel": {
      "en": "adjourned"
    },
    "definition": {
      "en": "Indicates the actor temporarily ended an event (e.g. a meeting). It is expected (but not required) that the event will be resumed at a future point in time. The actor of the statement should be somebody who has authority to adjourn the event, for example the event organizer."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/applauded",
    "prefLabel": {
      "en": "applauded"
    },
    "definition": {
      "en": "Indicates that the actor approves of the content or message. Analogous to praising."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/arranged",
    "prefLabel": {
      "en": "arranged"
    },
    "definition": {
      "en": "Indicates that the actor arranged the object within a collection or set of elements. The extension http://id.tincanapi.com/extension/position should be used to indicate the new position."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/bookmarked",
    "prefLabel": {
      "en": "bookmarked"
    },
    "definition": {
      "en": "Indicates the user determined the content was important enough to keep a reference to it for later. A different verb should be used for tracking the location in a set of text that a reader has reached, as in a physical bookmark."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/called",
    "prefLabel": {
      "en": "called"
    },
    "definition": {
      "en": "Indicates that the actor placed a phone call to the object."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/closed-sale",
    "prefLabel": {
      "en": "closed sale"
    },
    "definition": {
      "en": "Indicates that the actor has closed a sale."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/created-opportunity",
    "prefLabel": {
      "en": "created opportunity"
    },
    "definition": {
      "en": "Indicates that the actor has created a new opportunity, such as one might do in a CRM tool."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/defined",
    "prefLabel": {
      "en": "defined"
    },
    "definition": {
      "en": "Indicates that the actor has defined the object. Note that this is a more specific form of the verb ���create��. For instance, a learner defining a goal."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/disabled",
    "prefLabel": {
      "en": "disabled"
    },
    "definition": {
      "en": "Indicates that the actor turned off a particular part or feature of the system."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/discarded",
    "prefLabel": {
      "en": "discarded"
    },
    "definition": {
      "en": "Indicates that the actor discarded a previous selection. This verb works with the verb selected."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/downloaded",
    "prefLabel": {
      "en": "downloaded"
    },
    "definition": {
      "en": "Indicates that the actor downloaded (rather than accessed or opened) a file or document."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/earned",
    "prefLabel": {
      "en": "earned"
    },
    "definition": {
      "en": "Indicates that the actor has earned or has been awarded the object."
    },
    "exactMatch": ["http://specification.openbadges.org/xapi/verbs/earned"],
    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/enabled",
    "prefLabel": {
      "en": "enabled"
    },
    "definition": {
      "en": "Indicates that the actor turned on a particular part or feature of the system. It works with the verb disabled."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/frame/entered",
    "prefLabel": {
      "en": "entered frame"
    },
    "definition": {
      "en": "Indicates that the actor has entered the frame of a camera or viewing device."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/estimated-duration",
    "prefLabel": {
      "en": "estimated duration"
    },
    "definition": {
      "en": "Indicates that the actor has estimated the duration of the object. For instance, a learner estimating the duration of a task."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/frame/exited",
    "prefLabel": {
      "en": "exited frame"
    },
    "definition": {
      "en": "Indicates that the actor has exited the frame of a camera or viewing device."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/expected",
    "prefLabel": {
      "en": "expected"
    },
    "definition": {
      "en": "Indicates that the actor expected particular results from the object. The expected results should be recorded in the results field."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/expired",
    "prefLabel": {
      "en": "expired"
    },
    "definition": {
      "en": "Indicates that the object (a competency or certification) has expired for the actor."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/focused",
    "prefLabel": {
      "en": "focused"
    },
    "definition": {
      "en": "Indicates that a user has focused on a target object. This is the opposite of 'unfocused'. For example, it indicates that the user has clicked to focus or regain focus on the application, content or activity."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/hired",
    "prefLabel": {
      "en": "hired"
    },
    "definition": {
      "en": "An offer of employment that has been made by an agent and accepted by another."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/interviewed",
    "prefLabel": {
      "en": "interviewed"
    },
    "definition": {
      "en": "For use when one agent or group interviews another agent or group. It could be used for the purposes of hiring, creating news articles, shows, research, etc."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/laughed",
    "prefLabel": {
      "en": "laughed"
    },
    "definition": {
      "en": "Indicates that the actor found the content funny and enjoyable. May be used with an \"Ending Point\" extension (see http://id.tincanapi.com/extension/ending-point) value capturing the point in time within the Activity."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/marked-unread",
    "prefLabel": {
      "en": "marked as unread"
    },
    "definition": {
      "en": "The object was marked as unread."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/mentioned",
    "prefLabel": {
      "en": "mentioned"
    },
    "definition": {
      "en": "Indicates that the actor mentioned the object, for example in a tweet."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/mentored",
    "prefLabel": {
      "en": "mentored"
    },
    "definition": {
      "en": "Indicates that that the actor has mentored the object. For instance, a manager mentoring an employee, or a teacher mentoring a student."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/paused",
    "narrowMatch": ["https://w3id.org/xapi/video/verbs/paused"],
    "prefLabel": {
      "en": "paused"
    },
    "definition": {
      "en": "To indicate an actor has ceased or suspended an activity temporarily."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/performed-offline",
    "prefLabel": {
      "en": "performed offline"
    },
    "definition": {
      "en": "Indicates that the actor has performed the object offline for a period of time (episode). For instance, a learner performed task X, which is an offline task like reading a book, for 30 minutes. This is used to record the time spent on offline activities."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/personalized",
    "prefLabel": {
      "en": "personalized"
    },
    "definition": {
      "en": "Indicates that the actor personalized the object. The idea is that the actor personalizes an object created by a third party to adapt it for his/her personal use. This can be used for personalizing a strategy, method, a cooking recipe, etc."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/previewed",
    "prefLabel": {
      "en": "previewed"
    },
    "definition": {
      "en": "Used to indicate that an actor has taken a first glance at a piece of content that they plan to return to for a more in depth experience later. For instance someone may come across a webpage that they don't have enough time to read at that time, but plan to come back to and read fully."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/promoted",
    "prefLabel": {
      "en": "promoted"
    },
    "definition": {
      "en": "The act of promoting a content item such that it appears more highly in search results or is promoted to users in some other way."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/rated",
    "prefLabel": {
      "en": "rated"
    },
    "definition": {
      "en": "Action of giving a rating to an object. Should only be used when the action is the rating itself, as opposed to another action such as \"reading\" where a rating can be applied to the object as part of that action. In general the rating should be included in the Result with a Score object."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/replied",
    "prefLabel": {
      "en": "replied"
    },
    "definition": {
      "en": "The actor posted a reply to a forum, comment thread or discussion."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/replied-to-tweet",
    "prefLabel": {
      "en": "replied to tweet"
    },
    "definition": {
      "en": "This is an extension of the tweeted verb for the specific case of a tweet replying to another. This can be used to track group discussions experience. As with Retweeted we expect to find the original tweet id in the context as well as the person's handle to which the reply is addressed using the tweet extension URI http://id.tincanapi.com/extension/tweet"
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/requested-attention",
    "prefLabel": {
      "en": "requested attention"
    },
    "definition": {
      "en": "Indicates that the actor is requesting the attention of an instructor, presenter or moderator."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/retweeted",
    "prefLabel": {
      "en": "retweeted"
    },
    "definition": {
      "en": "Used when an agent repeats a tweet written by another user. Usage in a statement is similar to tweeted but we expect to find the URI to the original tweet in the context of the statement, as well as the username of the original author as a context extension. The extension URI used for this should be http://id.tincanapi.com/extension/tweet"
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/reviewed",
    "prefLabel": {
      "en": "reviewed"
    },
    "definition": {
      "en": "Indicates that the actor has reviewed the object. For instance, a person reviewing an employee or a person reviewing an owner's manual."
    },
    "exactMatch": ["https://brindlewaye.com/xAPITerms/verbs/reviewed/"],
    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/secured",
    "prefLabel": {
      "en": "secured"
    },
    "definition": {
      "en": "Indicates that the actor secured the object. The object used with this verb might be a device, piece of software, location, etc."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/selected",
    "prefLabel": {
      "en": "selected"
    },
    "definition": {
      "en": "Indicates that the actor selects an object from a collection or set to use it in an activity. The collection would be the context parent element."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/skipped",
    "prefLabel": {
      "en": "skipped"
    },
    "definition": {
      "en": "To indicate an actor has passed over or omitted an interval, screen, segment, item, or step."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/talked-with",
    "prefLabel": {
      "en": "talkedwith"
    },
    "definition": {
      "en": "Indicates that the actor talked to another agent or group. The object of statements using this verb should be an agent or group, for example a teacher, an NPC in a simulation, a group of colleagues. This verb is intended to be used where one actor initiates and leads a conversation, rather than an equal discussion between two parties."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/tweeted",
    "prefLabel": {
      "en": "tweeted"
    },
    "definition": {
      "en": "Use this verb when an agent tweets on Twitter. It is open for use also for other short messages (microblogging services) based on the URI as the activityId. We expect activityId to be a URI to the tweet."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/unfocused",
    "prefLabel": {
      "en": "unfocused"
    },
    "definition": {
      "en": "Indicates that the user has lost focus of the target object. For example, this could be used when the user clicks outside a given application, window or activity."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/unregistered",
    "prefLabel": {
      "en": "unregistered"
    },
    "definition": {
      "en": "Indicates the actor unregistered for a learning activity. This verb is used in combination with http://adlnet.gov/expapi/verbs/registered for the registering and unregistering of learners."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/viewed",
    "prefLabel": {
      "en": "viewed"
    },
    "definition": {
      "en": "Indicates that the actor has viewed the object."
    },

    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/voted-down",
    "prefLabel": {
      "en": "voted down"
    },
    "definition": {
      "en": "Indicates that the actor has voted down for a specific object. This is analogous to giving a thumbs down."
    },
    "exactMatch": ["http://curatr3.com/define/verb/voted-down"],
    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/verb/voted-up",
    "prefLabel": {
      "en": "voted up"
    },
    "definition": {
      "en": "Indicates that the actor has voted up for a specific object. This is analogous to giving a thumbs up."
    },
    "exactMatch": ["http://curatr3.com/define/verb/voted-up"],
    "inScheme": "http://registry.tincanapi.com",
    "type": "Verb"
  }, {
    "id": "http://id.tincanapi.com/activitytype/blog",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A regularly updated website or web page, typically one authored by an individual or small group, that is written in an informal or conversational style."
    },
    "prefLabel": {
      "en": "blog"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/book",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A book, generally paper, but could also be an ebook. The Activity's ID will often include an ISBN though it is not required. The Definition can likely leverage the ISBN extension, http://id.tincanapi.com/extension/isbn, if known."
    },
    "prefLabel": {
      "en": "book"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/category",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Activity generally used in the category Context Activities lists to mark a statement as being related to a particular subject area. Distinct from tag in that it is used in conjunction with Subcategory to imply a hierarchy of categorization."
    },
    "prefLabel": {
      "en": "category"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/chapter",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A chapter of a book or e-book."
    },
    "prefLabel": {
      "en": "chapter"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/chat-channel",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A channel, room or conversation within an instant chat application such as Slack."
    },
    "prefLabel": {
      "en": "chat channel"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/chat-message",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A message sent or received within the context of an instant chat platform such as Slack. The id of this activity should uniquely identify the particular chat message."
    },
    "prefLabel": {
      "en": "chat message"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/checklist",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A list of tasks to be completed, names to be consulted, conditions to be verified and similar."
    },
    "prefLabel": {
      "en": "checklist"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/checklist-item",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "An individual item contained in a checklist."
    },
    "prefLabel": {
      "en": "checklist item"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/code-commit",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A commit to a code repository e.g. Github."
    },
    "prefLabel": {
      "en": "code commit"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/collection-simple",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "It is a collection of items of the same activity type, for example, a collection of games. The collection can be generic, that is, the activity type of the items can be specified using the extension 'collection type', but it is optional."
    },
    "prefLabel": {
      "en": "simple collection"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/community-site",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A space on a social platform (or other platform with social features) for a community to communicate, share and collaborate. For example a Google Plus Community, a Facebook Group, a Jive Space or a Pathgather Gathering."
    },
    "prefLabel": {
      "en": "community site"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/conference",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A formal meeting which includes presentations or discussions."
    },
    "prefLabel": {
      "en": "conference"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/conference-session",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A single presentation, discussion, gathering, or panel within a conference."
    },
    "prefLabel": {
      "en": "conference session"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/conference-track",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A specific field of study within a conference."
    },
    "prefLabel": {
      "en": "conference track"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/discussion",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Represents an ongoing conversation between persons, such as an email thread or a forum topic."
    },
    "prefLabel": {
      "en": "discussion"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/document",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "An electronic document of the type produced by office productivity software such as a word processing document, spreadsheet, slides etc."
    },
    "prefLabel": {
      "en": "document"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/doubt",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Refers to something that the actor needs to cast light on, something that can be answered or solved."
    },
    "prefLabel": {
      "en": "doubt"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/email",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Electronic message sent over a computer network from a sender to one or many recipients."
    },
    "prefLabel": {
      "en": "email"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/essay",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A short literary composition on a single subject, usually presenting the personal view of the author."
    },
    "prefLabel": {
      "en": "essay"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/forum-reply",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Any post in a forum or discussion board thread that isn't the first."
    },
    "prefLabel": {
      "en": "forum reply"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/forum-topic",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "The first post in a thread on a forum or discussion board."
    },
    "prefLabel": {
      "en": "forum topic"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/goal",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A goal is something that the actor wants to achieve, the purpose of doing a task or group of tasks. It can have subtasks and subgoals."
    },
    "prefLabel": {
      "en": "goal"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/legacy-learning-standard",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Activity representing a statement generated by a course originally implemented in a legacy learning standard such as SCORM 1.2, 2004, or AICC."
    },
    "prefLabel": {
      "en": "legacy learning standard"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/lms",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Learning Management System. At it's core, a platform used to launch and track learning experiences. Many LMS also have a number of other additional features."
    },
    "prefLabel": {
      "en": "lms"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/paragraph",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A distinct division of written or printed matter that begins on a new, usually indented line, consists of one or more sentences, and typically deals with a single thought or topic or quotes one speaker's continuous words."
    },
    "prefLabel": {
      "en": "paragraph"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/playlist",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A collection of resources or experiences grouped together as recommended resources by an individual. Generally used for informally curated resources rather than official collections such as an LMS course."
    },
    "prefLabel": {
      "en": "playlist"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/project",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A project is a specific plan or set of tasks with a common goal. It can have subtasks and subgoals, resources, etc."
    },
    "prefLabel": {
      "en": "project"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/project-site",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A site, perhaps within a project management tool or social platform, used to manage a particular project."
    },
    "prefLabel": {
      "en": "project site"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/research-report",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A research report from a government organization or other authoritative body giving information or proposals on an issue."
    },
    "prefLabel": {
      "en": "research report"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/resource",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A resource is a generic item that the actor may use for something. It could be a video, a text article, a device, etc. However, it is recommended to use a more specific activity type like those mentioned."
    },
    "prefLabel": {
      "en": "resource"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/reward",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Refers to a compensation that the actor wants to get for achieving something."
    },
    "prefLabel": {
      "en": "reward"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/sales-opportunity",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a sales opportunity, such as one might create in a CRM tool."
    },
    "prefLabel": {
      "en": "sales opportunity"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/scenario",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "delivering the content embedded within a story or scenario rather than just pushing the content straight out. Usually a story or a situation is presented to ask for learner's action, feedback or branching follow. In this way learners see how the learning is applied to job environments or real world problems."
    },
    "prefLabel": {
      "en": "scenario"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/school-assignment",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A school task performed by a student to satisfy the teacher. Examples are assessments, assigned reading, practice exercises, watch video, etc."
    },
    "prefLabel": {
      "en": "school assignment"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/section",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A section of an application or platform. For sales performance app might be divided into client demo, learning materials and reference documents sections."
    },
    "prefLabel": {
      "en": "section"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/security-role",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A feature that enables system administrators to restrict system access and manage access on a per-user or per-group basis."
    },
    "prefLabel": {
      "en": "security role"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/slide",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Slides are defined as a single page of a presentation or e-learning lesson."
    },
    "prefLabel": {
      "en": "slide"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/slide-deck",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A deck of slides generally used for a presentation."
    },
    "prefLabel": {
      "en": "slide deck"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/solution",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Refers to the answer for a doubt that provides a solution. If the answer is not a solution, it should be coded as answer, or if it is just a comment, as comment."
    },
    "prefLabel": {
      "en": "solution"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/source",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Used with activities within the Context Activities category property of a Statement. Indicates the authoring tool, template or framework used to create the activity provider. This may help reporting tools to recognise that that data has come from a particular origin and handle the data correctly based on that information."
    },
    "prefLabel": {
      "en": "source"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/status-update",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A status update e.g. on a social platform."
    },
    "prefLabel": {
      "en": "status update"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/step",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A step is one of several actions that the actor has to do to achieve something, for instance, a goal or the completion of a task. For instance, a method, strategy or task could be divided into smaller steps."
    },
    "prefLabel": {
      "en": "step"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/strategy",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A strategy is a plan or method for achieving any specific goal, and can be formed by a group of steps."
    },
    "prefLabel": {
      "en": "strategy"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/strategy-embedded",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Refers to a functionality embedded in the software system to facilitate the implementation of a strategy."
    },
    "prefLabel": {
      "en": "embedded strategy"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/subcategory",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Activity generally used in the category Context Activities lists to mark a statement as being related to a particular subject area. Distinct from tag in that it is used in conjunction with Category to imply a hierarchy of categorization."
    },
    "prefLabel": {
      "en": "subcategory"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/suggestion",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A posted suggestion or idea. Typically these are things that can be discussed and/or voted on."
    },
    "prefLabel": {
      "en": "suggestion"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/test-data-batch",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A test data batch is an Activity that is used in the Context Activities category property of a Statement to indicate that the Statement is part of a particular collection of test data. The Id of this Activity represents a single collection of test data e.g. the data generated for a particular test or by a particular tool."
    },
    "prefLabel": {
      "en": "test data batch"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/tag",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Activity generally used in the other or grouping Context Activities lists to mark a statement as being related to a particular subject area. Implemented as a one word identifier used for search filtering or tag cloud generation."
    },
    "prefLabel": {
      "en": "tag"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/tutor-session",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "This represents a tutoring session."
    },
    "prefLabel": {
      "en": "tutor session"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/tweet",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A short message sent on Twitter. Used with the 'tweeted' verb."
    },
    "prefLabel": {
      "en": "tweet"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/unit-test",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A unit test in a test suite that is part of a programming project."
    },
    "prefLabel": {
      "en": "unit test"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/unit-test-suite",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Suite of unit tests used by a programming project."
    },
    "prefLabel": {
      "en": "unit test suite"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/user-profile",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A page displaying information about a user."
    },
    "prefLabel": {
      "en": "user profile"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/vocabulary-word",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Refers to a word that the learner defines or translates. The vocabulary word can be part of a collection. that is part of a vocabulary collection. An actor can use more than one vocabulary collection, for instance, for several languages or several topics. Besides the “name” (the word) and a “description” (meaning or translation), we recommend the use of moreInfo to link to a definition in an online dictionary. As an option, you can use the extension tags to classify the words."
    },
    "prefLabel": {
      "en": "vocabulary word"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/voicemail",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A recorded audio message left for someone, generally via a phone or similar communication system."
    },
    "prefLabel": {
      "en": "voicemail"
    }
  }, {
    "id": "http://id.tincanapi.com/activitytype/webinar",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A seminar conducted over the Internet which may be live or recorded."
    },
    "prefLabel": {
      "en": "webinar"
    }
  }, {
    "id": "http://risc-inc.com/annotator/activities/highlight",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "An annotation of the 'highlight' type. Highlights are used to mark strings of text in a document with a color. This activity type should only be used for highlighted text and not for highlighted images or other elements."
    },
    "prefLabel": {
      "en": "highlighted text annotation"
    }
  }, {
    "id": "http://risc-inc.com/annotator/activities/note",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Indicates an annotation made to a document of the 'note' form. This is a string of text appended to the document at a specified location. Note annotations can be added anywhere on the page. This activity type should not be used for other types of note that are not annotations to a document."
    },
    "prefLabel": {
      "en": "note annotation"
    }
  }, {
    "id": "http://risc-inc.com/annotator/activities/underline",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "exactMatch": ["http://risc-inc.com/annotator/activities/underline"],
    "definition": {
      "en": "An annotation of the 'underline' type. Underlines are used to mark strings of text in a document with a line underneath the text. This activity type should only be used for underlined text and not for images or other elements."
    },
    "prefLabel": {
      "en": "underline annotation"
    }
  }, {
    "id": "http://www.risc-inc.com/annotator/activities/freetext",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Indicates an annotation made to a document of the 'freetext' form. This is a string of text written direction onto the document at a specified location. Freetext annotations can be added anywhere on the page. Unlike note annotations, they have no border or background."
    },
    "prefLabel": {
      "en": "freetext annotation"
    }
  }, {
    "id": "http://www.tincanapi.co.uk/activitytypes/grade_classification",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "Represents a grade given or received within a particular context, for example ‘distinction’ within XYZ music test or ‘A’ for ABC qualification."
    },
    "prefLabel": {
      "en": "grade classification"
    }
  }, {
    "id": "https://www.opigno.org/en/tincan_registry/activity_type/certificate",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ActivityType",
    "definition": {
      "en": "A document attesting to the fact that a person has completed an educational course."
    },
    "prefLabel": {
      "en": "certificate"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/apm",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ResultExtension",
    "definition": {
      "en": "A result extension used in the Tetris prototype at http://tincanapi.com/prototypes. Actions per minute (APM) is a commonly reported on statistic in gaming as one mechanism for measuring the player's skill. See http://en.wikipedia.org/wiki/Actions_per_minute."
    },
    "prefLabel": {
      "en": "actionsper minute"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/assessment-type",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "A value representing the type of assessment like formative, summative, pretest, posttest, etc."
    },
    "prefLabel": {
      "en": "assessment type"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/attempt-id",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to differentiate between attempts within a given registration. This extension is especially useful for games, for example in the Tetris prototype at http://tincanapi.com/prototypes this extension is used as an identifier for each new game of Tetris."
    },
    "prefLabel": {
      "en": "attempt ID"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/browser-info",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Value is an object containing key/value pairs describing various elements of a web browser. Same as user-agent."
    },
    "exactMatch": ["https://w3id.org/xapi/video/extensions/user-agent"],
    "prefLabel": {
      "en": "browser information"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/cmi-interaction-weighting",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "A number that indicates the importance of this interaction relative to other interactions. Corresponds to cmi.interactions[x].weighting"
    },
    "prefLabel": {
      "en": "cmi interaction weighting"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/collection-type",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Represents the activity type of the objects of a simple collection."
    },
    "prefLabel": {
      "en": "collection type"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/color",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "A value representing a specific color as defined via a provided color model. Because the representation of a color depends on the model in which it was defined the value used should be an object that specifies two (at least) properties, specifically the 'model' used as well as the 'value' for the specific color within the color space."
    },
    "prefLabel": {
      "en": "color"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/condition-type",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Represents the type of condition that the actor needs to achieve to do what the verb in the statement expresses."
    },
    "prefLabel": {
      "en": "condition type"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/condition-value",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Represents the value (if necessary) to accomplish the condition. For instance, if the condition is a time limit, the condition value is the time expressed in the ISO8601 format, the same used in the result duration property."
    },
    "prefLabel": {
      "en": "condition value"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/data-uri",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Extension whose value is a string that follows the Data URI scheme as defined by RFC 2397."
    },
    "prefLabel": {
      "en": "data URI"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/date",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Value representing a calendar date, such as 2013-08-27. Value should be a string formatted as an ISO8601 date to match the rest of the specification values."
    },
    "prefLabel": {
      "en": "date"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/datetime",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Value representing a calendar date and time, such as 2013-08-27 09:26:45.001. Value should be a string formatted as an ISO8601 date and time to match the rest of the specification values."
    },
    "prefLabel": {
      "en": "datetime"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/drop-down",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Contains an interaction component for a non standard question type. Non-standard question type used in e-learning: any number of drop-down on a graphic. Each drop-down is a subquestion. "
    },
    "prefLabel": {
      "en": "drop-down"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/duration",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ResultExtension",
    "definition": {
      "en": "Value representing a length of time, for example the length of a video. Value should be either a string formatted as an ISO8601 duration to match the Result.duration property or a float that uses the same units as expected with correlating information (other extensions). This extension will generally be used within an Activity Definition to indicate a length of an Activity as compared to the Result.duration which captures the length of time for a specific event. For example a video may be 5 minutes long (this Extension), but an actor may have only watched 30 seconds of it (the Result.duration)."
    },
    "prefLabel": {
      "en": "duration"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/ending-point",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ResultExtension",
    "definition": {
      "en": "The final point at which an actor ceases an activity. For example stopping the playing of a video at a specific position either manually or automatically. Goes along with Starting Point. Can be used with types of media and/or activities other than video."
    },
    "prefLabel": {
      "en": "ending point"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/ending-position",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Final position within an ordinal set of numbers. Can also be thought of as a rank. For example the ending position of a car or runner in a race. To be used with Starting Position."
    },
    "prefLabel": {
      "en": "ending position"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/feedback",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "A value representing a piece of feedback relating to a statement. The feedback should be a string."
    },
    "prefLabel": {
      "en": "feedback"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/irl",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Value should be a fully qualified IRL that is resolvable. In so far as the IRL space contains all possible URLs this is provided in place of a more specific URL to match the expectation of the specification for using IRI/IRL."
    },
    "prefLabel": {
      "en": "irl"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/geojson",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Value should be a GeoJSON object as defined by the GeoJSON specification. GeoJSON can be used to represent GPS coordinates, as well as other geometrical entities. See http://www.geojson.org/ for more information."
    },
    "prefLabel": {
      "en": "geo JSON"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/invitee",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "To be used in the context. Contains a single object representing the actor which is being invited to the experience. For example the group on a social learning site. When using this extension, it is recommended to use the same actor objects that are used in other statements."
    },
    "prefLabel": {
      "en": "invitee"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/ip-address",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Value is a string representing an Internet Protocol address (IP address) in either IPv4 or IPv6 format. An example usage may be to help identify the client's real address location on internet as a Context extension. Another example may be to include relevant information about the http://activitystrea.ms/schema/1.0/page Activity type. IPv4 Address A string in decimal-dot notation, consisting of four decimal integers in the inclusive range 0-255, separated by dots (e.g. 192.168.0.1)."
    },
    "prefLabel": {
      "en": "ip address"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/isbn",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Value should be either a 10 digit ISBN or 13 digit ISBN string. Either value is acceptable as implementing systems can easily distinguish the two based on the length of the value. For more information see ISO 2108."
    },
    "prefLabel": {
      "en": "isbn"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/jws-certificate-location",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Context extension containing the URL of a public certificate that can be used to verify the signature of the statement."
    },
    "prefLabel": {
      "en": "jws certificate location"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/latitude",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "A geographic coordinate that specifies the north-south position of a point on the Earth's surface."
    },
    "prefLabel": {
      "en": "latitude"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/location",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "A non-specific (as in format) string value representing a location in which an activity took place. May contain an address, but for formal addresses a more specific format should be used with accompanying Extension."
    },
    "prefLabel": {
      "en": "location"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/longitude",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "A geographic coordinate that specifies the east-west position of a point on the Earth's surface."
    },
    "prefLabel": {
      "en": "longitude"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/measurement",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Value that represents a measured unit or physical quantity such as a distance or weight. For interoperability the value should be a string that follows the SI (International System of Units) recommendations for formatting and may include any value that can be described by its units. For additional information see the ISO 80000 standard."
    },
    "prefLabel": {
      "en": "measurement"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/monetary-value",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "A value representing the currency and amount of money. The value is an object with two properties, 'amount' which is a float and 'currency' which should hold an ISO 4217 code or number code."
    },
    "prefLabel": {
      "en": "monetary value"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/observer",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Context extension containing an Agent or Group object representing an agent or group who observed the experience."
    },
    "prefLabel": {
      "en": "observer"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/planned-duration",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Context extension containing an ISO 8601 duration representing the planned duration of a scheduled or planned event."
    },
    "prefLabel": {
      "en": "planned duration"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/planned-start-time",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Context extension containing an ISO 8601 timestamp representing the planned start time of a scheduled or planned event."
    },
    "prefLabel": {
      "en": "planned start time"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/position",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Represents the position of the object in a group or collection of elements. It is needed when the group of elements should be in order."
    },
    "prefLabel": {
      "en": "position"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/powered-by",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Information about what software is used to run a system."
    },
    "prefLabel": {
      "en": "powered by"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/private-area",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "An area, for instance within a Learning Management System (LMS), in which students and teachers can share pedagogical objects and interact privately."
    },
    "prefLabel": {
      "en": "private area"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/published",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Activity definition extension. The date and time at which the activity was published. Corresponds to the Activity Streams 1.0 'published' property."
    },
    "prefLabel": {
      "en": "published"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/purpose",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Represents the purpose of the object or result, as a way of classification."
    },
    "prefLabel": {
      "en": "purpose"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/quality-rating",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ResultExtension",
    "definition": {
      "en": "Value is an object that is similar to the Result's 'score' property in that it should include a 'raw' value as well as 'min' and 'max' range indicators. So that a phrase such as '4 out of 5 stars' can be indicated such as: { raw: 4, min: 1, max: 5 }."
    },
    "prefLabel": {
      "en": "quality-rating"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/referrer",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "To be used in the context. Contains a single activity object representing the activity which referred the learner to the experience. For example the page of an e-learning course that sent the learner to their current location. When using this extension, it is recommended to also include the activity object as one of the 'other' contextActivities of the statement as well for tools that don't recognize this extension."
    },
    "prefLabel": {
      "en": "referrer"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/reflection",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Represents a reflection of the actor about the object."
    },
    "prefLabel": {
      "en": "reflection"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/severity",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Indicates the associated level of an event. For example it could be used to indicate the level of an injury or incident."
    },
    "prefLabel": {
      "en": "severity"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/share-medium",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Context extension used with the verb http://adlnet.gov/expapi/verbs/shared. Indicates the medium that the object has been shared over. Contains a single word lowercase string representing the share medium e.g. email, sms, twitter, facebook."
    },
    "prefLabel": {
      "en": "share-medium"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/starting-point",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "The initial point from which an agent begins an activity. For example starting to play a video from a specific position in the video. Goes along with 'Ending Point.' Can be used with types of media and/or activities other than video."
    },
    "prefLabel": {
      "en": "starting-point"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/starting-position",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Initial position within an ordinal set of numbers. Can also be thought of as a rank. For example the starting position of a car or runner in a race. To be used with 'Ending Position.'"
    },
    "prefLabel": {
      "en": "starting-position"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/tags",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "A list of arbitrary tags to associate with a statement. Value of the extension should be an array with each tag being a string value as an element of the array."
    },
    "prefLabel": {
      "en": "tags"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/target",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "Based on the Activity Streams target property. Contains the target of the statement e.g. Brian Shared 'statements deep dive' with Andrew - Andrew is the target. The value of this extension can be anything that would be a legal value of the statement's object property."
    },
    "prefLabel": {
      "en": "target"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/tetris-lines",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ResuExtension",
    "definition": {
      "en": "The number of lines achieved in a game of Tetris or another game of a similar type. This extension is used by the Tetris game prototype at http://tincanapi.com/prototypes."
    },
    "prefLabel": {
      "en": "tetris-lines"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/time",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ResultExtension",
    "definition": {
      "en": "Value representing a moment in time but not specific to a date, such as 12:34:56.789. Value should be a string formatted as an ISO8601 time to match the rest of the specification values."
    },
    "prefLabel": {
      "en": "time"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/topic",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "A value that contains a topic for a statement."
    },
    "prefLabel": {
      "en": "topic"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/training-provider",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "An agent or group representing the company or organization that offers a training session."
    },
    "prefLabel": {
      "en": "training-provider"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/tweet",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "An ID for a tweet, such as 373445672076197889. It is advised to also supply the author of the tweet's handle and the text of the tweet as values with this extension."
    },
    "prefLabel": {
      "en": "tweet"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/updated",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ContextExtension",
    "definition": {
      "en": "The date and time at which a previously published activity has been modified. Corresponds to the Activity Streams 1.0 'updated' property."
    },
    "prefLabel": {
      "en": "updated"
    }
  }, {
    "id": "http://id.tincanapi.com/extension/valid-until",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ResultExtension",
    "definition": {
      "en": "An extension on the Result object indicating for how long the completion of this training is considered valid, before the actor needs to re-certify. The type should be an ISO8601 timestamp."
    },
    "prefLabel": {
      "en": "valid-until"
    }
  }, {
    "id": "http://www.tincanapi.co.uk/extensions/result/classification",
    "inScheme": "http://registry.tincanapi.com",
    "type": "ResultExtension",
    "definition": {
      "en": "A result extension used to store the grade awarded as a result of the experience. The value of this extension is an activity object representing the grade earned. This activity object should have an activity type of http://www.tincanapi.co.uk/activitytypes/grade_classification. The name of the activity should contain the value of the grade (e.g. “A”). An activity object is used rather than a single letter string as grade letters in different contexts, for example a grade A for a nationally recognized qualification has very different meaning to an A awarded by a teacher to a small child for a drawing of a cat. The activity used should represent the grade within the context it is awarded."
    },
    "prefLabel": {
      "en": "classification"
    }
  }, {
    "id": "http://id.tincanapi.com/attachment/certificate-of-completion",
    "inScheme": "http://registry.tincanapi.com",
    "type": "AttachmentUsageType",
    "definition": {
      "en": "Certificate provided upon completion of an exercise, perhaps as part of a formal learning activity."
    },
    "prefLabel": {
      "en": "certificate of completion"
    }
  }, {
    "id": "http://id.tincanapi.com/attachment/contract",
    "inScheme": "http://registry.tincanapi.com",
    "type": "AttachmentUsageType",
    "definition": {
      "en": "A contract intended to be legally binding between two parties. May be part of a sales process, hiring process, real estate transaction, etc."
    },
    "prefLabel": {
      "en": "contract"
    }
  }, {
    "id": "http://id.tincanapi.com/attachment/supporting_media",
    "inScheme": "http://registry.tincanapi.com",
    "type": "AttachmentUsageType",
    "definition": {
      "en": "A media file that supports the experience. For example a video that shows the experience taking place."
    },
    "prefLabel": {
      "en": "supporting media"
    }
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "https://w3id.org/xapi/video",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "prefLabel": {
    "en": "Video Profile"
  },
  "definition": {
    "en": "The video profile of the xAPI was created to identify and standardize the common types of interactions that can be tracked in any video player."
  },
  "seeAlso": "https://github.com/liveaspankaj/xapi-video-cop",
  "author": {
    "type": "Organization",
    "name": "Advanced Distributed Learning(ADL) Initiative"
  },
  "versions": [{
    "id": "https://w3id.org/xapi/video/v1.1.0",
    "generatedAtTime": "2017-06-29T10:45:00Z",
    "wasRevisionOf": ["https://w3id.org/xapi/video/v1"]
  }],
  "concepts": [{
    "id": "https://w3id.org/xapi/video/verbs/paused",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "Verb",
    "broadMatch": ["http://id.tincanapi.com/verb/paused"],
    "definition": {
      "en": "Indicates the actor paused the video being played at a specific point."
    },
    "prefLabel": {
      "en": "paused"
    }
  }, {
    "id": "https://w3id.org/xapi/video/verbs/played",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "Verb",
    "exactMatch": ["http://activitystrea.ms/schema/1.0/play"],
    "definition": {
      "en": "Indicates that the actor started experiencing the recorded media object."
    },
    "prefLabel": {
      "en": "played"
    }
  }, {
    "id": "https://w3id.org/xapi/video/verbs/seeked",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "Verb",
    "definition": {
      "en": "Indicates the actor changed the progress towards a specific point."
    },
    "prefLabel": {
      "en": "seeked"
    }
  }, {
    "id": "https://w3id.org/xapi/video/activity-type/video",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ActivityType",
    "exactMatch": ["http://activitystrea.ms/schema/1.0/video", "https://w3id.org/xapi/acrossx/activities/video"],
    "definition": {
      "en": "A recording of both the visual and audible components made available on a display screen."
    },
    "prefLabel": {
      "en": "video"
    }
  }, {
    "id": "https://w3id.org/xapi/video/extensions/cc-subtitle-enabled",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to expresses whether subtitle or closed captioning is enabled."
    },
    "prefLabel": {
      "en": "cc-subtitle-enabled"
    },
    "inlineSchema": "{ \"type\": \"boolean\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/cc-subtitle-lang",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to express the language of subtitle or closed captioning."
    },
    "prefLabel": {
      "en": "cc-subtitle-lang"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/frame-rate",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to express the frame rate or frames per second of a video (or average rate of frames per second in the case of variable frame-rate)."
    },
    "prefLabel": {
      "en": "frame-rate"
    },
    "inlineSchema": "{ \"type\": \"number\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/full-screen",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to expresses that the video is played in full screen mode."
    },
    "prefLabel": {
      "en": "full-screen"
    },
    "inlineSchema": "{ \"type\": \"boolean\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/quality",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to express the video resolution or quality. Integer Value (e.g., 360, 480, 720, 1080, etc.)."
    },
    "prefLabel": {
      "en": "quality"
    },
    "inlineSchema": "{ \"type\": \"number\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/session-id",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "exactMatch": ["https://w3id.org/xapi/cmi5/context/extensions/sessionid"],
    "type": "ContextExtension",
    "definition": {
      "en": "Used to provide the session identifier associated with the activity."
    },
    "prefLabel": {
      "en": "session-id"
    },
    "inlineSchema": "{ \"type\": \"string\", \"pattern\": \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[8-9a-bA-B][0-9a-fA-F]{3}-[0-9a-fA-F]{12}\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/screen-size",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to express the device playback screen size or the maximum available screensize for Video playback."
    },
    "prefLabel": {
      "en": "screen-size"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/speed",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to express the play-back speed (e.g., 1x,2x,0,-1x,-2x)."
    },
    "prefLabel": {
      "en": "speed"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/track",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to identify the name of the audio track in a media object."
    },
    "prefLabel": {
      "en": "track"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/user-agent",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to identify the User Agent string of the browser, if the video is launched in browser."
    },
    "prefLabel": {
      "en": "user-agent"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/volume",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to identify the loudness of sound specified for a media object."
    },
    "prefLabel": {
      "en": "volume"
    },
    "inlineSchema": "{ \"type\": \"number\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/video-playback-size",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ContextExtension",
    "definition": {
      "en": "Used to identify the size in Width x Height of the video as viewed by the user."
    },
    "prefLabel": {
      "en": "video-playback-size"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/played-segments",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ResultExtension",
    "definition": {
      "en": "Played segments reveals potential heat map data for showing parts of the video the actor watched during current registration in chronological order (e.g., 0.000[.]12.000[,]14.000[.]21.000[,]18.000[.]30.000)."
    },
    "prefLabel": {
      "en": "played-segments"
    },
    "inlineSchema": "{ \"type\": \"string\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/progress",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ResultExtension",
    "definition": {
      "en": "Used to expresses the percentage of media consumed by the actor."
    },
    "prefLabel": {
      "en": "progress"
    },
    "inlineSchema": "{ \"type\": \"number\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/time",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ResultExtension",
    "definition": {
      "en": "Used to express the time into the video. (e.g., “00000.000” in seconds and milliseconds)."
    },
    "prefLabel": {
      "en": "time"
    },
    "inlineSchema": "{ \"type\": \"number\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/time-from",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ResultExtension",
    "definition": {
      "en": "Used to identify the point in time the actor changed from in a media object (eg: “200.000” in seconds and milliseconds)."
    },
    "prefLabel": {
      "en": "time-from"
    },
    "inlineSchema": "{ \"type\": \"number\" }"
  }, {
    "id": "https://w3id.org/xapi/video/extensions/time-to",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "type": "ResultExtension",
    "definition": {
      "en": "Used to identify the point in time the actor changed to in a media object (eg: “300.000” in seconds and milliseconds)."
    },
    "prefLabel": {
      "en": "time-to"
    },
    "inlineSchema": "{ \"type\": \"number\" }"
  }],
  "templates": [{
    "id": "https://w3id.org/xapi/video/templates#generalrestrictions",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "prefLabel": {
      "en": "General Restrictions"
    },
    "definition": {
      "en": "The general rules required for inclusion in all Video Profile Statements."
    },
    "rules": [{
      "location": "$.id",
      "presence": "included"
    }, {
      "location": "$.timestamp",
      "presence": "included"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/session-id']",
      "presence": "included"
    }]
  }, {
    "id": "https://w3id.org/xapi/video/templates#started",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "prefLabel": {
      "en": "Started"
    },
    "definition": {
      "en": "The statement template and rules associated with a video being initialized."
    },
    "verb": "http://adlnet.gov/expapi/verbs/initialized",
    "rules": [{
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/volume']",
      "presence": "recommended"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/video-playback-size']",
      "presence": "recommended"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/user-agent']",
      "presence": "recommended"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/cc-enabled']",
      "presence": "recommended"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/cc-subtitle-lang']",
      "presence": "recommended"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/screen-size']",
      "presence": "recommended"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/speed']",
      "presence": "recommended"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/full-screen']",
      "presence": "recommended"
    }]
  }, {
    "id": "https://w3id.org/xapi/video/templates#played",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "prefLabel": {
      "en": "Played"
    },
    "definition": {
      "en": "The statement template and rules associated with a video being played."
    },
    "verb": "https://w3id.org/xapi/video/verbs/played",
    "objectActivityType": "https://w3id.org/xapi/video/activity-type/video",
    "rules": [{
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/time']",
      "presence": "included"
    }, {
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/played-segments']",
      "presence": "recommended"
    }]
  }, {
    "id": "https://w3id.org/xapi/video/templates#paused",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "prefLabel": {
      "en": "Paused"
    },
    "definition": {
      "en": "The statement template and rules associated with a video being paused."
    },
    "verb": "https://w3id.org/xapi/video/verbs/paused",
    "objectActivityType": "https://w3id.org/xapi/video/activity-type/video",
    "rules": [{
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/time']",
      "presence": "included"
    }, {
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/played-segments']",
      "presence": "recommended"
    }, {
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/progress']",
      "presence": "recommended"
    }]
  }, {
    "id": "https://w3id.org/xapi/video/templates#seeked",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "prefLabel": {
      "en": "Seeked"
    },
    "definition": {
      "en": "The statement template and rules associated with a video seekbar being moved from and to a specific position in the video."
    },
    "verb": "https://w3id.org/xapi/video/verbs/seeked",
    "objectActivityType": "https://w3id.org/xapi/video/activity-type/video",
    "rules": [{
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/time-to']",
      "presence": "included"
    }, {
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/time-from']",
      "presence": "included"
    }]
  }, {
    "id": "https://w3id.org/xapi/video/templates#completed",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "prefLabel": {
      "en": "Completed"
    },
    "definition": {
      "en": "The statement template and rules associated with a video being completed."
    },
    "verb": "http://adlnet.gov/expapi/verbs/completed",
    "objectActivityType": "https://w3id.org/xapi/video/activity-type/video",
    "rules": [{
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/time']",
      "presence": "included"
    }, {
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/progress']",
      "presence": "included"
    }]
  }, {
    "id": "https://w3id.org/xapi/video/templates#volumechange",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "prefLabel": {
      "en": "Volume Change Interaction"
    },
    "verb": "http://adlnet.gov/expapi/verbs/interacted",
    "objectActivityType": "https://w3id.org/xapi/video/activity-type/video",
    "rules": [{
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/time']",
      "presence": "included"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/volume']",
      "presence": "included"
    }]
  }, {
    "id": "https://w3id.org/xapi/video/templates#screenchange",
    "inScheme": "https://w3id.org/xapi/video/v1.1.0",
    "prefLabel": {
      "en": "Screen Change Interaction"
    },
    "verb": "http://adlnet.gov/expapi/verbs/interacted",
    "objectActivityType": "https://w3id.org/xapi/video/activity-type/video",
    "rules": [{
      "location": "$.result.extensions['https://w3id.org/xapi/video/extensions/time']",
      "presence": "included"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/full-screen']",
      "presence": "included"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/screen-size']",
      "presence": "included"
    }, {
      "location": "$.context.extensions['https://w3id.org/xapi/video/extensions/video-playback-size']",
      "presence": "included"
    }]
  }],
  "patterns": [{
    "id": "https://w3id.org/xapi/video/patterns#generalpattern",
    "primary": true,
    "prefLabel": {
      "en": "General Pattern and Sequence"
    },
    "definition": {
      "en": "The general pattern and sequence of Statement templates using the Video Profile."
    },
    "sequence": ["https://w3id.org/xapi/video/templates#started", "https://w3id.org/xapi/video/patterns#optionalmiddlestatements"]
  }, {
    "id": "https://w3id.org/xapi/video/patterns#all-activities-pattern",
    "prefLabel": {
      "en": "All Activities Pattern"
    },
    "definition": {
      "en": "All of the Video Profile templates."
    },
    "alternates": ["https://w3id.org/xapi/video/templates#played", "https://w3id.org/xapi/video/templates#paused", "https://w3id.org/xapi/video/templates#seeked", "https://w3id.org/xapi/video/templates#volumechange", "https://w3id.org/xapi/video/templates#screenchange", "https://w3id.org/xapi/video/templates#completed"]
  }, {
    "id": "https://w3id.org/xapi/video/patterns#optionalmiddlestatements",
    "prefLabel": {
      "en": "Optional Middle Statements"
    },
    "definition": {
      "en": "A combined pattern of zero or more Video Profile templates that can be used after the primary pattern."
    },
    "type": "Pattern",
    "zeroOrMore": "https://w3id.org/xapi/video/patterns#all-activities-pattern"

  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "https://w3id.org/xapi/virtual-patient",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "prefLabel": {
    "en": "Virtual Patient Profile"
  },
  "definition": {
    "en": "The Virtual Patient Profile describes health professions education verbs, activities and learner performance with the goal of understanding the needs of health profession educators."
  },
  "seeAlso": "http://groups.medbiq.org/medbiq/display/XIG/Learning+Experience+Group+Home",
  "author": {
    "type": "Organization",
    "name": "MedBiquitous Learning Experience Working Group"
  },
  "versions": [{
    "id": "https://w3id.org/xapi/virtual-patient/v1.0.0",
    "generatedAtTime": "2016-07-21T10:45:00Z",
    "wasRevisionOf": ["https://w3id.org/xapi/virtual-patient/v0.1"]
  }],
  "concepts": [{
    "id": "https://w3id.org/xapi/medbiq/verbs/ignored",
    "relatedMatch": ["http://activitystrea.ms//ignore"],
    "inScheme": "https://w3id.org/xapi/virtual-patient/v1.0.0",
    "type": "Verb",
    "definition": {
      "en": "Indicates the actor did not acknowledge an object or activity. User has ignored a flag or other simulation data. This is a flag or action sent by either an instructor or the simulation software to indicate that an action was expected by this point in time and had not occurred. Sometimes this is a good thing, and while absent, is not necessarily a negative aspect - for example, if there is a distractor in place that the actor is supposed to ignore as irrelevant."
    },
    "prefLabel": {
      "en": "ignored"
    }
  }, {
    "id": "https://w3id.org/xapi/medbiq/verbs/updated",
    "inScheme": "https://w3id.org/xapi/virtual-patient/v1.0.0",
    "type": "Verb",
    "broadMatch": ["http://activitystrea.ms/update"],
    "definition": {
      "en": "Indicates the actor prompted a change in a data value or information associated with the object.The Virtual Patient player engine has changed a counter value. This may be triggered by arrival at a particular node, or by a rule within the case design created by the virtual patient author, or by a timer expiration point. Although the counter value may be regarded as a score, note that the ADL verb ‘scored’ is overall score for the case or exam (http://adlnet.gov/expapi/verbs/scored), which is not the same thing."
    },
    "prefLabel": {
      "en": "updated"
    }
  }]
}, {
  "@context": "https://w3id.org/xapi/profiles/context",
  "id": "https://w3id.org/xapi/dod-isd",
  "type": "Profile",
  "conformsTo": "https://w3id.org/xapi/profiles#1.0",
  "prefLabel": {
    "en": "DOD ISD"
  },
  "definition": {
    "en": "Verbs and extensions for use in creating DOD IMI, per MIL-HDBK-29612-1A."
  },
  "seeAlso": "MIL-HDBK-29612-1A",
  "versions": [{
    "id": "https://w3id.org/xapi/dod-isd/v1.0",
    "generatedAtTime": "2017-10-24"
  }],
  "author": {
    "type": "Organization",
    "name": "CAE USA"
  },
  "concepts": [{
    "id": "https://w3id.org/xapi/dod-isd/verbs/advised",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "advised"
    },
    "definition": {
      "en": "Offer suggestions or factual information about the best course of action. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/answered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "answered"
    },
    "definition": {
      "en": "Provide the required responses to a test, quiz, or question. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/briefed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "briefed"
    },
    "definition": {
      "en": "Instruct or inform someone thoroughly, especially in preparation for a task. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/calculated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "calculated"
    },
    "definition": {
      "en": "Determine the amount or number of something mathematically. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/defined",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "defined"
    },
    "definition": {
      "en": "State or describe exactly the nature, scope, or meaning of something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/elaborated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "elaborated"
    },
    "definition": {
      "en": "Develop or present a theory, policy, or system in detail. Add more detail concerning what has already been said. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/expressed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "expressed"
    },
    "definition": {
      "en": "Convey a thought or feeling in words or by gestures and conduct. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/identified",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "identified"
    },
    "definition": {
      "en": "Establish or indicate who or what someone or something is. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/informed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "informed"
    },
    "definition": {
      "en": "Provide facts or information about someone or something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/instructed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "instructed"
    },
    "definition": {
      "en": "Direct or command someone to do something, especially as an official order. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/listed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "listed"
    },
    "definition": {
      "en": "Make a number of connected items or names in consecutive order. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/named",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "named"
    },
    "definition": {
      "en": "Identify by name; give the correct name for a person, animal, place, or thing which is known, addressed, or being referred to. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/read",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "read"
    },
    "definition": {
      "en": "Look at and comprehend the meaning of written matter by mentally interpreting the characters or symbols of which it is composed. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/recalled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "recalled"
    },
    "definition": {
      "en": "Bring (a fact, event, or situation) back into ones mind, especially so as to recount it to others; remember. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/recommended",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "recommended"
    },
    "definition": {
      "en": "Advise or suggest something as a course of action. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/recounted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "recounted"
    },
    "definition": {
      "en": "Give an account of an event or experience. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/specified",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "specified"
    },
    "definition": {
      "en": "Identify clearly and definitely. State a fact or requirement clearly and precisely. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/stated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "stated"
    },
    "definition": {
      "en": "Express something definitely or clearly in speech or writing. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/told",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "told"
    },
    "definition": {
      "en": "Communicate information, facts, or news to someone. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Fact Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/appraised",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "appraised"
    },
    "definition": {
      "en": "Assess the value or quality of something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/compiled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "compiled"
    },
    "definition": {
      "en": "Collect information in order to produce something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/composed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "composed"
    },
    "definition": {
      "en": "Constitute or make a whole from its parts or elements. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/computed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "computed"
    },
    "definition": {
      "en": "Make a calculation of a figure or amount. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/encrypted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "encrypted"
    },
    "definition": {
      "en": "Convert information or data into a cipher or code, especially to prevent unauthorized access. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/estimated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "estimated"
    },
    "definition": {
      "en": "Roughly calculate or judge the value, number, quantity, or extent. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/evaluated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "evaluated"
    },
    "definition": {
      "en": "Form an idea of the amount, number, or value of; assess. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/formatted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "formatted"
    },
    "definition": {
      "en": "Prepare a storage medium to receive data. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/forwarded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "forwarded"
    },
    "definition": {
      "en": "Send, dispatch, or redirect data to a further destination. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/measured",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "measured"
    },
    "definition": {
      "en": "Ascertain the size, amount, or degree of something by using an instrument or device marked in standard units or by comparing it with an object of known size. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/outlined",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "outlined"
    },
    "definition": {
      "en": "Provide a summary or rough idea of something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/routed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "routed"
    },
    "definition": {
      "en": "Send or direct along a specified course. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Rule Learning', and with the 'Interactivity Level' extension with a value of 1 or 2."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/checked",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "checked"
    },
    "definition": {
      "en": "Examine something in order to verify its accuracy, quality, or condition, or to detect the presence of something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/condensed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "condensed"
    },
    "definition": {
      "en": "Make something more concentrated. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/edited",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "edited"
    },
    "definition": {
      "en": "Change data on a computer or document. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/deleted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "deleted"
    },
    "definition": {
      "en": "Remove data from a computer or document. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/implemented",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "implemented"
    },
    "definition": {
      "en": "Put a decision, plan, agreement, etc., into effect. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/initiated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "initiated"
    },
    "definition": {
      "en": "Cause a process or action to begin. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/paused",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "paused"
    },
    "definition": {
      "en": "Interrupt an action. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/resumed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "resumed"
    },
    "definition": {
      "en": "Begin to perform or pursue something again after a pause or interruption. Use either with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3; or with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/set-up",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "set up"
    },
    "definition": {
      "en": "Place or bring something into a specified state. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/started",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "started"
    },
    "definition": {
      "en": "Cause something such as an event or process to happen, or to cause machinery to begin working. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/stopped",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "stopped"
    },
    "definition": {
      "en": " Cause something such as an event or process to end, or to cause machinery to cease working. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Procedure Learning', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/allocated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "allocated"
    },
    "definition": {
      "en": "Distribute resources or duties for a particular purpose. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/arranged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "arranged"
    },
    "definition": {
      "en": "Organize something into a required order. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/assigned",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "assigned"
    },
    "definition": {
      "en": "Designate or set something or someone aside for a specific purpose. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/categorized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "categorized"
    },
    "definition": {
      "en": "Place in a particular class or group. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/classified",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "classified"
    },
    "definition": {
      "en": "Arrange a group of people or things in classes or categories according to shared qualities or characteristics. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/collated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "collated"
    },
    "definition": {
      "en": "Collect and combine texts, information, or sets of figures in proper order. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/compared",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "compared"
    },
    "definition": {
      "en": "Estimate, measure, or make note of the similarity or dissimilarity between one thing and another for purposes of explanation or clarification. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/confirmed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "confirmed"
    },
    "definition": {
      "en": "Establish with assurance that something is true. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/consolidated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "consolidated"
    },
    "definition": {
      "en": "Combine a number of things into a single more effective or coherent whole. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/contrasted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "contrasted"
    },
    "definition": {
      "en": "Compare in such a way as to emphasize differences. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/correlated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "correlated"
    },
    "definition": {
      "en": "Establish a mutual relationship or connection between two or more things. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/cross-checked",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "cross-checked"
    },
    "definition": {
      "en": "Verify figures or information by using an alternative source or method. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/designated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "designated"
    },
    "definition": {
      "en": "Officially assign a specified status or ascribe a specified name or quality to something or someone. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/differentiated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "differentiated"
    },
    "definition": {
      "en": "Recognize or ascertain what makes someone or something different. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/discriminated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "discriminated"
    },
    "definition": {
      "en": "Recognize a distinction between one or more things; differentiate. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/distinguished",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "distinguished"
    },
    "definition": {
      "en": "Perceive or point out a difference. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/distributed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "distributed"
    },
    "definition": {
      "en": "Assign or share data or items across an area. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/divided",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "divided"
    },
    "definition": {
      "en": "Find how many times a number contains another, or separate into parts. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/eliminated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "eliminated"
    },
    "definition": {
      "en": "Remove a variable from an equation, typically by substituting another that is shown by a different equation to be equivalent; exclude from consideration. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/extracted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "extracted"
    },
    "definition": {
      "en": "Remove or take out. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/finalized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "finalized"
    },
    "definition": {
      "en": "Produce or agree on a finished and definitive version of something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/grouped",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "grouped"
    },
    "definition": {
      "en": "Put together or place into categories or classifications. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/labeled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "labeled"
    },
    "definition": {
      "en": "Assign or designate something to a category. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/leveled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "leveled"
    },
    "definition": {
      "en": "Make something equal or similar in order to remove a disparity. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/matched",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "matched"
    },
    "definition": {
      "en": "Put in a set possessing equal or harmonizing attributes. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/organized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "organized"
    },
    "definition": {
      "en": "Form into a coherent unity or functioning whole. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/ranked",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "ranked"
    },
    "definition": {
      "en": "Determine the relative position of something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/realigned",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "realigned"
    },
    "definition": {
      "en": "Change the position, direction, or organization of something again usually in relation to something else. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/redistributed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "redistributed"
    },
    "definition": {
      "en": "Alter the distribution of data or items across an area. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reexamined",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reexamined"
    },
    "definition": {
      "en": "Examine again or further. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reorganized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reorganized"
    },
    "definition": {
      "en": "Change the way in which something is organized. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/restated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "restated"
    },
    "definition": {
      "en": "State something again or differently, especially in order to correct or to make more clear or convincing. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/scheduled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "scheduled"
    },
    "definition": {
      "en": "Arrange or plan something to take place at a particular time. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/selected",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "selected"
    },
    "definition": {
      "en": "Carefully choose as being the best or most suitable. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/separated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "separated"
    },
    "definition": {
      "en": "Cause to move or be apart. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/sorted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "sorted"
    },
    "definition": {
      "en": "Arrange systematically in groups; separate according to type, class, etc… Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/tasked",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "tasked"
    },
    "definition": {
      "en": "Assign a piece of work to someone or something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/templated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "templated"
    },
    "definition": {
      "en": "Set up text or data using a template. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/translated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "translated"
    },
    "definition": {
      "en": "Express the sense of words or text in another language; move from one place or condition to another. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/tuned",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "tuned"
    },
    "definition": {
      "en": "Adjust or adapt something to a particular purpose, situation, or frequency. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Discrimination Learning', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/analyzed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "analyzed"
    },
    "definition": {
      "en": "Examine methodically and in detail the constitution or structure of something, especially information, typically for purposes of explanation and interpretation. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/annotated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "annotated"
    },
    "definition": {
      "en": "Add notes to a text or diagram giving explanation or comment. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/applied",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "applied"
    },
    "definition": {
      "en": "Be applicable or relevant. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/changed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "changed"
    },
    "definition": {
      "en": "Make or become different. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/combined",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "combined"
    },
    "definition": {
      "en": "Unite or merge one thing with another. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/concluded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "concluded"
    },
    "definition": {
      "en": "Arrive at a judgment or opinion by reasoning; bring something to an end. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/converted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "converted"
    },
    "definition": {
      "en": "Cause to change in form, character, or function. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/created",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "created"
    },
    "definition": {
      "en": "Bring something into existence as a result of one’s actions. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/criticized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "criticized"
    },
    "definition": {
      "en": "Form and express a sophisticated judgment of something or someone. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/decided",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "decided"
    },
    "definition": {
      "en": "Make a choice from a number of alternatives; come to a resolution. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/defended",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "defended"
    },
    "definition": {
      "en": "Speak or write in favor of an action or person; attempt to justify. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/derived",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "derived"
    },
    "definition": {
      "en": "Base a concept on a logical extension or modification of another concept. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/designed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "designed"
    },
    "definition": {
      "en": "Do or plan something with a specific purpose or intention in mind. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/determined",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "determined"
    },
    "definition": {
      "en": "Ascertain or establish exactly, typically as a result of research or calculation. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/diagrammed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "diagrammed"
    },
    "definition": {
      "en": "Represent something in graphic form. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/discovered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "discovered"
    },
    "definition": {
      "en": "Become aware of a fact or situation. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/drafted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "drafted"
    },
    "definition": {
      "en": "Prepare a preliminary version of a text. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/effected",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "effected"
    },
    "definition": {
      "en": "Cause something to happen; bring about. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/explained",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "explained"
    },
    "definition": {
      "en": "Make an idea, situation, or problem clear to someone by describing it in more detail or revealing relevant facts or ideas. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/extended",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "extended"
    },
    "definition": {
      "en": "Cause to cover a larger area; make or last longer or make wider; include within one’s scope. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/found",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "found"
    },
    "definition": {
      "en": "Recognize or discover something to be present. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/generalized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "generalized"
    },
    "definition": {
      "en": "Make a general or broad statement by inferring from specific cases. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/generated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "generated"
    },
    "definition": {
      "en": "Cause something to arise or come about; produce a set or sequence of items by performing specified mathematical or logical operations on an initial set. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/hypothesized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "hypothesized"
    },
    "definition": {
      "en": "Put (something) forward as a hypothesis. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/illustrated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "illustrated"
    },
    "definition": {
      "en": "Explain or make something clear by using examples, charts, pictures, etc. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/inferred",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "inferred"
    },
    "definition": {
      "en": "Deduce or conclude (information) from evidence and reasoning rather than from explicit statements. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/investigated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "investigated"
    },
    "definition": {
      "en": "Carry out research or study into a subject, typically one in a scientific or academic field so as to discover facts or information. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/located",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "located"
    },
    "definition": {
      "en": "Discover the exact place or position of something or someone. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/manipulated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "manipulated"
    },
    "definition": {
      "en": "Alter, edit, or move text or data on a computer; exert control or influence over a person or situation. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/modified",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "modified"
    },
    "definition": {
      "en": "Make partial or minor changes to something, typically so as to improve it or to make it less extreme. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/planned",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "planned"
    },
    "definition": {
      "en": "Form a detailed proposal or diagram for doing, arranging or achieving something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/predicted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "predicted"
    },
    "definition": {
      "en": "Say or estimate that a specified thing will happen in the future or will be a consequence of something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/produced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "produced"
    },
    "definition": {
      "en": "Show or provide something for consideration, inspection, or use. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/projected",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "projected"
    },
    "definition": {
      "en": "Estimate or forecast something on the basis of present trends. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/resolved",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "resolved"
    },
    "definition": {
      "en": "Settle or find a solution to a problem. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/revised",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "revised"
    },
    "definition": {
      "en": "Reconsider and alter something in the light of further evidence. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/searched",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "searched"
    },
    "definition": {
      "en": "Try to find something by looking or otherwise seeking carefully and thoroughly. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/solved",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "solved"
    },
    "definition": {
      "en": "Find an answer to, explanation for, or means of effectively dealing with a problem or mystery. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/summarized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "summarized"
    },
    "definition": {
      "en": "Give a brief statement of the main points of something. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/synthesized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "synthesized"
    },
    "definition": {
      "en": "Combine a number of things into a coherent whole. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/triaged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "triaged"
    },
    "definition": {
      "en": " Assign degrees of urgency to situations; or medically to wounded or ill patients. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/used",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "used"
    },
    "definition": {
      "en": "Take, hold, or deploy something as a means of accomplishing a purpose or achieving a result; employ. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/war-gamed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "war gamed"
    },
    "definition": {
      "en": "Engage in a campaign or course of action using the strategies of a military exercise. Use with the 'KSA' extension with a value of 'K', with the 'Category' extension with a value of 'Problem Solving', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/detected",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "detected"
    },
    "definition": {
      "en": "Discover or identify the presence or existence of something or someone. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Perception', and with the 'Interactivity Level' extension with a value of 1, 2, or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/felt",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "felt"
    },
    "definition": {
      "en": "Be aware of a person or object through touching or being touched. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Perception', and with the 'Interactivity Level' extension with a value of 1, 2, or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/heard",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "heard"
    },
    "definition": {
      "en": "Perceive with the ear the sound made by someone or something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Perception', and with the 'Interactivity Level' extension with a value of 1, 2, or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/scanned",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "scanned"
    },
    "definition": {
      "en": "Look at all parts of something carefully in order to detect some feature. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Perception', and with the 'Interactivity Level' extension with a value of 1, 2, or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/saw",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "saw"
    },
    "definition": {
      "en": "Perceive with the eyes; discern visually. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Perception', and with the 'Interactivity Level' extension with a value of 1, 2, or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/smelled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "smelled"
    },
    "definition": {
      "en": "Perceive or detect the odor or scent of something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Perception', and with the 'Interactivity Level' extension with a value of 1, 2, or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/tasted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "tasted"
    },
    "definition": {
      "en": "Perceive or experience the flavor of something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Perception', and with the 'Interactivity Level' extension with a value of 1, 2, or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/visualized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "visualized"
    },
    "definition": {
      "en": "Form a mental image of something; imagine. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Perception', and with the 'Interactivity Level' extension with a value of 1, 2, or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/assaulted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "assaulted"
    },
    "definition": {
      "en": "Make a physical attack on; carry out a military attack or raid on an enemy position. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/carried",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "carried"
    },
    "definition": {
      "en": "Support and move someone or something from one place to another. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/crept",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "crept"
    },
    "definition": {
      "en": "Move slowly and carefully, especially in order to avoid being heard or noticed. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/departed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "departed"
    },
    "definition": {
      "en": "Leave, typically in order to start a journey. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/fell",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "fell"
    },
    "definition": {
      "en": "Move downward, typically rapidly and freely without control, from a higher to a lower level. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/held",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "held"
    },
    "definition": {
      "en": "Grasp, carry, or support with ones arms or hands; (of a ship or an aircraft) continue to follow a particular course. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/jumped",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "lifted"
    },
    "definition": {
      "en": "Raise to a higher position or level. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/pulled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "pulled"
    },
    "definition": {
      "en": "Exert force on someone or something, typically by taking hold of them, in order to move or try to move them toward oneself or the origin of the force. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/ran",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "ran"
    },
    "definition": {
      "en": "Move at a speed faster than a walk, never having both or all the feet on the ground at the same time. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/stayed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "stayed"
    },
    "definition": {
      "en": "Remain in the same place. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/swam",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "swam"
    },
    "definition": {
      "en": "Propel the body through water by using the limbs or other bodily movement. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/threw",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "threw"
    },
    "definition": {
      "en": "Propel something with force through the air by a movement of the arm and hand. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/turned",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "turned"
    },
    "definition": {
      "en": "Move or cause to move in a circular direction wholly or partly around an axis or point. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/twisted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "twisted"
    },
    "definition": {
      "en": "Form into a bent, curling, or distorted shape. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/wore",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "wore"
    },
    "definition": {
      "en": "Have on ones body or a part of ones body as clothing, decoration, protection, or for some other purpose. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Gross Motor Skills', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/advanced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "advanced"
    },
    "definition": {
      "en": "Move forward, typically in a purposeful way. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/controlled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "controlled"
    },
    "definition": {
      "en": "The power to influence or direct peoples behavior or the course of events; the ability to manage a machine, vehicle, or other moving object. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/followed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "followed"
    },
    "definition": {
      "en": "Go or come after a person or thing proceeding ahead; move or travel behind. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/guided",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "guided"
    },
    "definition": {
      "en": "Show or indicate the way to someone or something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/hovered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "hovered"
    },
    "definition": {
      "en": "Remain in one place in the air. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/landed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "landed"
    },
    "definition": {
      "en": "Come down through the air and alight on the ground; bring an aircraft or spacecraft or similar object to the ground or the surface of water, especially in a controlled way. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/maneuvered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "maneuvered"
    },
    "definition": {
      "en": "Move skillfully or carefully; guide or manipulate something in order to achieve an end. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/regulated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "regulated"
    },
    "definition": {
      "en": "Control or maintain the rate or speed of a machine or process so that it operates properly. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/steered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "steered"
    },
    "definition": {
      "en": "Guide or control the movement of a vehicle, vessel, or aircraft, for example by turning a wheel or operating a rudder. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/took-off",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "took off"
    },
    "definition": {
      "en": "Become airborne. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/tracked",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "tracked"
    },
    "definition": {
      "en": "Follow the course or trail of someone or something, typically in order to find them or note their location at various points. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/traversed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "traversed"
    },
    "definition": {
      "en": "Travel across or through a location. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Continuous Movement', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/abled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "abled"
    },
    "definition": {
      "en": "Gain a quality sufficient to perform a task. NOTE: Able intends to show readiness from a military perspective. While technical it is not a verb, The DoD utilizes it as active. Example, Able yourself! Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/assisted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "assisted"
    },
    "definition": {
      "en": "Help someone, typically by doing a share of the work. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/challenged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "challenged"
    },
    "definition": {
      "en": "Make a rival claim to or threaten someones hold on a position. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/crossed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "crossed"
    },
    "definition": {
      "en": "Pass in an opposite or different direction; intersect. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/delayed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "delayed"
    },
    "definition": {
      "en": "Postpone or defer an action. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/guarded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "guarded"
    },
    "definition": {
      "en": "Watch over in order to protect or control. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/prepared",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "prepared"
    },
    "definition": {
      "en": "Make something or someone ready for use or consideration. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/primed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "primed"
    },
    "definition": {
      "en": "Make something ready for use or action, in particular by using oil or fuel in a piece of machinery or a firearm. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/readied",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "readied"
    },
    "definition": {
      "en": "Prepare someone or something for an activity or purpose. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/set",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "set"
    },
    "definition": {
      "en": "Put, lay, stand, or cause something in a specified place or position. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/stood-to",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "stood to"
    },
    "definition": {
      "en": "Stand ready for an attack, especially one before dawn or after dark. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Readiness', and with the 'Interactivity Level' extension with a value of 2 or 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/accessed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "accessed"
    },
    "definition": {
      "en": "Approach or enter a place; obtain, examine, or retrieve data or a file. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/activated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "activated"
    },
    "definition": {
      "en": "Make something active or operative. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/actuated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "actuated"
    },
    "definition": {
      "en": "Cause a machine or device to operate. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/adjusted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "adjusted"
    },
    "definition": {
      "en": "Alter or move something slightly in order to achieve the desired fit, appearance, or result. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/administered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "administered"
    },
    "definition": {
      "en": "Manage and be responsible for the operation or use of a resource, team, organization, etc. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/aligned",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "aligned"
    },
    "definition": {
      "en": "Lie in a straight line, or in correct relative positions. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/archived",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "archived"
    },
    "definition": {
      "en": "Place or store something in an archive. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/armed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "armed"
    },
    "definition": {
      "en": "Supply or provide with weapons; activate a weapon so that it is ready. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/assembled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "assembled"
    },
    "definition": {
      "en": "Fit together the separate component parts of a machine or other object; bring people or things together for a common purpose. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/attached",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "attached"
    },
    "definition": {
      "en": "Fasten; join one thing to another. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/balanced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "balanced"
    },
    "definition": {
      "en": "Establish equal or appropriate proportions of elements; keep or put something in a steady position. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/breached",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "breached"
    },
    "definition": {
      "en": "Make a gap in and break through a wall, barrier, or defense. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/calibrated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "calibrated"
    },
    "definition": {
      "en": "Correlate the readings of an instrument with those of a standard in order to check the instruments accuracy.; adjust experimental results to take external factors into account or to allow comparison with other data. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/camouflaged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "camouflaged"
    },
    "definition": {
      "en": "Hide or disguise the presence of (a person, animal, or object) by means of camouflage. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/centered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "centered"
    },
    "definition": {
      "en": "Place in the middle (physical); have or cause to have something as a major concern or theme (mental). Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/charged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "charged"
    },
    "definition": {
      "en": "Rush forward in attack; store electrical energy in a battery or battery-operated device; entrust someone with a task as a duty or responsibility. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/cleaned",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "cleaned"
    },
    "definition": {
      "en": "Make something or someone free of dirt or unwanted matter, marks, or mess, especially by washing, wiping, or brushing. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/cleared",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "cleared"
    },
    "definition": {
      "en": "Remove an obstruction or unwanted item from somewhere. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/closed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "closed"
    },
    "definition": {
      "en": "Move or cause to move so as to cover an opening. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/collected",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "collected"
    },
    "definition": {
      "en": "Bring or gather together things. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/connected",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "connected"
    },
    "definition": {
      "en": "Bring together or into contact so that a real or notional link is established. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/covered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "covered"
    },
    "definition": {
      "en": "Put something such as a cloth or lid on top of or in front of something in order to protect or conceal it; aim a gun at someone in order to prevent them from moving or escaping. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/debriefed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "debriefed"
    },
    "definition": {
      "en": "Question someone, typically in a military position about a completed mission or undertaking. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/debugged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "debugged"
    },
    "definition": {
      "en": "Identify and remove errors from computer hardware or software; detect and remove concealed microphones from an area. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/decontaminated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "decontaminated"
    },
    "definition": {
      "en": "Neutralize or remove dangerous substances, radioactivity, or germs from an area, object, or person. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/delivered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "delivered"
    },
    "definition": {
      "en": "Bring and hand over an object; launch or aim an attack. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/destroyed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "destroyed"
    },
    "definition": {
      "en": "Put an end to the existence of something by damaging or attacking it. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/diagnosed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "diagnosed"
    },
    "definition": {
      "en": "Identify the nature of an illness or other problem by examination of the symptoms. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/dug",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "dug"
    },
    "definition": {
      "en": "Break up and move earth with a tool, machine, or with hands. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/disassembled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "disassembled"
    },
    "definition": {
      "en": "Take something apart. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/disconnected",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "disconnected"
    },
    "definition": {
      "en": "Break the connection of or between. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/disengaged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "disengaged"
    },
    "definition": {
      "en": "Separate or release someone or something from something to which they are attached or connected; remove troops from an area of conflict. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/dismantled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "dismantled"
    },
    "definition": {
      "en": "Take a machine or structure to pieces. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/dispatched",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "dispatched"
    },
    "definition": {
      "en": "Send off to a destination or for a purpose; eliminate a task, problem, or opponent quickly and efficiently. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/displaced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "displaced"
    },
    "definition": {
      "en": "Cause something to move from its proper or usual place. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/displayed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "displayed"
    },
    "definition": {
      "en": "Make a prominent exhibition of something in a place where it can be easily seen. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/disposed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "disposed"
    },
    "definition": {
      "en": "Eliminating something or someone by throwing away, removing, or destroying. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/disseminated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "disseminated"
    },
    "definition": {
      "en": "Spread or disperse something, especially information widely. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/drove",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "drove"
    },
    "definition": {
      "en": "Propel or carry along by force in a specified direction; operate and control the direction and speed of a vehicle. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/egressed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "egressed"
    },
    "definition": {
      "en": "Go out of or leave a place. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/elevated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "elevated"
    },
    "definition": {
      "en": "Raise or lift something up to a higher position. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/emplaced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "emplaced"
    },
    "definition": {
      "en": "Put in place or position. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/employed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "employed"
    },
    "definition": {
      "en": "Make use of something or someone; provide work to someone for payment. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/engaged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "engaged"
    },
    "definition": {
      "en": "Occupy, attract, or involve someone; enter into conflict or combat with an enemy. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/energized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "energized"
    },
    "definition": {
      "en": "Give energy, vitality and/or enthusiasm to someone or something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/entered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "entered"
    },
    "definition": {
      "en": "Come or go into a place. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/established",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "established"
    },
    "definition": {
      "en": "Show something to be true or certain by determining the facts; achieve permanent acceptance or recognition for something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/evacuated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "evacuated"
    },
    "definition": {
      "en": "Remove someone or something from a place of danger to a safe place. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/exchanged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "exchanged"
    },
    "definition": {
      "en": "Give or receive one thing in place of another. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/filled-out",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "filled out"
    },
    "definition": {
      "en": "Enter data into a form. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/fired",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "fired"
    },
    "definition": {
      "en": "Discharge a gun or other weapon in order to explosively propel ammunition. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/fit",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "fit"
    },
    "definition": {
      "en": "Provide, furnish, or equip something or someone so that it is suitable for a purpose. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/fueled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "fueled"
    },
    "definition": {
      "en": "Supply with fuel. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/grounded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "grounded"
    },
    "definition": {
      "en": "Prohibit or prevent a pilot or an aircraft from flying; (with reference to a ship) run or go aground. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/hardened",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "hardened"
    },
    "definition": {
      "en": "Make or become hard or harder. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/hoisted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "hoisted"
    },
    "definition": {
      "en": "Raise something by means of ropes and pulleys. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/initialized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "initialized"
    },
    "definition": {
      "en": "Set to the value or put in the condition appropriate to the start of an operation. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/input",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "input"
    },
    "definition": {
      "en": "Put data into a computer. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/inserted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "inserted"
    },
    "definition": {
      "en": "Place, fit, or thrust something into another thing. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/inspected",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "inspected"
    },
    "definition": {
      "en": "Examine someone or something to ensure that they reach an official standard. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/installed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "installed"
    },
    "definition": {
      "en": "Place or fix equipment or machinery in position ready for use; load software into a computer. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/integrated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "integrated"
    },
    "definition": {
      "en": "Combine one thing with another so that they become a whole. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/intercepted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "intercepted"
    },
    "definition": {
      "en": "Obstruct someone or something so as to prevent them from continuing to a destination. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/isolated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "isolated"
    },
    "definition": {
      "en": "Cause a person, animal, or place to be or remain alone or apart from others. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/issued",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "issued"
    },
    "definition": {
      "en": "Formally send out or make known. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/jacked",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "jacked"
    },
    "definition": {
      "en": "Use of a specialized tool in order to elevate an object or machinery. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/launched",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "launched"
    },
    "definition": {
      "en": "Start or set in motion an activity or enterprise; send a missile, satellite, vessel, or spacecraft on its course or into orbit. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/loaded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "loaded"
    },
    "definition": {
      "en": "Put a load or large amount of something on or in a vehicle, ship, container, etc.; charge a firearm with ammunition. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/logged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "logged"
    },
    "definition": {
      "en": "Enter an incident or fact in the log of a ship or aircraft or in another systematic record. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/lubricated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "lubricated"
    },
    "definition": {
      "en": "Apply a substance such as oil or grease to an engine or component to minimize friction and allow smooth movement. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/maintained",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "maintained"
    },
    "definition": {
      "en": "Cause or enable a condition or state of affairs to continue. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/managed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "managed"
    },
    "definition": {
      "en": "Be in charge of a group, establishment, or undertaking; administer; run or handle something in a successful manner. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/mounted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "mounted"
    },
    "definition": {
      "en": "Place or fix a person or an object in its operating position. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/moved",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "moved"
    },
    "definition": {
      "en": "Change or cause to change from one state, location, opinion, sphere, or activity to another. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/navigated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "navigated"
    },
    "definition": {
      "en": "Plan and direct the route or course of a ship, aircraft, or other form of transportation, especially by using instruments or maps. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/obtained",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "obtained"
    },
    "definition": {
      "en": "Get, acquire, or secure something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/opened",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "opened"
    },
    "definition": {
      "en": "Move or adjust a closed object so as to allow access and/or view. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/operated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "operated"
    },
    "definition": {
      "en": "Control the functioning of a machine, process, or system; perform a surgical procedure. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/ordered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "ordered"
    },
    "definition": {
      "en": "Give an authoritative direction or instruction to do something; arrange something in a methodical or appropriate way. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/parked",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "parked"
    },
    "definition": {
      "en": "Deposit and leave something such as a vehicle in a place until required. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/performed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "performed"
    },
    "definition": {
      "en": "Carry out, accomplish, or fulfill an action, task, or function. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/placed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "placed"
    },
    "definition": {
      "en": "Put in a particular position. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/plotted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "plotted"
    },
    "definition": {
      "en": "Mark a route, point or position on a chart or graph. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/policed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "policed"
    },
    "definition": {
      "en": "Enforce regulations. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/positioned",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "positioned"
    },
    "definition": {
      "en": "Put or arrange someone or something in a particular place or way. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/posted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "posted"
    },
    "definition": {
      "en": "Display something within public view. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/pressed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "pressed"
    },
    "definition": {
      "en": "Move or cause to move into a position of contact with something by exerting continuous physical force. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/pressurized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "pressurized"
    },
    "definition": {
      "en": "Produce or maintain raised pressure artificially in a gas or its container. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/processed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "processed"
    },
    "definition": {
      "en": "Perform a series of mechanical or chemical operations on something in order to change or preserve it; operate on computer data by means of a program; deal with someone using an official and established procedure. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/procured",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "procured"
    },
    "definition": {
      "en": "Obtain something, especially with care or effort. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/provided",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "provided"
    },
    "definition": {
      "en": "Make available for use; supply. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/published",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "published"
    },
    "definition": {
      "en": "Print, issue, or make available online written content so as to make it generally known. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/raised",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "raised"
    },
    "definition": {
      "en": "Lift or move to a higher position or level. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/ranged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "ranged"
    },
    "definition": {
      "en": "Obtain the range of a target by adjustment after firing past it or short of it, or by the use of radar or laser equipment; vary or extend between specified limits; travel or wander over a wide area. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reached",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reached"
    },
    "definition": {
      "en": "Stretch out an arm in a specified direction in order to touch or grasp something; arrive at; get as far as. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/received",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "received"
    },
    "definition": {
      "en": "Be given, presented with, or paid something; take delivery of something sent or communicated. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/recorded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "recorded"
    },
    "definition": {
      "en": "Set down in writing or other permanent form for later reference, especially officially; convert sound or a performance into permanent form for later reproduction. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reestablished",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reestablished"
    },
    "definition": {
      "en": "Establish something again or anew. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/refueled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "refueled"
    },
    "definition": {
      "en": "Supply something such as a vehicle with more fuel. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/released",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "released"
    },
    "definition": {
      "en": "Allow something to move, act, or flow freely. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/relocated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "relocated"
    },
    "definition": {
      "en": "Move to a new place. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/removed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "removed"
    },
    "definition": {
      "en": "Take something away or off from the position occupied; get rid of. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/repaired",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "repaired"
    },
    "definition": {
      "en": "Fix or mend something damaged or faulty. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/replaced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "replaced"
    },
    "definition": {
      "en": "Take the place of something or someone else. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/replenished",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "replenished"
    },
    "definition": {
      "en": "Fill something up again. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reset",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reset"
    },
    "definition": {
      "en": "Set again or differently. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/retrieved",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "retrieved"
    },
    "definition": {
      "en": "Get or bring something back; regain possession of. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/returned",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "returned"
    },
    "definition": {
      "en": "Come or go back to a place or person; give, put, or send something back to a place or person. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/rotated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "rotated"
    },
    "definition": {
      "en": "Move or cause to move in a circle around an axis or center. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/saved",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "saved"
    },
    "definition": {
      "en": "Keep safe or rescue someone or something from harm or danger; keep and store up something for future use. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/secured",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "secured"
    },
    "definition": {
      "en": "Fix or attach something firmly so that it cannot be moved or lost; protect against threats; make safe; capture. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/sent",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "sent"
    },
    "definition": {
      "en": "Cause to go or be taken to a particular destination. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/serviced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "serviced"
    },
    "definition": {
      "en": "Perform routine maintenance or repair work on something such as a vehicle or machine. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/shut-down",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "shut down"
    },
    "definition": {
      "en": "Cease or cause something to cease operation. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/sighted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "sighted"
    },
    "definition": {
      "en": "Manage to see or observe someone or something; catch an initial glimpse of; take aim by looking through the sights of a gun. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/signaled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "signaled"
    },
    "definition": {
      "en": "Transmit information or instructions by means of a gesture, action, or sound. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/splinted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "splinted"
    },
    "definition": {
      "en": "Secure a broken limb with a splint or splints. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/squeezed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "squeezed"
    },
    "definition": {
      "en": "Firmly apply pressure on something with one’s hand or finger; shoot a round or shot from a gun. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/stockpiled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "stockpiled"
    },
    "definition": {
      "en": "Accumulate a large stock of goods or materials. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/stored",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "stored"
    },
    "definition": {
      "en": "Keep or accumulate something for future use; retain or enter information for future electronic retrieval. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/stowed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "stowed"
    },
    "definition": {
      "en": "Pack or store an object carefully and neatly in a particular place. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/struck",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "struck"
    },
    "definition": {
      "en": "Hit forcibly and deliberately with ones hand or a weapon or other implement. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/submitted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "submitted"
    },
    "definition": {
      "en": "Accept or yield to a superior force or to the authority or will of another person; present a proposal, application, or other document to a person or body for consideration or judgment. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/supervised",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "supervised"
    },
    "definition": {
      "en": "Observe and direct the execution of a task, project, or activity. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/supported",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "supported"
    },
    "definition": {
      "en": "Bear all or part of the weight of; hold up; give assistance to. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/swept",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "swept"
    },
    "definition": {
      "en": "Move swiftly and smoothly; cover an entire area with a gun; examine a place or thing for electronic listening devices; search an area for something; clean an area. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/took",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "took"
    },
    "definition": {
      "en": "Reach for and hold; gain or aquire. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/took-charge",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "took charge"
    },
    "definition": {
      "en": "Assume control or responsibility. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/tapped",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "tapped"
    },
    "definition": {
      "en": "Exploit or draw a supply from a resource; connect a device to so that conversation can be listened to secretly. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/tested",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "tested"
    },
    "definition": {
      "en": "Take measures to check the quality, performance, or reliability of something or someone. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/tightened",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "tightened"
    },
    "definition": {
      "en": "Make or become tight or tighter. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/traced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "traced"
    },
    "definition": {
      "en": "Find or discover by investigation; copy by drawing; give an outline. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/transferred",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "transferred"
    },
    "definition": {
      "en": "Move from one place to another. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/transmitted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "transmitted"
    },
    "definition": {
      "en": "Cause something to pass on from one place or person to another; broadcast or send out. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/transported",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "transported"
    },
    "definition": {
      "en": "Take or carry people or goods from one place to another by means of a vehicle, aircraft, or ship. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/treated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "treated"
    },
    "definition": {
      "en": "Behave toward or deal with in a certain way; give medical care or attention to; negotiate terms with someone, especially an opponent. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/troubleshot",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "troubleshot"
    },
    "definition": {
      "en": "Solve serious problems for an organization; trace and correct faults in a mechanical or electronic system. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/typed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "typed"
    },
    "definition": {
      "en": "Write something on a typewriter or computer by pressing the keys. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/unloaded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "unloaded"
    },
    "definition": {
      "en": "Remove goods from a vehicle, ship, container, etc. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/updated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "updated"
    },
    "definition": {
      "en": "Provide the latest information. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/utilized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "utilized"
    },
    "definition": {
      "en": "Make practical and effective use of. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/wrote",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "wrote"
    },
    "definition": {
      "en": "Mark letters, words, or other symbols on a surface or in a computer system. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/zeroed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "zeroed"
    },
    "definition": {
      "en": "Adjust an instrument to zero; set the sights of a gun or weapon for firing. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Mechanism', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/acclimatized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "acclimatized"
    },
    "definition": {
      "en": "Respond physiologically or behaviorally to changes in a complex of environmental factors. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/accommodated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "accommodated"
    },
    "definition": {
      "en": "Provide lodging or sufficient space for; adapt the environment or situation to meet the needs of someone. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/adapted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "adapted"
    },
    "definition": {
      "en": "Make something suitable for a new use or purpose; modify. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/ambushed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "ambushed"
    },
    "definition": {
      "en": "Make a surprise attack on someone from a concealed position. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/attacked",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "attacked"
    },
    "definition": {
      "en": "Take aggressive action against a place or enemy forces with weapons or armed force. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/bypassed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "bypassed"
    },
    "definition": {
      "en": "Go past or around. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/conducted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "conducted"
    },
    "definition": {
      "en": "Organize and carry out. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/deployed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "deployed"
    },
    "definition": {
      "en": "Move troops or equipment into position for military action. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/directed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "directed"
    },
    "definition": {
      "en": "Control the operations of; manage or govern. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/drew",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "drew"
    },
    "definition": {
      "en": "Produce a picture or diagram by making lines and marks; extract an object or liquid from a container or receptacle. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/evaded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "evaded"
    },
    "definition": {
      "en": "Escape or avoid. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/infiltrated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "infiltrated"
    },
    "definition": {
      "en": "Enter or gain access to an organization, place, etc. surreptitiously and gradually. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/laid",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "laid"
    },
    "definition": {
      "en": "Put down; follow a specified nautical course. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/led",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "led"
    },
    "definition": {
      "en": "Be in charge or command of; organize and direct. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/mapped",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "mapped"
    },
    "definition": {
      "en": "Represent an area on a map; make a map of. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/neutralized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "neutralized"
    },
    "definition": {
      "en": "Render something or someone ineffective or harmless by applying an opposite force or effect. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/occupied",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "occupied"
    },
    "definition": {
      "en": "Fill or take up a space or time; take control of a place. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/oriented",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "oriented"
    },
    "definition": {
      "en": "Align or position something or someone to a specified position or condition. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/packed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "packed"
    },
    "definition": {
      "en": "Fill baggage or place something in a container, especially for transportation or storage. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/patrolled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "patrolled"
    },
    "definition": {
      "en": "Keep watch over an area by regularly walking or traveling around or through it. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/prevented",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "prevented"
    },
    "definition": {
      "en": "Keep something from happening or arising; make someone unable to do something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/programmed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "programmed"
    },
    "definition": {
      "en": "Provide a computer or other machine with coded instructions for the automatic performance of a particular task. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/protected",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "protected"
    },
    "definition": {
      "en": "Keep safe from harm or injury. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/queued",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "queued"
    },
    "definition": {
      "en": "Take ones place in a line or sequence. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reconciled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reconciled"
    },
    "definition": {
      "en": "Cause to coexist in harmony; make or show to be compatible. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/recovered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "recovered"
    },
    "definition": {
      "en": "Return to a normal state of health, mind, or strength; regain possession of something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reduced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reduced"
    },
    "definition": {
      "en": "Make smaller or less in amount, degree, or size. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/relieved",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "relieved"
    },
    "definition": {
      "en": "Release someone from duty by taking their place; take a burden, pain, or distress from someone. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/suppressed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "suppressed"
    },
    "definition": {
      "en": "Prevent the development, action, or expression of a feeling, impulse, idea, etc.; restrain. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/tailored",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "tailored"
    },
    "definition": {
      "en": "Make or adapt for a particular purpose or person. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/tempered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "tempered"
    },
    "definition": {
      "en": "Improve the consistency or resiliency of a substance by heating it or adding particular substances to it; serve as a neutralizing or counterbalancing force to something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/trained",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "trained"
    },
    "definition": {
      "en": "Teach a particular skill or type of behavior through practice and instruction. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Adaptation', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/caused",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "caused"
    },
    "definition": {
      "en": "Make something happen. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Origination', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/constructed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "constructed"
    },
    "definition": {
      "en": "Build something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Origination', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/contrived",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "contrived"
    },
    "definition": {
      "en": "Create or bring about an object or a situation by deliberate use of skill and artifice. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Origination', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/corrected",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "corrected"
    },
    "definition": {
      "en": "Put (an error or fault) right. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Origination', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/invented",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "invented"
    },
    "definition": {
      "en": "Create or design something that has not existed before; be the originator of. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Origination', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/made",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "made"
    },
    "definition": {
      "en": "Form something by putting parts together or combining substances; construct; create. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Origination', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/originated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "originated"
    },
    "definition": {
      "en": "Create or initiate something. Use with the 'KSA' extension with a value of 'S', with the 'Category' extension with a value of 'Origination', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/attended-closely",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "attended closely"
    },
    "definition": {
      "en": "Manage with care. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {

    "id": "https://w3id.org/xapi/dod-isd/verbs/listened",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "listened"
    },
    "definition": {
      "en": "Make an effort to hear something; be alert and ready to hear something. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/listened-attentively",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "listened attentively"
    },
    "definition": {
      "en": "Make an significant effort to hear something; be alert and ready to hear something while paying close attention. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/monitored",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "monitored"
    },
    "definition": {
      "en": "Maintain regular surveillance over. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/observed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "observed"
    },
    "definition": {
      "en": "Watch someone or something carefully and attentively. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/perceived",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "perceived"
    },
    "definition": {
      "en": "Interpret or look on someone or something in a particular way; regard as. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/recognized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "recognized"
    },
    "definition": {
      "en": "Acknowledge the existence, validity, or legality of someone or something. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reconnoitered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reconnoitered"
    },
    "definition": {
      "en": "Make a military observation of a region. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/showed-awareness",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "showed awareness"
    },
    "definition": {
      "en": "Demonstrate knowledge or perception of a situation or fact. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/showed-sensitivity",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "showed sensitivity"
    },
    "definition": {
      "en": "Be considerate, take care. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/waited",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "waited"
    },
    "definition": {
      "en": "Stay where one is or delay action until a particular time or until something else happens. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Receiving', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/accomplished",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "accomplished"
    },
    "definition": {
      "en": "Achieve or complete successfully. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/achieved",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "achieved"
    },
    "definition": {
      "en": "Successfully bring about or reach a desired objective, level, or result by effort, skill, or courage. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/acknowledged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "acknowledged"
    },
    "definition": {
      "en": "Recognize the fact or importance or quality of something. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/announced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "announced"
    },
    "definition": {
      "en": "Make a public and typically formal declaration about a fact, occurrence, or intention. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/asked",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "asked"
    },
    "definition": {
      "en": "Say something in order to obtain an answer or some information. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/communicated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "communicated"
    },
    "definition": {
      "en": "Share or exchange information, news, or ideas. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/completed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "completed"
    },
    "definition": {
      "en": "Make something whole or perfect. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/completed-assignment",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "completed assignment"
    },
    "definition": {
      "en": "Finish making or doing a given task. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/complied",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "complied"
    },
    "definition": {
      "en": "Act in accordance with a wish or command. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/demonstrated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "demonstrated"
    },
    "definition": {
      "en": "Show or express a feeling or quality by ones actions. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/described",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "described"
    },
    "definition": {
      "en": "Give an account in words of someone or something, including all the relevant characteristics, qualities, or events. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/encoded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "encoded"
    },
    "definition": {
      "en": "Convert into a coded form. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/executed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "executed"
    },
    "definition": {
      "en": "Carry out or put into effect a plan, order, or course of action. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/gave",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "gave"
    },
    "definition": {
      "en": "Freely transfer the possession of something to someone; hand over to. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/indicated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "indicated"
    },
    "definition": {
      "en": "Suggest as a desirable or necessary course of action. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/interpreted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "interpreted"
    },
    "definition": {
      "en": "Explain the meaning of information, words, or actions. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/notified",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "notified"
    },
    "definition": {
      "en": "Inform someone of something, typically in a formal or official manner. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/obeyed-rules",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "obeyed rules"
    },
    "definition": {
      "en": "Comply with the command, direction, or request of a person or a law; submit to the authority of. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reacted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reacted"
    },
    "definition": {
      "en": "Respond or behave in a particular way in response to something. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reported",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reported"
    },
    "definition": {
      "en": "Give a spoken or written account of something that one has observed, heard, done, or investigated; present oneself formally as having arrived at a particular place or as ready to do something. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/requested",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "requested"
    },
    "definition": {
      "en": "Politely or formally ask for. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/responded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "responded"
    },
    "definition": {
      "en": "Act or behave in reaction to someone or something. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/showed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "showed"
    },
    "definition": {
      "en": "Demonstrate or prove. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Responding', and with the 'Interactivity Level' extension with a value of 2, 3, or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/alerted",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "alerted"
    },
    "definition": {
      "en": "Warn someone of a danger, threat, or problem, typically with the intention of having it avoided or dealt with. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/appreciated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "appreciated"
    },
    "definition": {
      "en": "Recognize the full worth of someone or something. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/approved",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "approved"
    },
    "definition": {
      "en": "Officially agree to or accept as satisfactory. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/assessed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "assessed"
    },
    "definition": {
      "en": "Evaluate or estimate the nature, ability, or quality of. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/authenticated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "authenticated"
    },
    "definition": {
      "en": "Validate. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/believed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "believed"
    },
    "definition": {
      "en": "Hold something as an opinion; think or suppose. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/canceled",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "canceled"
    },
    "definition": {
      "en": "Annul or revoke a formal arrangement which is in effect. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/chose",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "chose"
    },
    "definition": {
      "en": "Pick out or select someone or something as being the best or most appropriate of two or more alternatives. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/judged",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "judged"
    },
    "definition": {
      "en": "Form an opinion or conclusion about. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/justified",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "justified"
    },
    "definition": {
      "en": "Show or prove to be right or reasonable. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/prioritized",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "prioritized"
    },
    "definition": {
      "en": "Determine the order for dealing with a series of items or tasks according to their relative importance. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/proposed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "proposed"
    },
    "definition": {
      "en": "Put forward an idea or plan for consideration or discussion by others. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/qualified",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "qualified"
    },
    "definition": {
      "en": "Be or make properly entitled to be classed in a particular way. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reassessed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reassessed"
    },
    "definition": {
      "en": "Consider or assess again, especially while paying attention to new or different factors. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/reviewed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "reviewed"
    },
    "definition": {
      "en": "Examine or assess something formally with the possibility or intention of instituting change if necessary. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/shared",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "shared"
    },
    "definition": {
      "en": "Have or provide a part in something. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/studied",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "studied"
    },
    "definition": {
      "en": "Investigate and analyze a subject or situation in detail. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/validated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "validated"
    },
    "definition": {
      "en": "Check or prove the validity or accuracy of something. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/verified",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "verified"
    },
    "definition": {
      "en": "Make sure or demonstrate that something is true, accurate, or justified. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Valuing', and with the 'Interactivity Level' extension with a value of 3 or 4."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/allowed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "allowed"
    },
    "definition": {
      "en": "Give the necessary time or opportunity for something or someone; make provision or provide scope for something. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Competence', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/altered",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "altered"
    },
    "definition": {
      "en": "Change or cause to change in character or composition, typically in a comparatively small but significant way. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Competence', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/assumed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "assumed"
    },
    "definition": {
      "en": "Take or begin to have power or responsibility. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Competence', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/commanded",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "commanded"
    },
    "definition": {
      "en": "Have authority over; be in charge of a unit. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Competence', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/coordinated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "coordinated"
    },
    "definition": {
      "en": "Bring the different elements of a complex activity or organization into a relationship that will ensure efficiency or harmony. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Competence', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/enforced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "enforced"
    },
    "definition": {
      "en": "Compel observance of or compliance with a law, rule, or obligation. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Competence', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/ensured",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "ensured"
    },
    "definition": {
      "en": "Make certain that something shall occur or be the case. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Competence', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/influenced",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "influenced"
    },
    "definition": {
      "en": "Have an impact on; affect. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Competence', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/prescribed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "prescribed"
    },
    "definition": {
      "en": "State authoritatively or as a rule that an action or procedure should be carried out. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Competence', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/served",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "served"
    },
    "definition": {
      "en": "Perform duties or services for another person or an organization. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Competence', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/conceived",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "conceived"
    },
    "definition": {
      "en": "Form or devise a plan or idea in the mind. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Innovation', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/conjectured",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "conjectured"
    },
    "definition": {
      "en": "Form an opinion or supposition about something on the basis of incomplete information. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Innovation', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/developed",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "developed"
    },
    "definition": {
      "en": "Start to exist, experience, or possess. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Innovation', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/devised",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "devised"
    },
    "definition": {
      "en": "Plan or invent a complex procedure, system, or mechanism by careful thought. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Innovation', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/formulated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "formulated"
    },
    "definition": {
      "en": "Create or devise methodically a strategy or a proposal. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Innovation', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/imagined",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "imagined"
    },
    "definition": {
      "en": "Form a mental image or concept of something or someone. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Innovation', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/verbs/innovated",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "Verb",
    "prefLabel": {
      "en": "innovated"
    },
    "definition": {
      "en": "Introduce something new, especially a product. Use with the 'KSA' extension with a value of 'A', with the 'Category' extension with a value of 'Innovation', and with the 'Interactivity Level' extension with a value of 3."
    }
  }, {
    "id": "https://w3id.org/xapi/dod-isd/extensions/interactivity-level",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "Interactivity Level"
    },
    "definition": {
      "en": "Levels of Interactivity are general classes of richness, sophistication and realism of interactivity the student experiences in Computer Based Training (CBT)."
    },
    "inlineSchema": "{\"type\": \"integer\", \"enum\": [1, 2, 3, 4]}"
  }, {
    "id": "https://w3id.org/xapi/dod-isd/extensions/category",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "Category"
    },
    "definition": {
      "en": "A further descriptive level for verbs within KSAs."
    },
    "inlineSchema": "{\"type\": \"string\", \"enum\": [\"Fact Learning\", \"Rule Learning\", \"Procedure Learning\", \"Discrimination Learning\", \"Problem Solving\", \"Perception\", \"Gross Motor Skills\", \"Continuous Movement\", \"Readiness\", \"Mechanism\", \"Adaptation\", \"Origination\", \"Receiving\", \"Responding\", \"Valuing\", \"Competence\", \"Innovation\"]}"
  }, {
    "id": "https://w3id.org/xapi/dod-isd/extensions/ksa",
    "inScheme": "https://w3id.org/xapi/dod-isd/v1.0",
    "type": "ContextExtension",
    "prefLabel": {
      "en": "KSA"
    },
    "definition": {
      "en": "Knowledge, Skills, Attitude"
    },
    "inlineSchema": "{\"type\": \"string\", \"enum\": [\"Knowledge\", \"Skills\", \"Attitude\"]}"
  }]
}];

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getActorName = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _querystring = __webpack_require__(53);

var _querystring2 = _interopRequireDefault(_querystring);

var _concepts = __webpack_require__(69);

var _profiledata = __webpack_require__(147);

var _profiledata2 = _interopRequireDefault(_profiledata);

var _pickFnCall = __webpack_require__(146);

var _pickFnCall2 = _interopRequireDefault(_pickFnCall);

var _statement = __webpack_require__(148);

var _statement2 = _interopRequireDefault(_statement);

var _statementLog = __webpack_require__(150);

var _statementLog2 = _interopRequireDefault(_statementLog);

var _uiConsole = __webpack_require__(50);

var _uiConsole2 = _interopRequireDefault(_uiConsole);

var _statementHelper = __webpack_require__(149);

var _statementHelper2 = _interopRequireDefault(_statementHelper);

var _toggleState = __webpack_require__(151);

var _toggleState2 = _interopRequireDefault(_toggleState);

var _revealxapi = __webpack_require__(373);

var _revealxapi2 = _interopRequireDefault(_revealxapi);

var _ramda = __webpack_require__(21);

var _ramda2 = _interopRequireDefault(_ramda);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const defer = __webpack_require__(159);
const TinCan = __webpack_require__(365);

// TinCan.enableDebug()

const private_state = () => {};

let statement_log, statement;

const state = Object.seal({
  privateData: new WeakMap([[private_state, {
    dev_mode: true,
    send_enabled: true,
    statement_helper: false,
    debug: false,
    lang_iso: 'en',
    local_iso: 'US',
    state_toggler: true
  }]]),
  get c() {
    return this.privateData.get(private_state);
  },
  set update(newdata) {
    const setkeys = _ramda2.default.keys(newdata);
    const currkeys = _ramda2.default.keys(this.c);
    if (_ramda2.default.intersection(setkeys, currkeys).length !== setkeys.length) {
      throw new Error(`Not expected ${_ramda2.default.difference(setkeys, currkeys)}`);
    }

    this.privateData.set(private_state, _extends({}, this.c, newdata));
  },
  set dev_mode(val) {
    this.update = {
      dev_mode: Boolean(val),
      send_enabled: !Boolean(val),
      statement_helper: Boolean(val),
      debug: Boolean(val),
      state_toggler: Boolean(val)
    };
  },
  get dev_mode() {
    return this.c.dev_mode;
  },
  set lang_iso(val) {
    this.update = {
      lang_iso: val
    };
  },
  get lang_iso() {
    return this.c.lang_iso;
  },
  set local_iso(val) {
    this.update = {
      local_iso: val
    };
  },
  get local_iso() {
    return this.c.local_iso;
  },
  get statement_helper() {
    return this.c.statement_helper;
  },
  set statement_helper(val) {
    this.c.statement_helper = Boolean(val);
  },
  get send_enabled() {
    return this.c.send_enabled;
  },
  set send_enabled(val) {
    this.c.send_enabled = Boolean(val);
  },
  get debug() {
    return this.c.debug;
  },
  set debug(val) {
    this.c.debug = Boolean(val);
  },
  get toggler() {
    return this.c.state_toggler;
  },
  set toggler(val) {
    this.c.state_toggler = Boolean(val);
  }
});

const XAPI = tincan => {
  return {
    saveStatements: (statements, saveStatementCallback) => {
      if (!Array.isArray(statements)) {
        throw new Error('expecting array');
      }
      statements.map(ea => _uiConsole2.default.log(`to send: ${ea.verb.display[state.lang_iso]} ${ea.object.definition.name[state.lang_iso + '-' + state.local_iso]}`));
      if (state.send_enabled) {
        tincan.sendStatements(statements, (error, xhr) => {
          if (_ramda2.default.any(ea => ea.err)(error)) {
            throw new Error(_ramda2.default.compose(_ramda2.default.prop('err'), _ramda2.default.find(ea => ea.err))(error));
          } else {
            saveStatementCallback.call(undefined, xhr);
          }
        });
      } else {
        console.log('(not) send:', statements);
      }
    }
  };
};

const RevealxAPI = (Reveal, { profile_data, statements, tincan }) => {
  const _xapi = XAPI(tincan);

  // TODO: is there a functional approach?
  // provide global handle
  window.xapi = wrapped_custom_fns(statements, _xapi, profile_data);

  const listenerFn = attachListeners(selectAscertain(_xapi, {
    fn_list: statements,
    profile_data
  }));
};

const setupTinCan = config => {
  /* Set up TinCanJS */
  config.registration = TinCan.Utils.getUUID();
  var tincan = new TinCan({
    registration: config.registration,
    actor: {
      name: config.actor.name,
      mbox: config.actor.mbox
    },
    activity: config.activity,
    recordStores: [{
      endpoint: config.endpoint,
      username: config.authUser,
      password: config.authPassword,
      allowFail: false
    }]
  });

  return { tincan, registration: config.registration };
};

function validateEmail(email) {
  var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(String(email).toLowerCase());
}

const getActorName = exports.getActorName = (() => {
  var _ref = _asyncToGenerator(function* (shell, actor) {
    const promise = new Promise(function (resolve, reject) {
      // const parent = document.createElement('div')
      shell.setAttribute('class', 'bottom_left');
      shell.style.zIndex = 3;
      // shell.append(parent)

      const mbox_input = document.createElement('input');
      mbox_input.setAttribute('type', 'text');
      mbox_input.setAttribute('placeholder', actor.mbox.replace(/^mailto:/, ''));
      shell.append(mbox_input);

      const name_input = document.createElement('input');
      name_input.setAttribute('placeholder', actor.name);
      name_input.setAttribute('type', 'text');
      shell.append(name_input);

      const submit = document.createElement('input');
      submit.setAttribute('type', 'submit');
      shell.append(submit);

      submit.addEventListener('click', e => {
        resolve({
          mbox: `mailto:${validateEmail(mbox_input.value) ? mbox_input.value : actor.mbox}`,
          name: name_input.value || actor.name
        });
        shell.parentNode.removeChild(shell);
      });
    });
    return promise;
  });

  return function getActorName(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

const actorNameUI = (() => {
  var _ref2 = _asyncToGenerator(function* (shell, actor) {
    const user_actor = yield getActorName(shell, actor);
    _uiConsole2.default.log(`actor mbox set to ${user_actor.mbox}`);
    _uiConsole2.default.log(`actor name set to ${user_actor.name}`);
    return user_actor;
  });

  return function actorNameUI(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
})();

const rendeUIHelpers = profile_data => {
  const [reveal_elem] = document.getElementsByClassName("reveal");

  const debugger_parent = document.createElement("div");
  const statement_helper_parent = document.createElement("div");
  const toggle_parent = document.createElement("div");

  reveal_elem.appendChild(debugger_parent);
  reveal_elem.appendChild(statement_helper_parent);
  reveal_elem.appendChild(toggle_parent);

  const debugger_node = _uiConsole2.default.init(debugger_parent);
  const statement_helper_node = (0, _statementHelper2.default)(statement_helper_parent, profile_data, state.lang_iso);
  statement_helper_node.style.marginBottom = '2rem';

  const triggerFn = () => {
    debugger_parent.style.visibility = Boolean(state.debug) ? 'visible' : 'hidden';
    statement_helper_parent.style.visibility = Boolean(state.statement_helper) ? 'visible' : 'hidden';
    return state;
  };

  const toggle_node = (0, _toggleState2.default)(toggle_parent, state, triggerFn);

  return triggerFn;
};

const attachListeners = selectAscertain => {
  const listenerFn = event => {
    selectAscertain.call(undefined, event.currentSlide || event.fragment);
  };
  const evt_keys = ['ready', 'slidechanged', 'fragmentshown'];
  Reveal.addEventListener(evt_keys[1], listenerFn);
  Reveal.addEventListener(evt_keys[2], listenerFn);
  if (!Reveal.isReady()) {
    Reveal.addEventListener(evt_keys[0], listenerFn);
  } else {
    listenerFn({ currentSlide: Reveal.getCurrentSlide() });
  }
  return new Map([[evt_keys, listenerFn]]);
};

const wrapped_custom_fns = (fns, _xapi, profile_data) => {
  // state Map([fn, 0]) generator
  fns[Symbol.iterator] = function* () {
    yield* Object.values(this).map(ea => [ea, 0]);
  };

  const fn_state = new WeakMap(fns);

  return Object.freeze(_ramda2.default.mapObjIndexed((fn, key, obj) => (arg, option) => {
    // prevent fns with 'once' param to run more than once
    if (option === 'once' && fn_state.get(fn) === 1) {
      return;
    }

    const user_val = fn.call(undefined, arg);

    const experiences = [strToVerbActivity(user_val, profile_data)];

    if (experiences) {
      fn_state.set(fn, 1);
      sendExperiences(_xapi, { experiences });
    }

    return user_val;
  })(fns));
};

const strToVerbActivity = (str, profile_data) => {
  const splitstr = checkStringSplit(str);
  if (splitstr) {
    const [verb, activity] = splitstr;
    return (0, _concepts.dotVerbActivity)({
      verb,
      activity
    }, state.lang_iso, profile_data);
  }
};

const checkStringSplit = str => {
  if (!str.includes('.')) {
    _uiConsole2.default.log(`Expected dot notation in string "${str}"`);
    return;
  }

  const verb_activity_str = str.split('.');

  if (verb_activity_str.length !== 2) {
    _uiConsole2.default.log(`Expected ${str} as verb.activity`);
    return;
  }

  return verb_activity_str;
};

const selectAscertain = (_xapi, { fn_list, profile_data }) => element => {
  const { xapi: arg, name, description, activityId: overrideID } = element.dataset;
  const id = overrideID || activityId();

  if (arg && statement_log.checkAvailable(element, arg)) {
    let verb,
        activity,
        experiences = [];

    // for dot_statement data
    if (typeof arg === 'string' && arg.includes('.')) {
      experiences = [strToVerbActivity(arg, profile_data)];
    } else {
      // we test for statement functions to call
      const dot_fn_result = (0, _pickFnCall2.default)(fn_list, arg);
      if (dot_fn_result.debug) {
        _uiConsole2.default.log(dot_fn_result.message);
        return; // halt execution if debug mode
      }

      if (typeof dot_fn_result === 'string') {

        experiences = [strToVerbActivity(dot_fn_result, profile_data)];
      } else if (Array.isArray(dot_fn_result)) {

        experiences = dot_fn_result.map(ea => strToVerbActivity(ea, profile_data));
      }
    }
    sendExperiences(_xapi, { experiences, id, name, description });
  }
};

const sendExperiences = (_xapi, { experiences, id = activityId(), name, description }) => {
  const statements = experiences.map(ea => {
    const verb_obj = ea[0];
    const activity_obj = ea[1];
    const [verb_lemma] = _ramda2.default.keys(verb_obj);
    const [activity_lemma] = _ramda2.default.keys(activity_obj);

    const [found_verb] = _ramda2.default.values(verb_obj);
    const [found_activity] = _ramda2.default.values(activity_obj);

    // we take the first, b/c a verb lemma could have multiple entries
    // this could be handled more elegantly, such as letting the designer
    // choose between which statement
    const [first_xapi_verb, ...rest_xapi_verb] = found_verb;
    const [first_xapi_activity, ...rest_xapi_activity] = found_activity;

    if (rest_xapi_verb.length > 0) {
      _uiConsole2.default.log(`There are multiple records for "${verb_lemma}"`, JSON.stringify(_ramda2.default.pluck('id', found_verb)));
    }

    if (rest_xapi_activity.length > 0) {
      _uiConsole2.default.log(`There are multiple records for "${activity_lemma}"`, JSON.stringify(_ramda2.default.pluck('id', found_activity)));
    }

    if (first_xapi_verb && first_xapi_activity) {
      return statement.fromVerbActivityProfile(first_xapi_verb, first_xapi_activity, { id, name, description });
    } else {

      // Log to ui
      if (!first_xapi_verb) {
        _uiConsole2.default.log(`Did not find match for "${verb_lemma}" in ${verb_lemma}.${activity_lemma}`);
      }

      if (!first_xapi_activity) {
        _uiConsole2.default.log(`Did not find match for "${activity_lemma}" in ${verb_lemma}.${activity_lemma}`);
      }

      return;
    }
  });

  _xapi.saveStatements(_ramda2.default.filter(_ramda2.default.identity)(statements), xhr => {
    if (xhr.length > 0) {
      xhr.map(ea => _uiConsole2.default.log(`confirmed received: ${ea.verb.toString()}.${ea.target.toString()}`));
    }
  });
};

let activityId = (Reveal, version) => () => {
  const { h, v } = Reveal.getIndices();
  const iri = window.location.host ? window.location.origin : `${window.location.origin}${window.location.pathname}`;
  return `${iri}#/${h}/${v}:${version}`;
};

const shortCircuitActor = config => {
  if (window) {
    const query = location.search.slice(1);
    console.log('short circuit :', query);
    return _extends({}, config, _querystring2.default.parse(query));
  }
  return config;
};

exports.default = (() => {
  var _ref3 = _asyncToGenerator(function* (Reveal, {
    authority = {
      name: "reveal.js-xapi-plugin"
    },
    dev_mode = false,
    getActorOnInit,
    lang_ISO = navigator.language.split('-')[0],
    local_ISO = navigator.language.split('-')[1] || '',
    lrs,
    profiles,
    send_enabled,
    statement_helper,
    statements,
    version
  }) {

    Reveal.configure({ history: true });

    // connect function to component
    const [parent] = document.getElementsByClassName("reveal");
    const shell = document.createElement("div");
    let config = lrs;
    parent.appendChild(shell);

    config.actor = getActorOnInit ? yield actorNameUI(shell, config.actor) : config.actor;

    config.actor = shortCircuitActor(config.actor);

    state.dev_mode = dev_mode;
    state.send_enabled = send_enabled !== undefined ? !!send_enabled : state.send_enabled;
    state.statement_helper = statement_helper !== undefined ? !!send_enabled : state.statement_helper;
    state.lang_iso = lang_ISO;
    state.local_iso = local_ISO;

    activityId = Object.freeze(activityId(Reveal, version));

    const { tincan, registration } = setupTinCan(config);

    statement = (0, _statement2.default)(registration, state.lang_iso, state.local_iso, authority);
    const profile_data = yield (0, _profiledata2.default)(profiles);

    const allslides = Reveal.getSlides();

    const xapi_map = (0, _statementLog.mapElementXapi)(allslides);

    statement_log = (0, _statementLog2.default)(xapi_map);

    if (state.dev_mode) {
      const triggerFn = rendeUIHelpers(profile_data)();
    }

    return RevealxAPI(Reveal, { profile_data, statements, tincan });
  });

  return function (_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
})();

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _preact = __webpack_require__(16);

var _line_LI = __webpack_require__(142);

var _line_LI2 = _interopRequireDefault(_line_LI);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = props => {
  return (0, _preact.h)(
    'div',
    { style: { zIndex: 3 }, 'class': 'bottom_right' },
    (0, _preact.h)(
      'ul',
      null,
      props.data.map(ea => {
        return (0, _preact.h)(_line_LI2.default, { data: ea.data, title: ea.title });
      })
    )
  );
};

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _preact = __webpack_require__(16);

exports.default = props => {
  return (0, _preact.h)(
    'li',
    { title: props.title },
    props.data
  );
};

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _preact = __webpack_require__(16);

var _statement_list = __webpack_require__(144);

var _statement_list2 = _interopRequireDefault(_statement_list);

var _concepts = __webpack_require__(69);

var _fuzzy = __webpack_require__(156);

var _fuzzy2 = _interopRequireDefault(_fuzzy);

var _ramda = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

class StatementHelper extends _preact.Component {
  constructor(props) {
    super(props);

    this.state = {
      search: '',
      matches: this.makeList(this.props.data),
      filterverb: true,
      filteractivity: true,
      filterother: false
    };

    this.submitSearch = this.submitSearch.bind(this);
    this.filterIn = this.filterIn.bind(this);
  }

  makeList(data) {
    const iri_concept_list = (0, _ramda.flatten)((0, _concepts.conceptIdPairs)(data));
    return (0, _ramda.map)(ea => {
      return _extends({ string: ea.concept.prefLabel[this.props.langISO] }, ea);
    })(iri_concept_list);
  }

  submitSearch(e) {
    e.preventDefault();
    const search_term = e.target.value;
    const list = this.makeList(this.props.data);

    const options = {
      pre: '<span class="highlight-blue">',
      post: '</span>',
      extract: function (el) {
        return el.string;
      }
    };
    const results = search_term !== '' ? _fuzzy2.default.filter(search_term, list, options) : list;

    const matches = results.map(function (el) {
      const { original } = el,
            rest = _objectWithoutProperties(el, ['original']);
      return _extends({}, original, rest);
    });

    this.setState({
      search: search_term,
      matches
    });
  }

  filterIn(e) {
    e.preventDefault();
    this.setState({ [e.target.value]: !this.state[e.target.value] });
  }

  render() {
    const { langISO } = this.props;
    const { filterverb, filteractivity, filterother, matches, search } = this.state;

    const filterByType = (_ref, list) => {
      let { other } = _ref,
          types = _objectWithoutProperties(_ref, ['other']);

      return (0, _ramda.filter)(ea => {
        const searchtype = ea.concept['type'] || ea.concept['@type'];
        return types[searchtype.toLowerCase()] || other && !(0, _ramda.keys)(types).includes(searchtype.toLowerCase());
      })(list);
    };

    const filtered = filterByType({ verb: filterverb, activitytype: filteractivity, other: filterother }, matches);

    return (0, _preact.h)(
      'div',
      { style: { zIndex: 3 }, 'class': 'bottom_left' },
      (0, _preact.h)(
        'section',
        null,
        'Statements'
      ),
      (0, _preact.h)(_statement_list2.default, { data: filtered, langISO: langISO }),
      (0, _preact.h)('input', { style: { width: '100%' }, type: 'text', onInput: this.submitSearch, placeholder: 'search for a term', value: search }),
      (0, _preact.h)(
        'div',
        { style: { display: 'flex' } },
        (0, _preact.h)('input', { id: 'verbs_chk', onChange: this.filterIn, type: 'checkbox', value: 'filterverb', checked: filterverb }),
        (0, _preact.h)(
          'label',
          { 'for': 'verbs_chk' },
          'verb'
        ),
        (0, _preact.h)('input', { id: 'activity_chk', onChange: this.filterIn, type: 'checkbox', value: 'filteractivity', checked: filteractivity }),
        (0, _preact.h)(
          'label',
          { 'for': 'activity_chk' },
          'activity'
        ),
        (0, _preact.h)('input', { id: 'others_chk', onChange: this.filterIn, type: 'checkbox', value: 'filterother', checked: filterother }),
        (0, _preact.h)(
          'label',
          { 'for': 'others_chk' },
          'others'
        ),
        (0, _preact.h)(
          'a',
          { target: '_blank', style: { marginLeft: 'auto' }, href: 'https://adlnet.github.io/xapi-profiles/xapi-profiles-structure.html' },
          '@profiles'
        )
      )
    );
  }
}

exports.default = StatementHelper;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _preact = __webpack_require__(16);

exports.default = props => {
  return (0, _preact.h)(
    'div',
    { style: { minHeight: '30px', maxHeight: '300px', width: '100%', overflowY: 'scroll' } },
    (0, _preact.h)(
      'ul',
      { 'class': 'statement_list' },
      props.data.sort((a, b) => {
        const termA = a.string.toLowerCase(); // ignore upper and lowercase
        const termB = b.string.toLowerCase(); // ignore upper and lowercase
        if (termA < termB) {
          return -1;
        }
        if (termA > termB) {
          return 1;
        }
        return 0;
      }).map(ea => {
        return (0, _preact.h)(
          'li',
          {
            'class': 'statement-item'
          },
          (0, _preact.h)(
            'a',
            {
              title: `${ea.concept.definition[props.langISO]}  ${ea.concept.id}`,
              target: '_blank',
              href: `http://xapi.vocab.pub/describe/?url=${ea.concept.id}`
            },
            (0, _preact.h)('span', {
              dangerouslySetInnerHTML: { __html: `${ea.string}` }
            })
          ),
          ' ',
          (0, _preact.h)(
            'span',
            { 'class': 'type_notation' },
            '[',
            ea.concept.type,
            ']'
          )
        );
      })
    )
  );
};

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _preact = __webpack_require__(16);

exports.default = ({ state, trigger }) => {
  let _state = state;
  const inputTrigger = e => {
    _state[e.currentTarget.value] = e.currentTarget.checked;
    const state_check = trigger.call();
  };

  return (0, _preact.h)(
    "div",
    { "class": "bottom_left", style: { zIndex: 3 } },
    (0, _preact.h)("input", { onClick: inputTrigger, id: "statement_helper", type: "checkbox", checked: _state.statement_helper, value: "statement_helper" }),
    (0, _preact.h)(
      "label",
      { "for": "statement_helper" },
      "statement helper"
    ),
    (0, _preact.h)("input", { onClick: inputTrigger, id: "debugger", type: "checkbox", checked: _state.debug, value: "debug" }),
    (0, _preact.h)(
      "label",
      { "for": "debugger" },
      "console"
    ),
    (0, _preact.h)("input", { onClick: inputTrigger, id: "send_enabled", type: "checkbox", checked: _state.send_enabled, value: "send_enabled" }),
    (0, _preact.h)(
      "label",
      { "for": "send_enabled" },
      "send enabled"
    )
  );
};

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uiConsole = __webpack_require__(50);

exports.default = (fns_keyed, name) => {
  const fn = fns_keyed[name];
  if (fn && typeof fn === 'function') return fn.call(undefined, {});else {
    return (0, _uiConsole.trace)(`Could not find function reference: ${name}`);
  }
};

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateKeyVals = exports.getProfileKeyVals = exports.retrieveAllProfiles = exports.profilesOrDefault = exports.retrieveProfileData = exports.xapi_profiles = undefined;

var _localProfileData = __webpack_require__(139);

var _localProfileData2 = _interopRequireDefault(_localProfileData);

var _fetchPonyfill = __webpack_require__(155);

var _fetchPonyfill2 = _interopRequireDefault(_fetchPonyfill);

var _uiConsole = __webpack_require__(50);

var _uiConsole2 = _interopRequireDefault(_uiConsole);

var _ramda = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { fetch } = (0, _fetchPonyfill2.default)({});

const xapi_profiles = exports.xapi_profiles = {
  "acrossx": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/acrossx/acrossx.jsonld',
  "activity-streams": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/activity-streams/activity-streams.jsonld',
  "adb": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/adb/adb.jsonld',
  "adl": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/adl/adl.jsonld',
  "cmi5": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/cmi5/cmi5.jsonld',
  "dod-isd": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/dod-isd/dod-isd.jsonld',
  "open-badges": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/open-badges/open-badges.jsonld',
  "pdf-annotator": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/pdf-annotator/pdf-annotator.jsonld',
  "scorm": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/scorm/scorm.jsonld',
  "seriousgames": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/seriousgames/seriousgames.jsonld',
  "tincan": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/tincan/tincan.jsonld',
  "video": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/video/video.jsonld',
  "virtual-patient": 'https://raw.githubusercontent.com/adlnet/xapi-authored-profiles/master/virtual-patient/virtual-patient.jsonld'
};

const retrieveProfileData = exports.retrieveProfileData = (() => {
  var _ref = _asyncToGenerator(function* (url) {
    return fetch(url).then(function (response) {
      return response.text();
    })
    // TODO: need to test that the data returned is JSON and/or JSONLD
    .then(function (body) {
      return Promise.resolve(JSON.parse(body));
    });
  });

  return function retrieveProfileData(_x) {
    return _ref.apply(this, arguments);
  };
})();

const profilesOrDefault = exports.profilesOrDefault = config_profiles => config_profiles || ['cmi5'];

const retrieveAllProfiles = exports.retrieveAllProfiles = (() => {
  var _ref2 = _asyncToGenerator(function* (keys, set) {
    return yield Promise.all(keys.map(function (ea) {
      return retrieveProfileData(set[ea]);
    })).catch(function (e) {
      console.warn(e);
      Promise.resolve(_localProfileData2.default);
    });
  });

  return function retrieveAllProfiles(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
})();

const getProfileKeyVals = exports.getProfileKeyVals = profiles => {
  if (profiles.constructor === Object) {
    return [(0, _ramda.keys)(profiles), profiles];
  } else if (profiles.constructor === Array) {
    return [profiles, xapi_profiles];
  }
};

const validateKeyVals = exports.validateKeyVals = ([submittedKeys, urlmap]) => {
  if ((0, _ramda.difference)(submittedKeys, (0, _ramda.keys)(urlmap)).length > 0) {
    _uiConsole2.default.log(`key(s) '${(0, _ramda.difference)(submittedKeys, (0, _ramda.keys)(urlmap)).join(',')}' not found`);
    return [(0, _ramda.intersection)(submittedKeys, (0, _ramda.keys)(urlmap)), urlmap];
  }

  return [submittedKeys, urlmap];
};

exports.default = (() => {
  var _ref3 = _asyncToGenerator(function* (config_profiles) {
    const profiles = profilesOrDefault(config_profiles);
    const keyVals = getProfileKeyVals(profiles);
    return retrieveAllProfiles(...validateKeyVals(keyVals));
  });

  return function (_x4) {
    return _ref3.apply(this, arguments);
  };
})();

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyOrFirstValue = exports.langkey = undefined;

var _ramda = __webpack_require__(21);

const langkey = exports.langkey = (lang_ISO, local_ISO) => local_ISO ? `${lang_ISO}-${local_ISO}` : lang_ISO;

const keyOrFirstValue = exports.keyOrFirstValue = (node, key) => node[key] || Object.values(node)[0];

exports.default = (registration, lang_ISO, local_ISO, authority) => {
  const key = langkey(lang_ISO, local_ISO);

  return {
    fromVerbActivityProfile: (verb_profile, activity_profile, { id, name, description } = {}) => {
      return {
        verb: {
          id: verb_profile.id,
          display: verb_profile.prefLabel
        },
        object: {
          id: id,
          definition: {
            name: {
              [`${key}`]: name || keyOrFirstValue(activity_profile.prefLabel, key)
            },
            description: {
              [`${key}`]: description || keyOrFirstValue(activity_profile.definition, key)
            },
            type: activity_profile.id
          },
          objectType: 'Activity'
        },
        context: {
          registration: registration
        },
        authority
      };
    }
  };
};

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _preact = __webpack_require__(16);

var _statement_helper = __webpack_require__(143);

var _statement_helper2 = _interopRequireDefault(_statement_helper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (node, data, langISO) => {
  return (0, _preact.render)((0, _preact.h)(_statement_helper2.default, { data: data, langISO: langISO }), node);
};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapElementXapi = undefined;

var _ramda = __webpack_require__(21);

const mapElementXapi = exports.mapElementXapi = allslides => (0, _ramda.reduce)((acc, ea) => {
  const section_xapi = ea.dataset.xapi;

  if (section_xapi) {
    acc.set(ea, section_xapi);
  }

  if (ea.children.length > 0) {

    Array.from(ea.children).map(element => {
      const fragment_xapi = element.dataset.xapi;
      if (fragment_xapi) {
        acc.set(element, fragment_xapi);
      }
    });
  }

  return acc;
}, new Map())(allslides);

exports.default = mapped => {
  const consumedgraph = new Uint8Array(Array.from(mapped).length);
  const state = Object.seal(new WeakMap([[mapped, consumedgraph]]));

  return {
    checkAvailable: (element, arg) => {
      const mapkeys = mapped.keys();
      const touchIndex = Array.from(mapkeys).indexOf(element);
      const consumed = state.get(mapped);
      const val = consumed[touchIndex];
      if (val === 1) {
        return false;
      } else {
        consumed[touchIndex] = 1;
        state.set(mapped, consumed);
        return true;
      }
    }
  };
};

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _preact = __webpack_require__(16);

var _toggler = __webpack_require__(145);

var _toggler2 = _interopRequireDefault(_toggler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (node, state, trigger) => {
  return (0, _preact.render)((0, _preact.h)(_toggler2.default, { state: state, trigger: trigger }), node);
};

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function placeHoldersCount(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
}

function byteLength(b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64);
}

function toByteArray(b64) {
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  placeHolders = placeHoldersCount(b64);

  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
};

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if (item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function (modules, mediaQuery) {
		if (typeof modules === "string") modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for (var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if (typeof id === "number") alreadyImportedModules[id] = true;
		}
		for (i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if (mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if (mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;

(function (self) {
  'use strict';

  function fetchPonyfill(options) {
    var Promise = options && options.Promise || self.Promise;
    var XMLHttpRequest = options && options.XMLHttpRequest || self.XMLHttpRequest;
    var global = self;

    return function () {
      var self = Object.create(global, {
        fetch: {
          value: undefined,
          writable: true
        }
      });

      (function (self) {
        'use strict';

        if (self.fetch) {
          return;
        }

        var support = {
          searchParams: 'URLSearchParams' in self,
          iterable: 'Symbol' in self && 'iterator' in Symbol,
          blob: 'FileReader' in self && 'Blob' in self && function () {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: 'FormData' in self,
          arrayBuffer: 'ArrayBuffer' in self
        };

        if (support.arrayBuffer) {
          var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

          var isDataView = function (obj) {
            return obj && DataView.prototype.isPrototypeOf(obj);
          };

          var isArrayBufferView = ArrayBuffer.isView || function (obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }

        function normalizeName(name) {
          if (typeof name !== 'string') {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
            throw new TypeError('Invalid character in header field name');
          }
          return name.toLowerCase();
        }

        function normalizeValue(value) {
          if (typeof value !== 'string') {
            value = String(value);
          }
          return value;
        }

        // Build a destructive iterator for the value list
        function iteratorFor(items) {
          var iterator = {
            next: function () {
              var value = items.shift();
              return { done: value === undefined, value: value };
            }
          };

          if (support.iterable) {
            iterator[Symbol.iterator] = function () {
              return iterator;
            };
          }

          return iterator;
        }

        function Headers(headers) {
          this.map = {};

          if (headers instanceof Headers) {
            headers.forEach(function (value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function (header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function (name) {
              this.append(name, headers[name]);
            }, this);
          }
        }

        Headers.prototype.append = function (name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ',' + value : value;
        };

        Headers.prototype['delete'] = function (name) {
          delete this.map[normalizeName(name)];
        };

        Headers.prototype.get = function (name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };

        Headers.prototype.has = function (name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };

        Headers.prototype.set = function (name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };

        Headers.prototype.forEach = function (callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };

        Headers.prototype.keys = function () {
          var items = [];
          this.forEach(function (value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };

        Headers.prototype.values = function () {
          var items = [];
          this.forEach(function (value) {
            items.push(value);
          });
          return iteratorFor(items);
        };

        Headers.prototype.entries = function () {
          var items = [];
          this.forEach(function (value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };

        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }

        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError('Already read'));
          }
          body.bodyUsed = true;
        }

        function fileReaderReady(reader) {
          return new Promise(function (resolve, reject) {
            reader.onload = function () {
              resolve(reader.result);
            };
            reader.onerror = function () {
              reject(reader.error);
            };
          });
        }

        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }

        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }

        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);

          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join('');
        }

        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }

        function Body() {
          this.bodyUsed = false;

          this._initBody = function (body) {
            this._bodyInit = body;
            if (!body) {
              this._bodyText = '';
            } else if (typeof body === 'string') {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              // IE 10-11 can't handle a DataView body.
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              throw new Error('unsupported BodyInit type');
            }

            if (!this.headers.get('content-type')) {
              if (typeof body === 'string') {
                this.headers.set('content-type', 'text/plain;charset=UTF-8');
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set('content-type', this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
              }
            }
          };

          if (support.blob) {
            this.blob = function () {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }

              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as blob');
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };

            this.arrayBuffer = function () {
              if (this._bodyArrayBuffer) {
                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }

          this.text = function () {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }

            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as text');
            } else {
              return Promise.resolve(this._bodyText);
            }
          };

          if (support.formData) {
            this.formData = function () {
              return this.text().then(decode);
            };
          }

          this.json = function () {
            return this.text().then(JSON.parse);
          };

          return this;
        }

        // HTTP methods whose capitalization should be normalized
        var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }

        function Request(input, options) {
          options = options || {};
          var body = options.body;

          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError('Already read');
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }

          this.credentials = options.credentials || this.credentials || 'omit';
          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || 'GET');
          this.mode = options.mode || this.mode || null;
          this.referrer = null;

          if ((this.method === 'GET' || this.method === 'HEAD') && body) {
            throw new TypeError('Body not allowed for GET or HEAD requests');
          }
          this._initBody(body);
        }

        Request.prototype.clone = function () {
          return new Request(this, { body: this._bodyInit });
        };

        function decode(body) {
          var form = new FormData();
          body.trim().split('&').forEach(function (bytes) {
            if (bytes) {
              var split = bytes.split('=');
              var name = split.shift().replace(/\+/g, ' ');
              var value = split.join('=').replace(/\+/g, ' ');
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }

        function parseHeaders(rawHeaders) {
          var headers = new Headers();
          rawHeaders.split(/\r?\n/).forEach(function (line) {
            var parts = line.split(':');
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(':').trim();
              headers.append(key, value);
            }
          });
          return headers;
        }

        Body.call(Request.prototype);

        function Response(bodyInit, options) {
          if (!options) {
            options = {};
          }

          this.type = 'default';
          this.status = 'status' in options ? options.status : 200;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = 'statusText' in options ? options.statusText : 'OK';
          this.headers = new Headers(options.headers);
          this.url = options.url || '';
          this._initBody(bodyInit);
        }

        Body.call(Response.prototype);

        Response.prototype.clone = function () {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };

        Response.error = function () {
          var response = new Response(null, { status: 0, statusText: '' });
          response.type = 'error';
          return response;
        };

        var redirectStatuses = [301, 302, 303, 307, 308];

        Response.redirect = function (url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError('Invalid status code');
          }

          return new Response(null, { status: status, headers: { location: url } });
        };

        self.Headers = Headers;
        self.Request = Request;
        self.Response = Response;

        self.fetch = function (input, init) {
          return new Promise(function (resolve, reject) {
            var request = new Request(input, init);
            var xhr = new XMLHttpRequest();

            xhr.onload = function () {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || '')
              };
              options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
              var body = 'response' in xhr ? xhr.response : xhr.responseText;
              resolve(new Response(body, options));
            };

            xhr.onerror = function () {
              reject(new TypeError('Network request failed'));
            };

            xhr.ontimeout = function () {
              reject(new TypeError('Network request failed'));
            };

            xhr.open(request.method, request.url, true);

            if (request.credentials === 'include') {
              xhr.withCredentials = true;
            }

            if ('responseType' in xhr && support.blob) {
              xhr.responseType = 'blob';
            }

            request.headers.forEach(function (value, name) {
              xhr.setRequestHeader(name, value);
            });

            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
          });
        };
        self.fetch.polyfill = true;
      })(typeof self !== 'undefined' ? self : this);

      return {
        fetch: self.fetch,
        Headers: self.Headers,
        Request: self.Request,
        Response: self.Response
      };
    }();
  }

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return fetchPonyfill;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    module.exports = fetchPonyfill;
  } else {
    self.fetchPonyfill = fetchPonyfill;
  }
})(typeof self === 'undefined' ? undefined : self);

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * Fuzzy
 * https://github.com/myork/fuzzy
 *
 * Copyright (c) 2012 Matt York
 * Licensed under the MIT license.
 */

(function () {

  var root = this;

  var fuzzy = {};

  // Use in node or in browser
  if (true) {
    module.exports = fuzzy;
  } else {
    root.fuzzy = fuzzy;
  }

  // Return all elements of `array` that have a fuzzy
  // match against `pattern`.
  fuzzy.simpleFilter = function (pattern, array) {
    return array.filter(function (str) {
      return fuzzy.test(pattern, str);
    });
  };

  // Does `pattern` fuzzy match `str`?
  fuzzy.test = function (pattern, str) {
    return fuzzy.match(pattern, str) !== null;
  };

  // If `pattern` matches `str`, wrap each matching character
  // in `opts.pre` and `opts.post`. If no match, return null
  fuzzy.match = function (pattern, str, opts) {
    opts = opts || {};
    var patternIdx = 0,
        result = [],
        len = str.length,
        totalScore = 0,
        currScore = 0
    // prefix
    ,
        pre = opts.pre || ''
    // suffix
    ,
        post = opts.post || ''
    // String to compare against. This might be a lowercase version of the
    // raw string
    ,
        compareString = opts.caseSensitive && str || str.toLowerCase(),
        ch;

    pattern = opts.caseSensitive && pattern || pattern.toLowerCase();

    // For each character in the string, either add it to the result
    // or wrap in template if it's the next string in the pattern
    for (var idx = 0; idx < len; idx++) {
      ch = str[idx];
      if (compareString[idx] === pattern[patternIdx]) {
        ch = pre + ch + post;
        patternIdx += 1;

        // consecutive characters should increase the score more than linearly
        currScore += 1 + currScore;
      } else {
        currScore = 0;
      }
      totalScore += currScore;
      result[result.length] = ch;
    }

    // return rendered string if we have a match for every char
    if (patternIdx === pattern.length) {
      // if the string is an exact match with pattern, totalScore should be maxed
      totalScore = compareString === pattern ? Infinity : totalScore;
      return { rendered: result.join(''), score: totalScore };
    }

    return null;
  };

  // The normal entry point. Filters `arr` for matches against `pattern`.
  // It returns an array with matching values of the type:
  //
  //     [{
  //         string:   '<b>lah' // The rendered string
  //       , index:    2        // The index of the element in `arr`
  //       , original: 'blah'   // The original element in `arr`
  //     }]
  //
  // `opts` is an optional argument bag. Details:
  //
  //    opts = {
  //        // string to put before a matching character
  //        pre:     '<b>'
  //
  //        // string to put after matching character
  //      , post:    '</b>'
  //
  //        // Optional function. Input is an entry in the given arr`,
  //        // output should be the string to test `pattern` against.
  //        // In this example, if `arr = [{crying: 'koala'}]` we would return
  //        // 'koala'.
  //      , extract: function(arg) { return arg.crying; }
  //    }
  fuzzy.filter = function (pattern, arr, opts) {
    if (!arr || arr.length === 0) {
      return [];
    }
    if (typeof pattern !== 'string') {
      return arr;
    }
    opts = opts || {};
    return arr.reduce(function (prev, element, idx, arr) {
      var str = element;
      if (opts.extract) {
        str = opts.extract(element);
      }
      var rendered = fuzzy.match(pattern, str, opts);
      if (rendered != null) {
        prev[prev.length] = {
          string: rendered.rendered,
          score: rendered.score,
          index: idx,
          original: element
        };
      }
      return prev;
    }, [])

    // Sort by score. Browsers are inconsistent wrt stable/unstable
    // sorting, so force stable by using the index in the case of tie.
    // See http://ofb.net/~sethml/is-sort-stable.html
    .sort(function (a, b) {
      var compare = b.score - a.score;
      if (compare) return compare;
      return a.index - b.index;
    });
  };
})();

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var http = __webpack_require__(135);

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    params.protocol = 'https:';
    return http.request.call(this, params, cb);
};

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * The base implementation of `_.delay` and `_.defer` which accepts `args`
 * to provide to `func`.
 *
 * @private
 * @param {Function} func The function to delay.
 * @param {number} wait The number of milliseconds to delay invocation.
 * @param {Array} args The arguments to provide to `func`.
 * @returns {number} Returns the timer id.
 */
function baseDelay(func, wait, args) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return setTimeout(function () {
    func.apply(undefined, args);
  }, wait);
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
  return function () {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Defers invoking the `func` until the current call stack has cleared. Any
 * additional arguments are provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to defer.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {number} Returns the timer id.
 * @example
 *
 * _.defer(function(text) {
 *   console.log(text);
 * }, 'deferred');
 * // => Logs 'deferred' after one or more milliseconds.
 */
var defer = baseRest(function (func, args) {
  return baseDelay(func, 1, args);
});

module.exports = defer;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.endianness = function () {
    return 'LE';
};

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname;
    } else return '';
};

exports.loadavg = function () {
    return [];
};

exports.uptime = function () {
    return 0;
};

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () {
    return [];
};

exports.type = function () {
    return 'Browser';
};

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces = exports.getNetworkInterfaces = function () {
    return {};
};

exports.arch = function () {
    return 'javascript';
};

exports.platform = function () {
    return 'browser';
};

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;

/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function (root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module && !module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
		root = freeGlobal;
	}

	/**
  * The `punycode` object.
  * @name punycode
  * @type Object
  */
	var punycode,


	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647,
	    // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	    tMin = 1,
	    tMax = 26,
	    skew = 38,
	    damp = 700,
	    initialBias = 72,
	    initialN = 128,
	    // 0x80
	delimiter = '-',
	    // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	    regexNonASCII = /[^\x20-\x7E]/,
	    // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
	    // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},


	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	    floor = Math.floor,
	    stringFromCharCode = String.fromCharCode,


	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
  * A generic error utility function.
  * @private
  * @param {String} type The error type.
  * @returns {Error} Throws a `RangeError` with the applicable error message.
  */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
  * A generic `Array#map` utility function.
  * @private
  * @param {Array} array The array to iterate over.
  * @param {Function} callback The function that gets called for every array
  * item.
  * @returns {Array} A new array of values returned by the callback function.
  */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
  * A simple `Array#map`-like wrapper to work with domain name strings or email
  * addresses.
  * @private
  * @param {String} domain The domain name or email address.
  * @param {Function} callback The function that gets called for every
  * character.
  * @returns {Array} A new string of characters returned by the callback
  * function.
  */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
  * Creates an array containing the numeric code points of each Unicode
  * character in the string. While JavaScript uses UCS-2 internally,
  * this function will convert a pair of surrogate halves (each of which
  * UCS-2 exposes as separate characters) into a single code point,
  * matching UTF-16.
  * @see `punycode.ucs2.encode`
  * @see <https://mathiasbynens.be/notes/javascript-encoding>
  * @memberOf punycode.ucs2
  * @name decode
  * @param {String} string The Unicode input string (UCS-2).
  * @returns {Array} The new array of code points.
  */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
  * Creates a string based on an array of numeric code points.
  * @see `punycode.ucs2.decode`
  * @memberOf punycode.ucs2
  * @name encode
  * @param {Array} codePoints The array of numeric code points.
  * @returns {String} The new Unicode string (UCS-2).
  */
	function ucs2encode(array) {
		return map(array, function (value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
  * Converts a basic code point into a digit/integer.
  * @see `digitToBasic()`
  * @private
  * @param {Number} codePoint The basic numeric code point value.
  * @returns {Number} The numeric value of a basic code point (for use in
  * representing integers) in the range `0` to `base - 1`, or `base` if
  * the code point does not represent a value.
  */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
  * Converts a digit/integer into a basic code point.
  * @see `basicToDigit()`
  * @private
  * @param {Number} digit The numeric value of a basic code point.
  * @returns {Number} The basic code point whose value (when used for
  * representing integers) is `digit`, which needs to be in the range
  * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
  * used; else, the lowercase form is used. The behavior is undefined
  * if `flag` is non-zero and `digit` has no uppercase form.
  */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
  * Bias adaptation function as per section 3.4 of RFC 3492.
  * https://tools.ietf.org/html/rfc3492#section-3.4
  * @private
  */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
  * Converts a Punycode string of ASCII-only symbols to a string of Unicode
  * symbols.
  * @memberOf punycode
  * @param {String} input The Punycode string of ASCII-only symbols.
  * @returns {String} The resulting string of Unicode symbols.
  */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,

		/** Cached calculation results */
		baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base;; /* no condition */k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;
			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);
		}

		return ucs2encode(output);
	}

	/**
  * Converts a string of Unicode symbols (e.g. a domain name label) to a
  * Punycode string of ASCII-only symbols.
  * @memberOf punycode
  * @param {String} input The string of Unicode symbols.
  * @returns {String} The resulting Punycode string of ASCII-only symbols.
  */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],

		/** `inputLength` will hold the number of code points in `input`. */
		inputLength,

		/** Cached calculation results */
		handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base;; /* no condition */k += base) {
						t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;
		}
		return output.join('');
	}

	/**
  * Converts a Punycode string representing a domain name or an email address
  * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
  * it doesn't matter if you call it on a string that has already been
  * converted to Unicode.
  * @memberOf punycode
  * @param {String} input The Punycoded domain name or email address to
  * convert to Unicode.
  * @returns {String} The Unicode representation of the given Punycode
  * string.
  */
	function toUnicode(input) {
		return mapDomain(input, function (string) {
			return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
		});
	}

	/**
  * Converts a Unicode string representing a domain name or an email address to
  * Punycode. Only the non-ASCII parts of the domain name will be converted,
  * i.e. it doesn't matter if you call it with a domain that's already in
  * ASCII.
  * @memberOf punycode
  * @param {String} input The domain name or email address to convert, as a
  * Unicode string.
  * @returns {String} The Punycode representation of the given domain name or
  * email address.
  */
	function toASCII(input) {
		return mapDomain(input, function (string) {
			return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
		'version': '1.4.1',
		/**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (true) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}
})(undefined);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(369)(module), __webpack_require__(15)))

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function (v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var always = __webpack_require__(24);

/**
 * A function that always returns `false`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.always, R.T
 * @example
 *
 *      R.F(); //=> false
 */
module.exports = always(false);

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var always = __webpack_require__(24);

/**
 * A function that always returns `true`. Any passed in parameters are ignored.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig * -> Boolean
 * @param {*}
 * @return {Boolean}
 * @see R.always, R.F
 * @example
 *
 *      R.T(); //=> true
 */
module.exports = always(true);

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A special placeholder value used to specify "gaps" within curried functions,
 * allowing partial application of any combination of arguments, regardless of
 * their positions.
 *
 * If `g` is a curried ternary function and `_` is `R.__`, the following are
 * equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2, _)(1, 3)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @constant
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @example
 *
 *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');
 *      greet('Alice'); //=> 'Hello, Alice!'
 */
module.exports = { '@@functional/placeholder': true };

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(10);
var _curry1 = __webpack_require__(1);
var curryN = __webpack_require__(5);

/**
 * Creates a new list iteration function from an existing one by adding two new
 * parameters to its callback function: the current index, and the entire list.
 *
 * This would turn, for instance, Ramda's simple `map` function into one that
 * more closely resembles `Array.prototype.map`. Note that this will only work
 * for functions in which the iteration callback function is the first
 * parameter, and where the list is the last parameter. (This latter might be
 * unimportant if the list parameter is not used.)
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category Function
 * @category List
 * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)
 * @param {Function} fn A list iteration function that does not pass index or list to its callback
 * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
 * @example
 *
 *      var mapIndexed = R.addIndex(R.map);
 *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
 *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
 */
module.exports = _curry1(function addIndex(fn) {
  return curryN(fn.length, function () {
    var idx = 0;
    var origFn = arguments[0];
    var list = arguments[arguments.length - 1];
    var args = Array.prototype.slice.call(arguments, 0);
    args[0] = function () {
      var result = origFn.apply(this, _concat(arguments, [idx, list]));
      idx += 1;
      return result;
    };
    return fn.apply(this, args);
  });
});

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xall = __webpack_require__(239);

/**
 * Returns `true` if all elements of the list match the predicate, `false` if
 * there are any that don't.
 *
 * Dispatches to the `all` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
 *         otherwise.
 * @see R.any, R.none, R.transduce
 * @example
 *
 *      var equals3 = R.equals(3);
 *      R.all(equals3)([3, 3, 3, 3]); //=> true
 *      R.all(equals3)([3, 3, 1, 3]); //=> false
 */
module.exports = _curry2(_dispatchable(['all'], _xall, function all(fn, list) {
  var idx = 0;
  while (idx < list.length) {
    if (!fn(list[idx])) {
      return false;
    }
    idx += 1;
  }
  return true;
}));

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var curryN = __webpack_require__(5);
var max = __webpack_require__(25);
var pluck = __webpack_require__(33);
var reduce = __webpack_require__(14);

/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if every one of the provided predicates is satisfied
 * by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.anyPass
 * @example
 *
 *      var isQueen = R.propEq('rank', 'Q');
 *      var isSpade = R.propEq('suit', '♠︎');
 *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);
 *
 *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false
 *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true
 */
module.exports = _curry1(function allPass(preds) {
  return curryN(reduce(max, 0, pluck('length', preds)), function () {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (!preds[idx].apply(this, arguments)) {
        return false;
      }
      idx += 1;
    }
    return true;
  });
});

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var curryN = __webpack_require__(5);
var max = __webpack_require__(25);
var pluck = __webpack_require__(33);
var reduce = __webpack_require__(14);

/**
 * Takes a list of predicates and returns a predicate that returns true for a
 * given list of arguments if at least one of the provided predicates is
 * satisfied by those arguments.
 *
 * The function returned is a curried function whose arity matches that of the
 * highest-arity predicate.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Logic
 * @sig [(*... -> Boolean)] -> (*... -> Boolean)
 * @param {Array} predicates An array of predicates to check
 * @return {Function} The combined predicate
 * @see R.allPass
 * @example
 *
 *      var isClub = R.propEq('suit', '♣');
 *      var isSpade = R.propEq('suit', '♠');
 *      var isBlackCard = R.anyPass([isClub, isSpade]);
 *
 *      isBlackCard({rank: '10', suit: '♣'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true
 *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false
 */
module.exports = _curry1(function anyPass(preds) {
  return curryN(reduce(max, 0, pluck('length', preds)), function () {
    var idx = 0;
    var len = preds.length;
    while (idx < len) {
      if (preds[idx].apply(this, arguments)) {
        return true;
      }
      idx += 1;
    }
    return false;
  });
});

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _aperture = __webpack_require__(222);
var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xaperture = __webpack_require__(240);

/**
 * Returns a new list, composed of n-tuples of consecutive elements If `n` is
 * greater than the length of the list, an empty list is returned.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @param {Number} n The size of the tuples to create
 * @param {Array} list The list to split into `n`-length tuples
 * @return {Array} The resulting list of `n`-length tuples
 * @see R.transduce
 * @example
 *
 *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]
 *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
 *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []
 */
module.exports = _curry2(_dispatchable([], _xaperture, _aperture));

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(10);
var _curry2 = __webpack_require__(0);

/**
 * Returns a new list containing the contents of the given list, followed by
 * the given element.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} el The element to add to the end of the new list.
 * @param {Array} list The list of elements to add a new item to.
 *        list.
 * @return {Array} A new list containing the elements of the old list followed by `el`.
 * @see R.prepend
 * @example
 *
 *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
 *      R.append('tests', []); //=> ['tests']
 *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
 */
module.exports = _curry2(function append(el, list) {
  return _concat(list, [el]);
});

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var apply = __webpack_require__(76);
var curryN = __webpack_require__(5);
var map = __webpack_require__(7);
var max = __webpack_require__(25);
var pluck = __webpack_require__(33);
var reduce = __webpack_require__(14);
var values = __webpack_require__(128);

/**
 * Given a spec object recursively mapping properties to functions, creates a
 * function producing an object of the same structure, by mapping each property
 * to the result of calling its associated function with the supplied arguments.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
 * @param {Object} spec an object recursively mapping properties to functions for
 *        producing the values for these properties.
 * @return {Function} A function that returns an object of the same structure
 * as `spec', with each property set to the value returned by calling its
 * associated function with the supplied arguments.
 * @see R.converge, R.juxt
 * @example
 *
 *      var getMetrics = R.applySpec({
 *                                      sum: R.add,
 *                                      nested: { mul: R.multiply }
 *                                   });
 *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }
 * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }
 */
module.exports = _curry1(function applySpec(spec) {
  spec = map(function (v) {
    return typeof v == 'function' ? v : applySpec(v);
  }, spec);
  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {
    var args = arguments;
    return map(function (f) {
      return apply(f, args);
    }, spec);
  });
});

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Makes an ascending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`
 * @example
 *
 *      var byAge = R.ascend(R.prop('age'));
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByYoungestFirst = R.sort(byAge, people);
 */
module.exports = _curry3(function ascend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa < bb ? -1 : aa > bb ? 1 : 0;
});

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var nAry = __webpack_require__(46);

/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 2 parameters. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> c) -> (a, b -> c)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 2.
 * @example
 *
 *      var takesThreeArgs = function(a, b, c) {
 *        return [a, b, c];
 *      };
 *      takesThreeArgs.length; //=> 3
 *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
 *
 *      var takesTwoArgs = R.binary(takesThreeArgs);
 *      takesTwoArgs.length; //=> 2
 *      // Only 2 arguments are passed to the wrapped function
 *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
 * @symb R.binary(f)(a, b, c) = f(a, b)
 */
module.exports = _curry1(function binary(fn) {
  return nAry(2, fn);
});

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _isFunction = __webpack_require__(40);
var and = __webpack_require__(74);
var lift = __webpack_require__(45);

/**
 * A function which calls the two provided functions and returns the `&&`
 * of the results.
 * It returns the result of the first function if it is false-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * false-y value.
 *
 * In addition to functions, `R.both` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f A predicate
 * @param {Function} g Another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.
 * @see R.and
 * @example
 *
 *      var gt10 = R.gt(R.__, 10)
 *      var lt20 = R.lt(R.__, 20)
 *      var f = R.both(gt10, lt20);
 *      f(15); //=> true
 *      f(30); //=> false
 */
module.exports = _curry2(function both(f, g) {
  return _isFunction(f) ? function _both() {
    return f.apply(this, arguments) && g.apply(this, arguments);
  } : lift(and)(f, g);
});

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curry = __webpack_require__(37);

/**
 * Returns the result of calling its first argument with the remaining
 * arguments. This is occasionally useful as a converging function for
 * `R.converge`: the left branch can produce a function while the right branch
 * produces a value to be passed to that function as an argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig (*... -> a),*... -> a
 * @param {Function} fn The function to apply to the remaining arguments.
 * @param {...*} args Any number of positional arguments.
 * @return {*}
 * @see R.apply
 * @example
 *
 *      R.call(R.add, 1, 2); //=> 3
 *
 *      var indentN = R.pipe(R.times(R.always(' ')),
 *                           R.join(''),
 *                           R.replace(/^(?!$)/gm));
 *
 *      var format = R.converge(R.call, [
 *                                  R.pipe(R.prop('indent'), indentN),
 *                                  R.prop('value')
 *                              ]);
 *
 *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
 * @symb R.call(f, a, b) = f(a, b)
 */
module.exports = curry(function call(fn) {
  return fn.apply(this, Array.prototype.slice.call(arguments, 1));
});

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Restricts a number to be within a range.
 *
 * Also works for other ordered types such as Strings and Dates.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Relation
 * @sig Ord a => a -> a -> a -> a
 * @param {Number} minimum The lower limit of the clamp (inclusive)
 * @param {Number} maximum The upper limit of the clamp (inclusive)
 * @param {Number} value Value to be clamped
 * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise
 * @example
 *
 *      R.clamp(1, 10, -5) // => 1
 *      R.clamp(1, 10, 15) // => 10
 *      R.clamp(1, 10, 4)  // => 4
 */
module.exports = _curry3(function clamp(min, max, value) {
  if (min > max) {
    throw new Error('min must not be greater than max in clamp(min, max, value)');
  }
  return value < min ? min : value > max ? max : value;
});

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _clone = __webpack_require__(90);
var _curry1 = __webpack_require__(1);

/**
 * Creates a deep copy of the value which may contain (nested) `Array`s and
 * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
 * assigned by reference rather than copied
 *
 * Dispatches to a `clone` method if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {*} -> {*}
 * @param {*} value The object or array to clone
 * @return {*} A deeply cloned copy of `val`
 * @example
 *
 *      var objects = [{}, {}, {}];
 *      var objectsClone = R.clone(objects);
 *      objects === objectsClone; //=> false
 *      objects[0] === objectsClone[0]; //=> false
 */
module.exports = _curry1(function clone(value) {
  return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);
});

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Makes a comparator function out of a function that reports whether the first
 * element is less than the second.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a, b -> Boolean) -> (a, b -> Number)
 * @param {Function} pred A predicate function of arity two which will return `true` if the first argument
 * is less than the second, `false` otherwise
 * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`
 * @example
 *
 *      var byAge = R.comparator((a, b) => a.age < b.age);
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByIncreasingAge = R.sort(byAge, people);
 */
module.exports = _curry1(function comparator(pred) {
  return function (a, b) {
    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
  };
});

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var lift = __webpack_require__(45);
var not = __webpack_require__(112);

/**
 * Takes a function `f` and returns a function `g` such that if called with the same arguments
 * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
 *
 * `R.complement` may be applied to any functor
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> *) -> (*... -> Boolean)
 * @param {Function} f
 * @return {Function}
 * @see R.not
 * @example
 *
 *      var isNotNil = R.complement(R.isNil);
 *      isNil(null); //=> true
 *      isNotNil(null); //=> false
 *      isNil(7); //=> false
 *      isNotNil(7); //=> true
 */
module.exports = lift(not);

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pipeP = __webpack_require__(118);
var reverse = __webpack_require__(49);

/**
 * Performs right-to-left composition of one or more Promise-returning
 * functions. The rightmost function may have any arity; the remaining
 * functions must be unary.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
 * @param {...Function} functions The functions to compose
 * @return {Function}
 * @see R.pipeP
 * @example
 *
 *      var db = {
 *        users: {
 *          JOE: {
 *            name: 'Joe',
 *            followers: ['STEVE', 'SUZY']
 *          }
 *        }
 *      }
 *
 *      // We'll pretend to do a db lookup which returns a promise
 *      var lookupUser = (userId) => Promise.resolve(db.users[userId])
 *      var lookupFollowers = (user) => Promise.resolve(user.followers)
 *      lookupUser('JOE').then(lookupFollowers)
 *
 *      //  followersForUser :: String -> Promise [UserId]
 *      var followersForUser = R.composeP(lookupFollowers, lookupUser);
 *      followersForUser('JOE').then(followers => console.log('Followers:', followers))
 *      // Followers: ["STEVE","SUZY"]
 */
module.exports = function composeP() {
  if (arguments.length === 0) {
    throw new Error('composeP requires at least one argument');
  }
  return pipeP.apply(this, reverse(arguments));
};

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arity = __webpack_require__(12);
var _curry1 = __webpack_require__(1);
var map = __webpack_require__(7);
var max = __webpack_require__(25);
var reduce = __webpack_require__(14);

/**
 * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.
 * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments
 * to `fn` are applied to each of the predicates in turn until one returns a
 * "truthy" value, at which point `fn` returns the result of applying its
 * arguments to the corresponding transformer. If none of the predicates
 * matches, `fn` returns undefined.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Logic
 * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
 * @param {Array} pairs A list of [predicate, transformer]
 * @return {Function}
 * @example
 *
 *      var fn = R.cond([
 *        [R.equals(0),   R.always('water freezes at 0°C')],
 *        [R.equals(100), R.always('water boils at 100°C')],
 *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
 *      ]);
 *      fn(0); //=> 'water freezes at 0°C'
 *      fn(50); //=> 'nothing special happens at 50°C'
 *      fn(100); //=> 'water boils at 100°C'
 */
module.exports = _curry1(function cond(pairs) {
  var arity = reduce(max, 0, map(function (pair) {
    return pair[0].length;
  }, pairs));
  return _arity(arity, function () {
    var idx = 0;
    while (idx < pairs.length) {
      if (pairs[idx][0].apply(this, arguments)) {
        return pairs[idx][1].apply(this, arguments);
      }
      idx += 1;
    }
  });
});

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var constructN = __webpack_require__(80);

/**
 * Wraps a constructor function inside a curried function that can be called
 * with the same arguments and returns the same type.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> {*}) -> (* -> {*})
 * @param {Function} fn The constructor function to wrap.
 * @return {Function} A wrapped, curried constructor function.
 * @example
 *
 *      // Constructor function
 *      function Animal(kind) {
 *        this.kind = kind;
 *      };
 *      Animal.prototype.sighting = function() {
 *        return "It's a " + this.kind + "!";
 *      }
 *
 *      var AnimalConstructor = R.construct(Animal)
 *
 *      // Notice we no longer need the 'new' keyword:
 *      AnimalConstructor('Pig'); //=> {"kind": "Pig", "sighting": function (){...}};
 *
 *      var animalTypes = ["Lion", "Tiger", "Bear"];
 *      var animalSighting = R.invoker(0, 'sighting');
 *      var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);
 *      R.map(sightNewAnimal, animalTypes); //=> ["It's a Lion!", "It's a Tiger!", "It's a Bear!"]
 */
module.exports = _curry1(function construct(Fn) {
  return constructN(Fn.length, Fn);
});

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _contains = __webpack_require__(22);
var _curry2 = __webpack_require__(0);

/**
 * Returns `true` if the specified value is equal, in `R.equals` terms, to at
 * least one element of the given list; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Boolean
 * @param {Object} a The item to compare against.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
 * @see R.any
 * @example
 *
 *      R.contains(3, [1, 2, 3]); //=> true
 *      R.contains(4, [1, 2, 3]); //=> false
 *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
 *      R.contains([42], [[42]]); //=> true
 */
module.exports = _curry2(_contains);

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var reduceBy = __webpack_require__(47);

/**
 * Counts the elements of a list according to how many match each value of a
 * key generated by the supplied function. Returns an object mapping the keys
 * produced by `fn` to the number of occurrences in the list. Note that all
 * keys are coerced to strings because of how JavaScript objects work.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig (a -> String) -> [a] -> {*}
 * @param {Function} fn The function used to map values to keys.
 * @param {Array} list The list to count elements from.
 * @return {Object} An object mapping keys to number of occurrences in the list.
 * @example
 *
 *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
 *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
 *
 *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];
 *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}
 */
module.exports = reduceBy(function (acc, elem) {
  return acc + 1;
}, 0);

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var add = __webpack_require__(35);

/**
 * Decrements its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n - 1
 * @see R.inc
 * @example
 *
 *      R.dec(42); //=> 41
 */
module.exports = add(-1);

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Makes a descending comparator function out of a function that returns a value
 * that can be compared with `<` and `>`.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Function
 * @sig Ord b => (a -> b) -> a -> a -> Number
 * @param {Function} fn A function of arity one that returns a value that can be compared
 * @param {*} a The first item to be compared.
 * @param {*} b The second item to be compared.
 * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`
 * @example
 *
 *      var byAge = R.descend(R.prop('age'));
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByOldestFirst = R.sort(byAge, people);
 */
module.exports = _curry3(function descend(fn, a, b) {
  var aa = fn(a);
  var bb = fn(b);
  return aa > bb ? -1 : aa < bb ? 1 : 0;
});

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var assoc = __webpack_require__(36);
var dissoc = __webpack_require__(85);

/**
 * Makes a shallow clone of an object, omitting the property at the given path.
 * Note that this copies and flattens prototype properties onto the new object
 * as well. All non-primitive properties are copied by reference.
 *
 * @func
 * @memberOf R
 * @since v0.11.0
 * @category Object
 * @sig [String] -> {k: v} -> {k: v}
 * @param {Array} path The path to the value to omit
 * @param {Object} obj The object to clone
 * @return {Object} A new object without the property at path
 * @see R.assocPath
 * @example
 *
 *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
 */
module.exports = _curry2(function dissocPath(path, obj) {
  switch (path.length) {
    case 0:
      return obj;
    case 1:
      return dissoc(path[0], obj);
    default:
      var head = path[0];
      var tail = Array.prototype.slice.call(path, 1);
      return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);
  }
});

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Divides two numbers. Equivalent to `a / b`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a / b`.
 * @see R.multiply
 * @example
 *
 *      R.divide(71, 100); //=> 0.71
 *
 *      var half = R.divide(R.__, 2);
 *      half(42); //=> 21
 *
 *      var reciprocal = R.divide(1);
 *      reciprocal(4);   //=> 0.25
 */
module.exports = _curry2(function divide(a, b) {
  return a / b;
});

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _dropLast = __webpack_require__(224);
var _xdropLast = __webpack_require__(243);

/**
 * Returns a list containing all but the last `n` elements of the given `list`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements of `list` to skip.
 * @param {Array} list The list of elements to consider.
 * @return {Array} A copy of the list with only the first `list.length - n` elements
 * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile
 * @example
 *
 *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
 *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
 *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
 *      R.dropLast(3, 'ramda');               //=> 'ra'
 */
module.exports = _curry2(_dispatchable([], _xdropLast, _dropLast));

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _dropLastWhile = __webpack_require__(225);
var _xdropLastWhile = __webpack_require__(244);

/**
 * Returns a new list excluding all the tailing elements of a given list which
 * satisfy the supplied predicate function. It passes each value from the right
 * to the supplied predicate function, skipping elements until the predicate
 * function returns a `falsy` value. The predicate function is applied to one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @param {Function} predicate The function to be called on each element
 * @param {Array} list The collection to iterate over.
 * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.
 * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile
 * @example
 *
 *      var lteThree = x => x <= 3;
 *
 *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]
 */
module.exports = _curry2(_dispatchable([], _xdropLastWhile, _dropLastWhile));

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _dispatchable = __webpack_require__(3);
var _xdropRepeatsWith = __webpack_require__(102);
var dropRepeatsWith = __webpack_require__(87);
var equals = __webpack_require__(11);

/**
 * Returns a new list without any consecutively repeating elements. `R.equals`
 * is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig [a] -> [a]
 * @param {Array} list The array to consider.
 * @return {Array} `list` without repeating elements.
 * @see R.transduce
 * @example
 *
 *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
 */
module.exports = _curry1(_dispatchable([], _xdropRepeatsWith(equals), dropRepeatsWith(equals)));

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xdropWhile = __webpack_require__(245);

/**
 * Returns a new list excluding the leading elements of a given list which
 * satisfy the supplied predicate function. It passes each value to the supplied
 * predicate function, skipping elements while the predicate function returns
 * `true`. The predicate function is applied to one argument: *(value)*.
 *
 * Dispatches to the `dropWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @param {Function} fn The function called per iteration.
 * @param {Array} list The collection to iterate over.
 * @return {Array} A new array.
 * @see R.takeWhile, R.transduce, R.addIndex
 * @example
 *
 *      var lteTwo = x => x <= 2;
 *
 *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]
 */
module.exports = _curry2(_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len && pred(list[idx])) {
    idx += 1;
  }
  return Array.prototype.slice.call(list, idx);
}));

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _isFunction = __webpack_require__(40);
var lift = __webpack_require__(45);
var or = __webpack_require__(114);

/**
 * A function wrapping calls to the two functions in an `||` operation,
 * returning the result of the first function if it is truth-y and the result
 * of the second function otherwise. Note that this is short-circuited,
 * meaning that the second function will not be invoked if the first returns a
 * truth-y value.
 *
 * In addition to functions, `R.either` also accepts any fantasy-land compatible
 * applicative functor.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
 * @param {Function} f a predicate
 * @param {Function} g another predicate
 * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.
 * @see R.or
 * @example
 *
 *      var gt10 = x => x > 10;
 *      var even = x => x % 2 === 0;
 *      var f = R.either(gt10, even);
 *      f(101); //=> true
 *      f(8); //=> true
 */
module.exports = _curry2(function either(f, g) {
  return _isFunction(f) ? function _either() {
    return f.apply(this, arguments) || g.apply(this, arguments);
  } : lift(or)(f, g);
});

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var equals = __webpack_require__(11);

/**
 * Takes a function and two values in its domain and returns `true` if the
 * values map to the same value in the codomain; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Relation
 * @sig (a -> b) -> a -> a -> Boolean
 * @param {Function} f
 * @param {*} x
 * @param {*} y
 * @return {Boolean}
 * @example
 *
 *      R.eqBy(Math.abs, 5, -5); //=> true
 */
module.exports = _curry3(function eqBy(f, x, y) {
  return equals(f(x), f(y));
});

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var equals = __webpack_require__(11);

/**
 * Reports whether two objects have the same value, in `R.equals` terms, for
 * the specified property. Useful as a curried predicate.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig k -> {k: v} -> {k: v} -> Boolean
 * @param {String} prop The name of the property to compare
 * @param {Object} obj1
 * @param {Object} obj2
 * @return {Boolean}
 *
 * @example
 *
 *      var o1 = { a: 1, b: 2, c: 3, d: 4 };
 *      var o2 = { a: 10, b: 20, c: 3, d: 40 };
 *      R.eqProps('a', o1, o2); //=> false
 *      R.eqProps('c', o1, o2); //=> true
 */
module.exports = _curry3(function eqProps(prop, obj1, obj2) {
  return equals(obj1[prop], obj2[prop]);
});

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Creates a new object by recursively evolving a shallow copy of `object`,
 * according to the `transformation` functions. All non-primitive properties
 * are copied by reference.
 *
 * A `transformation` function will not be invoked if its corresponding key
 * does not exist in the evolved object.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {k: (v -> v)} -> {k: v} -> {k: v}
 * @param {Object} transformations The object specifying transformation functions to apply
 *        to the object.
 * @param {Object} object The object to be transformed.
 * @return {Object} The transformed object.
 * @example
 *
 *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};
 *      var transformations = {
 *        firstName: R.trim,
 *        lastName: R.trim, // Will not get invoked.
 *        data: {elapsed: R.add(1), remaining: R.add(-1)}
 *      };
 *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
 */
module.exports = _curry2(function evolve(transformations, object) {
  var result = {};
  var transformation, key, type;
  for (key in object) {
    transformation = transformations[key];
    type = typeof transformation;
    result[key] = type === 'function' ? transformation(object[key]) : transformation && type === 'object' ? evolve(transformation, object[key]) : object[key];
  }
  return result;
});

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xfind = __webpack_require__(247);

/**
 * Returns the first element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Dispatches to the `find` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 *        desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
 *      R.find(R.propEq('a', 4))(xs); //=> undefined
 */
module.exports = _curry2(_dispatchable(['find'], _xfind, function find(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx += 1;
  }
}));

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xfindIndex = __webpack_require__(248);

/**
 * Returns the index of the first element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1}, {a: 2}, {a: 3}];
 *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
 *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
 */
module.exports = _curry2(_dispatchable([], _xfindIndex, function findIndex(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (fn(list[idx])) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}));

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xfindLast = __webpack_require__(249);

/**
 * Returns the last element of the list which matches the predicate, or
 * `undefined` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> a | undefined
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Object} The element found, or `undefined`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
 *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
 */
module.exports = _curry2(_dispatchable([], _xfindLast, function findLast(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return list[idx];
    }
    idx -= 1;
  }
}));

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xfindLastIndex = __webpack_require__(250);

/**
 * Returns the index of the last element of the list which matches the
 * predicate, or `-1` if no element matches.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> Boolean) -> [a] -> Number
 * @param {Function} fn The predicate function used to determine if the element is the
 * desired one.
 * @param {Array} list The array to consider.
 * @return {Number} The index of the element found, or `-1`.
 * @see R.transduce
 * @example
 *
 *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];
 *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
 *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
 */
module.exports = _curry2(_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0) {
    if (fn(list[idx])) {
      return idx;
    }
    idx -= 1;
  }
  return -1;
}));

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _makeFlat = __webpack_require__(100);

/**
 * Returns a new list by pulling every item out of it (and all its sub-arrays)
 * and putting them in a new array, depth-first.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b]
 * @param {Array} list The array to consider.
 * @return {Array} The flattened list.
 * @see R.unnest
 * @example
 *
 *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
 *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
 */
module.exports = _curry1(_makeFlat(true));

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _checkForMethod = __webpack_require__(28);
var _curry2 = __webpack_require__(0);

/**
 * Iterate over an input `list`, calling a provided function `fn` for each
 * element in the list.
 *
 * `fn` receives one argument: *(value)*.
 *
 * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.forEach` method. For more
 * details on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
 *
 * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
 * the original array. In some libraries this function is named `each`.
 *
 * Dispatches to the `forEach` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig (a -> *) -> [a] -> [a]
 * @param {Function} fn The function to invoke. Receives one argument, `value`.
 * @param {Array} list The list to iterate over.
 * @return {Array} The original list.
 * @see R.addIndex
 * @example
 *
 *      var printXPlusFive = x => console.log(x + 5);
 *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
 *      // logs 6
 *      // logs 7
 *      // logs 8
 * @symb R.forEach(f, [a, b, c]) = [a, b, c]
 */
module.exports = _curry2(_checkForMethod('forEach', function forEach(fn, list) {
  var len = list.length;
  var idx = 0;
  while (idx < len) {
    fn(list[idx]);
    idx += 1;
  }
  return list;
}));

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var keys = __webpack_require__(13);

/**
 * Iterate over an input `object`, calling a provided function `fn` for each
 * key and value in the object.
 *
 * `fn` receives three argument: *(value, key, obj)*.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Object
 * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
 * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.
 * @param {Object} obj The object to iterate over.
 * @return {Object} The original object.
 * @example
 *
 *      var printKeyConcatValue = (value, key) => console.log(key + ':' + value);
 *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}
 *      // logs x:1
 *      // logs y:2
 * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}
 */
module.exports = _curry2(function forEachObjIndexed(fn, obj) {
  var keyList = keys(obj);
  var idx = 0;
  while (idx < keyList.length) {
    var key = keyList[idx];
    fn(obj[key], key, obj);
    idx += 1;
  }
  return obj;
});

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Creates a new object from a list key-value pairs. If a key appears in
 * multiple pairs, the rightmost pair is included in the object.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [[k,v]] -> {k: v}
 * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
 * @return {Object} The object made by pairing up `keys` and `values`.
 * @see R.toPairs, R.pair
 * @example
 *
 *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
 */
module.exports = _curry1(function fromPairs(pairs) {
  var result = {};
  var idx = 0;
  while (idx < pairs.length) {
    result[pairs[idx][0]] = pairs[idx][1];
    idx += 1;
  }
  return result;
});

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _checkForMethod = __webpack_require__(28);
var _curry2 = __webpack_require__(0);
var reduceBy = __webpack_require__(47);

/**
 * Splits a list into sub-lists stored in an object, based on the result of
 * calling a String-returning function on each element, and grouping the
 * results according to values returned.
 *
 * Dispatches to the `groupBy` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> String) -> [a] -> {String: [a]}
 * @param {Function} fn Function :: a -> String
 * @param {Array} list The array to group
 * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
 *         that produced that key when passed to `fn`.
 * @see R.transduce
 * @example
 *
 *      var byGrade = R.groupBy(function(student) {
 *        var score = student.score;
 *        return score < 65 ? 'F' :
 *               score < 70 ? 'D' :
 *               score < 80 ? 'C' :
 *               score < 90 ? 'B' : 'A';
 *      });
 *      var students = [{name: 'Abby', score: 84},
 *                      {name: 'Eddy', score: 58},
 *                      // ...
 *                      {name: 'Jack', score: 69}];
 *      byGrade(students);
 *      // {
 *      //   'A': [{name: 'Dianne', score: 99}],
 *      //   'B': [{name: 'Abby', score: 84}]
 *      //   // ...,
 *      //   'F': [{name: 'Eddy', score: 58}]
 *      // }
 */
module.exports = _curry2(_checkForMethod('groupBy', reduceBy(function (acc, item) {
  if (acc == null) {
    acc = [];
  }
  acc.push(item);
  return acc;
}, null)));

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Takes a list and returns a list of lists where each sublist's elements are
 * all "equal" according to the provided equality function.
 *
 * @func
 * @memberOf R
 * @since v0.21.0
 * @category List
 * @sig ((a, a) → Boolean) → [a] → [[a]]
 * @param {Function} fn Function for determining whether two given (adjacent)
 *        elements should be in the same group
 * @param {Array} list The array to group. Also accepts a string, which will be
 *        treated as a list of characters.
 * @return {List} A list that contains sublists of equal elements,
 *         whose concatenations are equal to the original list.
 * @example
 *
 * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]
 *
 * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])
 * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]
 *
 * R.groupWith(R.eqBy(isVowel), 'aestiou')
 * //=> ['ae', 'st', 'iou']
 */
module.exports = _curry2(function (fn, list) {
  var res = [];
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    var nextidx = idx + 1;
    while (nextidx < len && fn(list[idx], list[nextidx])) {
      nextidx += 1;
    }
    res.push(list.slice(idx, nextidx));
    idx = nextidx;
  }
  return res;
});

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns `true` if the first argument is greater than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.lt
 * @example
 *
 *      R.gt(2, 1); //=> true
 *      R.gt(2, 2); //=> false
 *      R.gt(2, 3); //=> false
 *      R.gt('a', 'z'); //=> false
 *      R.gt('z', 'a'); //=> true
 */
module.exports = _curry2(function gt(a, b) {
  return a > b;
});

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns `true` if the first argument is greater than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.lte
 * @example
 *
 *      R.gte(2, 1); //=> true
 *      R.gte(2, 2); //=> true
 *      R.gte(2, 3); //=> false
 *      R.gte('a', 'z'); //=> false
 *      R.gte('z', 'a'); //=> true
 */
module.exports = _curry2(function gte(a, b) {
  return a >= b;
});

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _has = __webpack_require__(6);

/**
 * Returns whether or not an object has an own property with the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      var hasName = R.has('name');
 *      hasName({name: 'alice'});   //=> true
 *      hasName({name: 'bob'});     //=> true
 *      hasName({});                //=> false
 *
 *      var point = {x: 0, y: 0};
 *      var pointHas = R.has(R.__, point);
 *      pointHas('x');  //=> true
 *      pointHas('y');  //=> true
 *      pointHas('z');  //=> false
 */
module.exports = _curry2(_has);

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns whether or not an object or its prototype chain has a property with
 * the specified name
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Object
 * @sig s -> {s: x} -> Boolean
 * @param {String} prop The name of the property to check for.
 * @param {Object} obj The object to query.
 * @return {Boolean} Whether the property exists.
 * @example
 *
 *      function Rectangle(width, height) {
 *        this.width = width;
 *        this.height = height;
 *      }
 *      Rectangle.prototype.area = function() {
 *        return this.width * this.height;
 *      };
 *
 *      var square = new Rectangle(2, 2);
 *      R.hasIn('width', square);  //=> true
 *      R.hasIn('area', square);  //=> true
 */
module.exports = _curry2(function hasIn(prop, obj) {
  return prop in obj;
});

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var nth = __webpack_require__(31);

/**
 * Returns the first element of the given list or string. In some libraries
 * this function is named `first`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> a | Undefined
 * @sig String -> String
 * @param {Array|String} list
 * @return {*}
 * @see R.tail, R.init, R.last
 * @example
 *
 *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
 *      R.head([]); //=> undefined
 *
 *      R.head('abc'); //=> 'a'
 *      R.head(''); //=> ''
 */
module.exports = nth(0);

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var curryN = __webpack_require__(5);

/**
 * Creates a function that will process either the `onTrue` or the `onFalse`
 * function depending upon the result of the `condition` predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Logic
 * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
 * @param {Function} condition A predicate function
 * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
 * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
 * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`
 *                    function depending upon the result of the `condition` predicate.
 * @see R.unless, R.when
 * @example
 *
 *      var incCount = R.ifElse(
 *        R.has('count'),
 *        R.over(R.lensProp('count'), R.inc),
 *        R.assoc('count', 1)
 *      );
 *      incCount({});           //=> { count: 1 }
 *      incCount({ count: 1 }); //=> { count: 2 }
 */
module.exports = _curry3(function ifElse(condition, onTrue, onFalse) {
  return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
    return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
  });
});

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var add = __webpack_require__(35);

/**
 * Increments its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number} n + 1
 * @see R.dec
 * @example
 *
 *      R.inc(42); //=> 43
 */
module.exports = add(1);

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var reduceBy = __webpack_require__(47);

/**
 * Given a function that generates a key, turns a list of objects into an
 * object indexing the objects by the given key. Note that if multiple
 * objects generate the same value for the indexing key only the last value
 * will be included in the generated object.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
 * @param {Function} fn Function :: a -> String
 * @param {Array} array The array of objects to index
 * @return {Object} An object indexing each array element by the given property.
 * @example
 *
 *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
 *      R.indexBy(R.prop('id'), list);
 *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
 */
module.exports = reduceBy(function (acc, elem) {
  return elem;
}, null);

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _indexOf = __webpack_require__(95);
var _isArray = __webpack_require__(17);

/**
 * Returns the position of the first occurrence of an item in an array, or -1
 * if the item is not included in the array. `R.equals` is used to determine
 * equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.lastIndexOf
 * @example
 *
 *      R.indexOf(3, [1,2,3,4]); //=> 2
 *      R.indexOf(10, [1,2,3,4]); //=> -1
 */
module.exports = _curry2(function indexOf(target, xs) {
  return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);
});

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var slice = __webpack_require__(23);

/**
 * Returns all but the last element of the given list or string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.last, R.head, R.tail
 * @example
 *
 *      R.init([1, 2, 3]);  //=> [1, 2]
 *      R.init([1, 2]);     //=> [1]
 *      R.init([1]);        //=> []
 *      R.init([]);         //=> []
 *
 *      R.init('abc');  //=> 'ab'
 *      R.init('ab');   //=> 'a'
 *      R.init('a');    //=> ''
 *      R.init('');     //=> ''
 */
module.exports = slice(0, -1);

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Inserts the supplied element into the list, at index `index`. _Note that
 * this is not destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} index The position to insert the element
 * @param {*} elt The element to insert into the Array
 * @param {Array} list The list to insert into
 * @return {Array} A new Array with `elt` inserted at `index`.
 * @example
 *
 *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
 */
module.exports = _curry3(function insert(idx, elt, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  var result = Array.prototype.slice.call(list, 0);
  result.splice(idx, 0, elt);
  return result;
});

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Inserts the sub-list into the list, at index `index`. _Note that this is not
 * destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category List
 * @sig Number -> [a] -> [a] -> [a]
 * @param {Number} index The position to insert the sub-list
 * @param {Array} elts The sub-list to insert into the Array
 * @param {Array} list The list to insert the sub-list into
 * @return {Array} A new Array with `elts` inserted starting at `index`.
 * @example
 *
 *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
 */
module.exports = _curry3(function insertAll(idx, elts, list) {
  idx = idx < list.length && idx >= 0 ? idx : list.length;
  return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));
});

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _contains = __webpack_require__(22);

// A simple Set type that honours R.equals semantics
module.exports = function () {
  function _Set() {
    /* globals Set */
    this._nativeSet = typeof Set === 'function' ? new Set() : null;
    this._items = {};
  }

  // until we figure out why jsdoc chokes on this
  // @param item The item to add to the Set
  // @returns {boolean} true if the item did not exist prior, otherwise false
  //
  _Set.prototype.add = function (item) {
    return !hasOrAdd(item, true, this);
  };

  //
  // @param item The item to check for existence in the Set
  // @returns {boolean} true if the item exists in the Set, otherwise false
  //
  _Set.prototype.has = function (item) {
    return hasOrAdd(item, false, this);
  };

  //
  // Combines the logic for checking whether an item is a member of the set and
  // for adding a new item to the set.
  //
  // @param item       The item to check or add to the Set instance.
  // @param shouldAdd  If true, the item will be added to the set if it doesn't
  //                   already exist.
  // @param set        The set instance to check or add to.
  // @return {boolean} true if the item already existed, otherwise false.
  //
  function hasOrAdd(item, shouldAdd, set) {
    var type = typeof item;
    var prevSize, newSize;
    switch (type) {
      case 'string':
      case 'number':
        // distinguish between +0 and -0
        if (item === 0 && 1 / item === -Infinity) {
          if (set._items['-0']) {
            return true;
          } else {
            if (shouldAdd) {
              set._items['-0'] = true;
            }
            return false;
          }
        }
        // these types can all utilise the native Set
        if (set._nativeSet !== null) {
          if (shouldAdd) {
            prevSize = set._nativeSet.size;
            set._nativeSet.add(item);
            newSize = set._nativeSet.size;
            return newSize === prevSize;
          } else {
            return set._nativeSet.has(item);
          }
        } else {
          if (!(type in set._items)) {
            if (shouldAdd) {
              set._items[type] = {};
              set._items[type][item] = true;
            }
            return false;
          } else if (item in set._items[type]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items[type][item] = true;
            }
            return false;
          }
        }

      case 'boolean':
        // set._items['boolean'] holds a two element array
        // representing [ falseExists, trueExists ]
        if (type in set._items) {
          var bIdx = item ? 1 : 0;
          if (set._items[type][bIdx]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items[type][bIdx] = true;
            }
            return false;
          }
        } else {
          if (shouldAdd) {
            set._items[type] = item ? [false, true] : [true, false];
          }
          return false;
        }

      case 'function':
        // compare functions for reference equality
        if (set._nativeSet !== null) {
          if (shouldAdd) {
            prevSize = set._nativeSet.size;
            set._nativeSet.add(item);
            newSize = set._nativeSet.size;
            return newSize === prevSize;
          } else {
            return set._nativeSet.has(item);
          }
        } else {
          if (!(type in set._items)) {
            if (shouldAdd) {
              set._items[type] = [item];
            }
            return false;
          }
          if (!_contains(item, set._items[type])) {
            if (shouldAdd) {
              set._items[type].push(item);
            }
            return false;
          }
          return true;
        }

      case 'undefined':
        if (set._items[type]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type] = true;
          }
          return false;
        }

      case 'object':
        if (item === null) {
          if (!set._items['null']) {
            if (shouldAdd) {
              set._items['null'] = true;
            }
            return false;
          }
          return true;
        }
      /* falls through */
      default:
        // reduce the search size of heterogeneous sets by creating buckets
        // for each type.
        type = Object.prototype.toString.call(item);
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = [item];
          }
          return false;
        }
        // scan through all previously applied items
        if (!_contains(item, set._items[type])) {
          if (shouldAdd) {
            set._items[type].push(item);
          }
          return false;
        }
        return true;
    }
  }
  return _Set;
}();

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _aperture(n, list) {
  var idx = 0;
  var limit = list.length - (n - 1);
  var acc = new Array(limit >= 0 ? limit : 0);
  while (idx < limit) {
    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);
    idx += 1;
  }
  return acc;
};

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _arrayFromIterator(iter) {
  var list = [];
  var next;
  while (!(next = iter.next()).done) {
    list.push(next.value);
  }
  return list;
};

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var take = __webpack_require__(123);

module.exports = function dropLast(n, xs) {
  return take(n < xs.length ? xs.length - n : 0, xs);
};

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function dropLastWhile(pred, list) {
  var idx = list.length - 1;
  while (idx >= 0 && pred(list[idx])) {
    idx -= 1;
  }
  return Array.prototype.slice.call(list, 0, idx + 1);
};

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arrayFromIterator = __webpack_require__(223);
var _functionName = __webpack_require__(229);
var _has = __webpack_require__(6);
var identical = __webpack_require__(89);
var keys = __webpack_require__(13);
var type = __webpack_require__(66);

module.exports = function _equals(a, b, stackA, stackB) {
  if (identical(a, b)) {
    return true;
  }

  if (type(a) !== type(b)) {
    return false;
  }

  if (a == null || b == null) {
    return false;
  }

  if (typeof a.equals === 'function' || typeof b.equals === 'function') {
    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
  }

  switch (type(a)) {
    case 'Arguments':
    case 'Array':
    case 'Object':
      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
        return a === b;
      }
      break;
    case 'Boolean':
    case 'Number':
    case 'String':
      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {
        return false;
      }
      break;
    case 'Date':
      if (!identical(a.valueOf(), b.valueOf())) {
        return false;
      }
      break;
    case 'Error':
      return a.name === b.name && a.message === b.message;
    case 'RegExp':
      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
        return false;
      }
      break;
    case 'Map':
    case 'Set':
      if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {
        return false;
      }
      break;
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
      break;
    case 'ArrayBuffer':
      break;
    default:
      // Values of other types are only equal if identical.
      return false;
  }

  var keysA = keys(a);
  if (keysA.length !== keys(b).length) {
    return false;
  }

  var idx = stackA.length - 1;
  while (idx >= 0) {
    if (stackA[idx] === a) {
      return stackB[idx] === b;
    }
    idx -= 1;
  }

  stackA.push(a);
  stackB.push(b);
  idx = keysA.length - 1;
  while (idx >= 0) {
    var key = keysA[idx];
    if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {
      return false;
    }
    idx -= 1;
  }
  stackA.pop();
  stackB.pop();
  return true;
};

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _forceReduced = __webpack_require__(228);
var _reduce = __webpack_require__(8);
var _xfBase = __webpack_require__(4);
var isArrayLike = __webpack_require__(30);

module.exports = function () {
  var preservingReduced = function (xf) {
    return {
      '@@transducer/init': _xfBase.init,
      '@@transducer/result': function (result) {
        return xf['@@transducer/result'](result);
      },
      '@@transducer/step': function (result, input) {
        var ret = xf['@@transducer/step'](result, input);
        return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;
      }
    };
  };

  return function _xcat(xf) {
    var rxf = preservingReduced(xf);
    return {
      '@@transducer/init': _xfBase.init,
      '@@transducer/result': function (result) {
        return rxf['@@transducer/result'](result);
      },
      '@@transducer/step': function (result, input) {
        return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
      }
    };
  };
}();

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _forceReduced(x) {
  return {
    '@@transducer/value': x,
    '@@transducer/reduced': true
  };
};

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _functionName(f) {
  // String(x => x) evaluates to "x => x", so the pattern may not match.
  var match = String(f).match(/^function (\w*)/);
  return match == null ? '' : match[1];
};

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _isRegExp(x) {
  return Object.prototype.toString.call(x) === '[object RegExp]';
};

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _has = __webpack_require__(6);

// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
module.exports = function _objectAssign(target) {
  if (target == null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  var output = Object(target);
  var idx = 1;
  var length = arguments.length;
  while (idx < length) {
    var source = arguments[idx];
    if (source != null) {
      for (var nextKey in source) {
        if (_has(nextKey, source)) {
          output[nextKey] = source[nextKey];
        }
      }
    }
    idx += 1;
  }
  return output;
};

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _of(x) {
  return [x];
};

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _pipe(f, g) {
  return function () {
    return g.call(this, f.apply(this, arguments));
  };
};

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _pipeP(f, g) {
  return function () {
    var ctx = this;
    return f.apply(ctx, arguments).then(function (x) {
      return g.call(ctx, x);
    });
  };
};

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function _quote(s) {
  var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b') // \b matches word boundary; [\b] matches backspace
  .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');

  return '"' + escaped.replace(/"/g, '\\"') + '"';
};

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(60);
var _identity = __webpack_require__(62);
var _isTransformer = __webpack_require__(63);
var isArrayLike = __webpack_require__(30);
var objOf = __webpack_require__(113);

module.exports = function () {
  var _stepCatArray = {
    '@@transducer/init': Array,
    '@@transducer/step': function (xs, x) {
      xs.push(x);
      return xs;
    },
    '@@transducer/result': _identity
  };
  var _stepCatString = {
    '@@transducer/init': String,
    '@@transducer/step': function (a, b) {
      return a + b;
    },
    '@@transducer/result': _identity
  };
  var _stepCatObject = {
    '@@transducer/init': Object,
    '@@transducer/step': function (result, input) {
      return _assign(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);
    },
    '@@transducer/result': _identity
  };

  return function _stepCat(obj) {
    if (_isTransformer(obj)) {
      return obj;
    }
    if (isArrayLike(obj)) {
      return _stepCatArray;
    }
    if (typeof obj === 'string') {
      return _stepCatString;
    }
    if (typeof obj === 'object') {
      return _stepCatObject;
    }
    throw new Error('Cannot create transformer for ' + obj);
  };
}();

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
 */
module.exports = function () {
  var pad = function pad(n) {
    return (n < 10 ? '0' : '') + n;
  };

  return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
    return d.toISOString();
  } : function _toISOString(d) {
    return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
  };
}();

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _contains = __webpack_require__(22);
var _map = __webpack_require__(43);
var _quote = __webpack_require__(235);
var _toISOString = __webpack_require__(237);
var keys = __webpack_require__(13);
var reject = __webpack_require__(48);

module.exports = function _toString(x, seen) {
  var recur = function recur(y) {
    var xs = seen.concat([x]);
    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);
  };

  //  mapPairs :: (Object, [String]) -> [String]
  var mapPairs = function (obj, keys) {
    return _map(function (k) {
      return _quote(k) + ': ' + recur(obj[k]);
    }, keys.slice().sort());
  };

  switch (Object.prototype.toString.call(x)) {
    case '[object Arguments]':
      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';
    case '[object Array]':
      return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
        return (/^\d+$/.test(k)
        );
      }, keys(x)))).join(', ') + ']';
    case '[object Boolean]':
      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();
    case '[object Date]':
      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';
    case '[object Null]':
      return 'null';
    case '[object Number]':
      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
    case '[object String]':
      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);
    case '[object Undefined]':
      return 'undefined';
    default:
      if (typeof x.toString === 'function') {
        var repr = x.toString();
        if (repr !== '[object Object]') {
          return repr;
        }
      }
      return '{' + mapPairs(x, keys(x)).join(', ') + '}';
  }
};

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(18);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XAll(f, xf) {
    this.xf = xf;
    this.f = f;
    this.all = true;
  }
  XAll.prototype['@@transducer/init'] = _xfBase.init;
  XAll.prototype['@@transducer/result'] = function (result) {
    if (this.all) {
      result = this.xf['@@transducer/step'](result, true);
    }
    return this.xf['@@transducer/result'](result);
  };
  XAll.prototype['@@transducer/step'] = function (result, input) {
    if (!this.f(input)) {
      this.all = false;
      result = _reduced(this.xf['@@transducer/step'](result, false));
    }
    return result;
  };

  return _curry2(function _xall(f, xf) {
    return new XAll(f, xf);
  });
}();

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(10);
var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XAperture(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XAperture.prototype['@@transducer/init'] = _xfBase.init;
  XAperture.prototype['@@transducer/result'] = function (result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };
  XAperture.prototype['@@transducer/step'] = function (result, input) {
    this.store(input);
    return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;
  };
  XAperture.prototype.store = function (input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };
  XAperture.prototype.getCopy = function () {
    return _concat(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));
  };

  return _curry2(function _xaperture(n, xf) {
    return new XAperture(n, xf);
  });
}();

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _flatCat = __webpack_require__(227);
var map = __webpack_require__(7);

module.exports = _curry2(function _xchain(f, xf) {
  return map(f, _flatCat(xf));
});

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XDrop(n, xf) {
    this.xf = xf;
    this.n = n;
  }
  XDrop.prototype['@@transducer/init'] = _xfBase.init;
  XDrop.prototype['@@transducer/result'] = _xfBase.result;
  XDrop.prototype['@@transducer/step'] = function (result, input) {
    if (this.n > 0) {
      this.n -= 1;
      return result;
    }
    return this.xf['@@transducer/step'](result, input);
  };

  return _curry2(function _xdrop(n, xf) {
    return new XDrop(n, xf);
  });
}();

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XDropLast(n, xf) {
    this.xf = xf;
    this.pos = 0;
    this.full = false;
    this.acc = new Array(n);
  }
  XDropLast.prototype['@@transducer/init'] = _xfBase.init;
  XDropLast.prototype['@@transducer/result'] = function (result) {
    this.acc = null;
    return this.xf['@@transducer/result'](result);
  };
  XDropLast.prototype['@@transducer/step'] = function (result, input) {
    if (this.full) {
      result = this.xf['@@transducer/step'](result, this.acc[this.pos]);
    }
    this.store(input);
    return result;
  };
  XDropLast.prototype.store = function (input) {
    this.acc[this.pos] = input;
    this.pos += 1;
    if (this.pos === this.acc.length) {
      this.pos = 0;
      this.full = true;
    }
  };

  return _curry2(function _xdropLast(n, xf) {
    return new XDropLast(n, xf);
  });
}();

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _reduce = __webpack_require__(8);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XDropLastWhile(fn, xf) {
    this.f = fn;
    this.retained = [];
    this.xf = xf;
  }
  XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;
  XDropLastWhile.prototype['@@transducer/result'] = function (result) {
    this.retained = null;
    return this.xf['@@transducer/result'](result);
  };
  XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.retain(result, input) : this.flush(result, input);
  };
  XDropLastWhile.prototype.flush = function (result, input) {
    result = _reduce(this.xf['@@transducer/step'], result, this.retained);
    this.retained = [];
    return this.xf['@@transducer/step'](result, input);
  };
  XDropLastWhile.prototype.retain = function (result, input) {
    this.retained.push(input);
    return result;
  };

  return _curry2(function _xdropLastWhile(fn, xf) {
    return new XDropLastWhile(fn, xf);
  });
}();

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XDropWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XDropWhile.prototype['@@transducer/init'] = _xfBase.init;
  XDropWhile.prototype['@@transducer/result'] = _xfBase.result;
  XDropWhile.prototype['@@transducer/step'] = function (result, input) {
    if (this.f) {
      if (this.f(input)) {
        return result;
      }
      this.f = null;
    }
    return this.xf['@@transducer/step'](result, input);
  };

  return _curry2(function _xdropWhile(f, xf) {
    return new XDropWhile(f, xf);
  });
}();

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XFilter(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFilter.prototype['@@transducer/init'] = _xfBase.init;
  XFilter.prototype['@@transducer/result'] = _xfBase.result;
  XFilter.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
  };

  return _curry2(function _xfilter(f, xf) {
    return new XFilter(f, xf);
  });
}();

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(18);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XFind(f, xf) {
    this.xf = xf;
    this.f = f;
    this.found = false;
  }
  XFind.prototype['@@transducer/init'] = _xfBase.init;
  XFind.prototype['@@transducer/result'] = function (result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, void 0);
    }
    return this.xf['@@transducer/result'](result);
  };
  XFind.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.found = true;
      result = _reduced(this.xf['@@transducer/step'](result, input));
    }
    return result;
  };

  return _curry2(function _xfind(f, xf) {
    return new XFind(f, xf);
  });
}();

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(18);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XFindIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.found = false;
  }
  XFindIndex.prototype['@@transducer/init'] = _xfBase.init;
  XFindIndex.prototype['@@transducer/result'] = function (result) {
    if (!this.found) {
      result = this.xf['@@transducer/step'](result, -1);
    }
    return this.xf['@@transducer/result'](result);
  };
  XFindIndex.prototype['@@transducer/step'] = function (result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.found = true;
      result = _reduced(this.xf['@@transducer/step'](result, this.idx));
    }
    return result;
  };

  return _curry2(function _xfindIndex(f, xf) {
    return new XFindIndex(f, xf);
  });
}();

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XFindLast(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFindLast.prototype['@@transducer/init'] = _xfBase.init;
  XFindLast.prototype['@@transducer/result'] = function (result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));
  };
  XFindLast.prototype['@@transducer/step'] = function (result, input) {
    if (this.f(input)) {
      this.last = input;
    }
    return result;
  };

  return _curry2(function _xfindLast(f, xf) {
    return new XFindLast(f, xf);
  });
}();

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XFindLastIndex(f, xf) {
    this.xf = xf;
    this.f = f;
    this.idx = -1;
    this.lastIdx = -1;
  }
  XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;
  XFindLastIndex.prototype['@@transducer/result'] = function (result) {
    return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));
  };
  XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {
    this.idx += 1;
    if (this.f(input)) {
      this.lastIdx = this.idx;
    }
    return result;
  };

  return _curry2(function _xfindLastIndex(f, xf) {
    return new XFindLastIndex(f, xf);
  });
}();

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XMap(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XMap.prototype['@@transducer/init'] = _xfBase.init;
  XMap.prototype['@@transducer/result'] = _xfBase.result;
  XMap.prototype['@@transducer/step'] = function (result, input) {
    return this.xf['@@transducer/step'](result, this.f(input));
  };

  return _curry2(function _xmap(f, xf) {
    return new XMap(f, xf);
  });
}();

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curryN = __webpack_require__(39);
var _has = __webpack_require__(6);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XReduceBy(valueFn, valueAcc, keyFn, xf) {
    this.valueFn = valueFn;
    this.valueAcc = valueAcc;
    this.keyFn = keyFn;
    this.xf = xf;
    this.inputs = {};
  }
  XReduceBy.prototype['@@transducer/init'] = _xfBase.init;
  XReduceBy.prototype['@@transducer/result'] = function (result) {
    var key;
    for (key in this.inputs) {
      if (_has(key, this.inputs)) {
        result = this.xf['@@transducer/step'](result, this.inputs[key]);
        if (result['@@transducer/reduced']) {
          result = result['@@transducer/value'];
          break;
        }
      }
    }
    this.inputs = null;
    return this.xf['@@transducer/result'](result);
  };
  XReduceBy.prototype['@@transducer/step'] = function (result, input) {
    var key = this.keyFn(input);
    this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
    this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
    return result;
  };

  return _curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
    return new XReduceBy(valueFn, valueAcc, keyFn, xf);
  });
}();

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(18);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XTake(n, xf) {
    this.xf = xf;
    this.n = n;
    this.i = 0;
  }
  XTake.prototype['@@transducer/init'] = _xfBase.init;
  XTake.prototype['@@transducer/result'] = _xfBase.result;
  XTake.prototype['@@transducer/step'] = function (result, input) {
    this.i += 1;
    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);
    return this.i >= this.n ? _reduced(ret) : ret;
  };

  return _curry2(function _xtake(n, xf) {
    return new XTake(n, xf);
  });
}();

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _reduced = __webpack_require__(18);
var _xfBase = __webpack_require__(4);

module.exports = function () {
  function XTakeWhile(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;
  XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;
  XTakeWhile.prototype['@@transducer/step'] = function (result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);
  };

  return _curry2(function _xtakeWhile(f, xf) {
    return new XTakeWhile(f, xf);
  });
}();

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _contains = __webpack_require__(22);
var _curry2 = __webpack_require__(0);
var _filter = __webpack_require__(94);
var flip = __webpack_require__(38);
var uniq = __webpack_require__(67);

/**
 * Combines two lists into a set (i.e. no duplicates) composed of those
 * elements common to both lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The list of elements found in both `list1` and `list2`.
 * @see R.intersectionWith
 * @example
 *
 *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
 */
module.exports = _curry2(function intersection(list1, list2) {
  var lookupList, filteredList;
  if (list1.length > list2.length) {
    lookupList = list1;
    filteredList = list2;
  } else {
    lookupList = list2;
    filteredList = list1;
  }
  return uniq(_filter(flip(_contains)(lookupList), filteredList));
});

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _containsWith = __webpack_require__(61);
var _curry3 = __webpack_require__(2);
var uniqWith = __webpack_require__(68);

/**
 * Combines two lists into a set (i.e. no duplicates) composed of those
 * elements common to both lists. Duplication is determined according to the
 * value returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate function that determines whether
 *        the two supplied elements are equal.
 * @param {Array} list1 One list of items to compare
 * @param {Array} list2 A second list of items to compare
 * @return {Array} A new list containing those elements common to both lists.
 * @see R.intersection
 * @example
 *
 *      var buffaloSpringfield = [
 *        {id: 824, name: 'Richie Furay'},
 *        {id: 956, name: 'Dewey Martin'},
 *        {id: 313, name: 'Bruce Palmer'},
 *        {id: 456, name: 'Stephen Stills'},
 *        {id: 177, name: 'Neil Young'}
 *      ];
 *      var csny = [
 *        {id: 204, name: 'David Crosby'},
 *        {id: 456, name: 'Stephen Stills'},
 *        {id: 539, name: 'Graham Nash'},
 *        {id: 177, name: 'Neil Young'}
 *      ];
 *
 *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);
 *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
 */
module.exports = _curry3(function intersectionWith(pred, list1, list2) {
  var lookupList, filteredList;
  if (list1.length > list2.length) {
    lookupList = list1;
    filteredList = list2;
  } else {
    lookupList = list2;
    filteredList = list1;
  }
  var results = [];
  var idx = 0;
  while (idx < filteredList.length) {
    if (_containsWith(pred, filteredList[idx], lookupList)) {
      results[results.length] = filteredList[idx];
    }
    idx += 1;
  }
  return uniqWith(pred, results);
});

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _checkForMethod = __webpack_require__(28);
var _curry2 = __webpack_require__(0);

/**
 * Creates a new list with the separator interposed between elements.
 *
 * Dispatches to the `intersperse` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category List
 * @sig a -> [a] -> [a]
 * @param {*} separator The element to add to the list.
 * @param {Array} list The list to be interposed.
 * @return {Array} The new list.
 * @example
 *
 *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']
 */
module.exports = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {
  var out = [];
  var idx = 0;
  var length = list.length;
  while (idx < length) {
    if (idx === length - 1) {
      out.push(list[idx]);
    } else {
      out.push(list[idx], separator);
    }
    idx += 1;
  }
  return out;
}));

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _clone = __webpack_require__(90);
var _curry3 = __webpack_require__(2);
var _isTransformer = __webpack_require__(63);
var _reduce = __webpack_require__(8);
var _stepCat = __webpack_require__(236);

/**
 * Transforms the items of the list with the transducer and appends the
 * transformed items to the accumulator using an appropriate iterator function
 * based on the accumulator type.
 *
 * The accumulator can be an array, string, object or a transformer. Iterated
 * items will be appended to arrays and concatenated to strings. Objects will
 * be merged directly or 2-item arrays will be merged as key, value pairs.
 *
 * The accumulator can also be a transformer object that provides a 2-arity
 * reducing iterator function, step, 0-arity initial value function, init, and
 * 1-arity result extraction function result. The step function is used as the
 * iterator function in reduce. The result function is used to convert the
 * final accumulator into the return type and in most cases is R.identity. The
 * init function is used to provide the initial accumulator.
 *
 * The iteration is performed with R.reduce after initializing the transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig a -> (b -> b) -> [c] -> a
 * @param {*} acc The initial accumulator value.
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
 *
 *      R.into([], transducer, numbers); //=> [2, 3]
 *
 *      var intoArray = R.into([]);
 *      intoArray(transducer, numbers); //=> [2, 3]
 */
module.exports = _curry3(function into(acc, xf, list) {
  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);
});

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _has = __webpack_require__(6);
var keys = __webpack_require__(13);

/**
 * Same as R.invertObj, however this accounts for objects with duplicate values
 * by putting the values into an array.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: [ s, ... ]}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object with keys
 * in an array.
 * @example
 *
 *      var raceResultsByFirstName = {
 *        first: 'alice',
 *        second: 'jake',
 *        third: 'alice',
 *      };
 *      R.invert(raceResultsByFirstName);
 *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
 */
module.exports = _curry1(function invert(obj) {
  var props = keys(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    var val = obj[key];
    var list = _has(val, out) ? out[val] : out[val] = [];
    list[list.length] = key;
    idx += 1;
  }
  return out;
});

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var keys = __webpack_require__(13);

/**
 * Returns a new object with the keys of the given object as values, and the
 * values of the given object, which are coerced to strings, as keys. Note
 * that the last key found is preferred when handling the same value.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig {s: x} -> {x: s}
 * @param {Object} obj The object or array to invert
 * @return {Object} out A new object
 * @example
 *
 *      var raceResults = {
 *        first: 'alice',
 *        second: 'jake'
 *      };
 *      R.invertObj(raceResults);
 *      //=> { 'alice': 'first', 'jake':'second' }
 *
 *      // Alternatively:
 *      var raceResults = ['alice', 'jake'];
 *      R.invertObj(raceResults);
 *      //=> { 'alice': '0', 'jake':'1' }
 */
module.exports = _curry1(function invertObj(obj) {
  var props = keys(obj);
  var len = props.length;
  var idx = 0;
  var out = {};

  while (idx < len) {
    var key = props[idx];
    out[obj[key]] = key;
    idx += 1;
  }
  return out;
});

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var empty = __webpack_require__(88);
var equals = __webpack_require__(11);

/**
 * Returns `true` if the given value is its type's empty value; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Logic
 * @sig a -> Boolean
 * @param {*} x
 * @return {Boolean}
 * @see R.empty
 * @example
 *
 *      R.isEmpty([1, 2, 3]);   //=> false
 *      R.isEmpty([]);          //=> true
 *      R.isEmpty('');          //=> true
 *      R.isEmpty(null);        //=> false
 *      R.isEmpty({});          //=> true
 *      R.isEmpty({length: 0}); //=> false
 */
module.exports = _curry1(function isEmpty(x) {
  return x != null && equals(x, empty(x));
});

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Checks if the input value is `null` or `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Type
 * @sig * -> Boolean
 * @param {*} x The value to test.
 * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
 * @example
 *
 *      R.isNil(null); //=> true
 *      R.isNil(undefined); //=> true
 *      R.isNil(0); //=> false
 *      R.isNil([]); //=> false
 */
module.exports = _curry1(function isNil(x) {
  return x == null;
});

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var invoker = __webpack_require__(29);

/**
 * Returns a string made by inserting the `separator` between each element and
 * concatenating all the elements into a single string.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig String -> [a] -> String
 * @param {Number|String} separator The string used to separate the elements.
 * @param {Array} xs The elements to join into a string.
 * @return {String} str The string made by concatenating `xs` with `separator`.
 * @see R.split
 * @example
 *
 *      var spacer = R.join(' ');
 *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
 *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
 */
module.exports = invoker(1, 'join');

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Returns a list containing the names of all the properties of the supplied
 * object, including prototype properties.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own and prototype properties.
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.keysIn(f); //=> ['x', 'y']
 */
module.exports = _curry1(function keysIn(obj) {
  var prop;
  var ks = [];
  for (prop in obj) {
    ks[ks.length] = prop;
  }
  return ks;
});

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _isArray = __webpack_require__(17);
var equals = __webpack_require__(11);

/**
 * Returns the position of the last occurrence of an item in an array, or -1 if
 * the item is not included in the array. `R.equals` is used to determine
 * equality.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig a -> [a] -> Number
 * @param {*} target The item to find.
 * @param {Array} xs The array to search in.
 * @return {Number} the index of the target, or -1 if the target is not found.
 * @see R.indexOf
 * @example
 *
 *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
 *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
 */
module.exports = _curry2(function lastIndexOf(target, xs) {
  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {
    return xs.lastIndexOf(target);
  } else {
    var idx = xs.length - 1;
    while (idx >= 0) {
      if (equals(xs[idx], target)) {
        return idx;
      }
      idx -= 1;
    }
    return -1;
  }
});

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var lens = __webpack_require__(44);
var nth = __webpack_require__(31);
var update = __webpack_require__(126);

/**
 * Returns a lens whose focus is the specified index.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Number -> Lens s a
 * @param {Number} n
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var headLens = R.lensIndex(0);
 *
 *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'
 *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']
 *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']
 */
module.exports = _curry1(function lensIndex(n) {
  return lens(nth(n), update(n));
});

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var assocPath = __webpack_require__(77);
var lens = __webpack_require__(44);
var path = __webpack_require__(32);

/**
 * Returns a lens whose focus is the specified path.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @typedefn Idx = String | Int
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig [Idx] -> Lens s a
 * @param {Array} path The path to use.
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var xHeadYLens = R.lensPath(['x', 0, 'y']);
 *
 *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> 2
 *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}
 *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
 *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}
 */
module.exports = _curry1(function lensPath(p) {
  return lens(path(p), assocPath(p));
});

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var assoc = __webpack_require__(36);
var lens = __webpack_require__(44);
var prop = __webpack_require__(64);

/**
 * Returns a lens whose focus is the specified property.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig String -> Lens s a
 * @param {String} k
 * @return {Lens}
 * @see R.view, R.set, R.over
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});            //=> 1
 *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
 *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
 */
module.exports = _curry1(function lensProp(k) {
  return lens(prop(k), assoc(k));
});

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns `true` if the first argument is less than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.gt
 * @example
 *
 *      R.lt(2, 1); //=> false
 *      R.lt(2, 2); //=> false
 *      R.lt(2, 3); //=> true
 *      R.lt('a', 'z'); //=> true
 *      R.lt('z', 'a'); //=> false
 */
module.exports = _curry2(function lt(a, b) {
  return a < b;
});

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns `true` if the first argument is less than or equal to the second;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {Number} a
 * @param {Number} b
 * @return {Boolean}
 * @see R.gte
 * @example
 *
 *      R.lte(2, 1); //=> false
 *      R.lte(2, 2); //=> true
 *      R.lte(2, 3); //=> true
 *      R.lte('a', 'z'); //=> true
 *      R.lte('z', 'a'); //=> false
 */
module.exports = _curry2(function lte(a, b) {
  return a <= b;
});

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * The mapAccum function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from left to right, and returning a final value of this
 * accumulator together with the new list.
 *
 * The iterator function receives two arguments, *acc* and *value*, and should
 * return a tuple *[acc, value]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccumRight
 * @example
 *
 *      var digits = ['1', '2', '3', '4'];
 *      var appender = (a, b) => [a + b, a + b];
 *
 *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
 * @symb R.mapAccum(f, a, [b, c, d]) = [
 *   f(f(f(a, b)[0], c)[0], d)[0],
 *   [
 *     f(a, b)[1],
 *     f(f(a, b)[0], c)[1],
 *     f(f(f(a, b)[0], c)[0], d)[1]
 *   ]
 * ]
 */
module.exports = _curry3(function mapAccum(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  var tuple = [acc];
  while (idx < len) {
    tuple = fn(tuple[0], list[idx]);
    result[idx] = tuple[1];
    idx += 1;
  }
  return [tuple[0], result];
});

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * The mapAccumRight function behaves like a combination of map and reduce; it
 * applies a function to each element of a list, passing an accumulating
 * parameter from right to left, and returning a final value of this
 * accumulator together with the new list.
 *
 * Similar to `mapAccum`, except moves through the input list from the right to
 * the left.
 *
 * The iterator function receives two arguments, *value* and *acc*, and should
 * return a tuple *[value, acc]*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (x-> acc -> (y, acc)) -> acc -> [x] -> ([y], acc)
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.addIndex, R.mapAccum
 * @example
 *
 *      var digits = ['1', '2', '3', '4'];
 *      var append = (a, b) => [a + b, a + b];
 *
 *      R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']
 * @symb R.mapAccumRight(f, a, [b, c, d]) = [
 *   [
 *     f(b, f(c, f(d, a)[0])[0])[1],
 *     f(c, f(d, a)[0])[1],
 *     f(d, a)[1],
 *   ]
 *   f(b, f(c, f(d, a)[0])[0])[0],
 * ]
 */
module.exports = _curry3(function mapAccumRight(fn, acc, list) {
  var idx = list.length - 1;
  var result = [];
  var tuple = [acc];
  while (idx >= 0) {
    tuple = fn(list[idx], tuple[0]);
    result[idx] = tuple[1];
    idx -= 1;
  }
  return [result, tuple[0]];
});

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _reduce = __webpack_require__(8);
var keys = __webpack_require__(13);

/**
 * An Object-specific version of `map`. The function is applied to three
 * arguments: *(value, key, obj)*. If only the value is significant, use
 * `map` instead.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Object
 * @sig ((*, String, Object) -> *) -> Object -> Object
 * @param {Function} fn
 * @param {Object} obj
 * @return {Object}
 * @see R.map
 * @example
 *
 *      var values = { x: 1, y: 2, z: 3 };
 *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);
 *
 *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }
 */
module.exports = _curry2(function mapObjIndexed(fn, obj) {
  return _reduce(function (acc, key) {
    acc[key] = fn(obj[key], key, obj);
    return acc;
  }, {}, keys(obj));
});

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Tests a regular expression against a String. Note that this function will
 * return an empty array when there are no matches. This differs from
 * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
 * which returns `null` when there are no matches.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig RegExp -> String -> [String | Undefined]
 * @param {RegExp} rx A regular expression.
 * @param {String} str The string to match against
 * @return {Array} The list of matches or empty array.
 * @see R.test
 * @example
 *
 *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
 *      R.match(/a/, 'b'); //=> []
 *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"
 */
module.exports = _curry2(function match(rx, str) {
  return str.match(rx) || [];
});

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _isInteger = __webpack_require__(97);

/**
 * mathMod behaves like the modulo operator should mathematically, unlike the
 * `%` operator (and by extension, R.modulo). So while "-17 % 5" is -2,
 * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN
 * when the modulus is zero or negative.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} m The dividend.
 * @param {Number} p the modulus.
 * @return {Number} The result of `b mod a`.
 * @example
 *
 *      R.mathMod(-17, 5);  //=> 3
 *      R.mathMod(17, 5);   //=> 2
 *      R.mathMod(17, -5);  //=> NaN
 *      R.mathMod(17, 0);   //=> NaN
 *      R.mathMod(17.2, 5); //=> NaN
 *      R.mathMod(17, 5.3); //=> NaN
 *
 *      var clock = R.mathMod(R.__, 12);
 *      clock(15); //=> 3
 *      clock(24); //=> 0
 *
 *      var seventeenMod = R.mathMod(17);
 *      seventeenMod(3);  //=> 2
 *      seventeenMod(4);  //=> 1
 *      seventeenMod(10); //=> 7
 */
module.exports = _curry2(function mathMod(m, p) {
  if (!_isInteger(m)) {
    return NaN;
  }
  if (!_isInteger(p) || p < 1) {
    return NaN;
  }
  return (m % p + p) % p;
});

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Takes a function and two values, and returns whichever value produces the
 * larger result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.max, R.minBy
 * @example
 *
 *      //  square :: Number -> Number
 *      var square = n => n * n;
 *
 *      R.maxBy(square, -3, 2); //=> -3
 *
 *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
 *      R.reduce(R.maxBy(square), 0, []); //=> 0
 */
module.exports = _curry3(function maxBy(f, a, b) {
  return f(b) > f(a) ? b : a;
});

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var mean = __webpack_require__(109);

/**
 * Returns the median of the given list of numbers.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list
 * @return {Number}
 * @example
 *
 *      R.median([2, 9, 7]); //=> 7
 *      R.median([7, 2, 10, 9]); //=> 8
 *      R.median([]); //=> NaN
 */
module.exports = _curry1(function median(list) {
  var len = list.length;
  if (len === 0) {
    return NaN;
  }
  var width = 2 - len % 2;
  var idx = (len - width) / 2;
  return mean(Array.prototype.slice.call(list, 0).sort(function (a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }).slice(idx, idx + width));
});

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arity = __webpack_require__(12);
var _curry1 = __webpack_require__(1);
var _has = __webpack_require__(6);
var toString = __webpack_require__(34);

/**
 * Creates a new function that, when invoked, caches the result of calling `fn`
 * for a given argument set and returns the result. Subsequent calls to the
 * memoized `fn` with the same argument set will not result in an additional
 * call to `fn`; instead, the cached result for that set of arguments will be
 * returned.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (*... -> a) -> (*... -> a)
 * @param {Function} fn The function to memoize.
 * @return {Function} Memoized version of `fn`.
 * @example
 *
 *      var count = 0;
 *      var factorial = R.memoize(n => {
 *        count += 1;
 *        return R.product(R.range(1, n + 1));
 *      });
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      factorial(5); //=> 120
 *      count; //=> 1
 */
module.exports = _curry1(function memoize(fn) {
  var cache = {};
  return _arity(fn.length, function () {
    var key = toString(arguments);
    if (!_has(key, cache)) {
      cache[key] = fn.apply(this, arguments);
    }
    return cache[key];
  });
});

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(60);
var _curry2 = __webpack_require__(0);

/**
 * Create a new object with the own properties of the first object merged with
 * the own properties of the second object. If a key exists in both objects,
 * the value from the second object will be used.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> {k: v} -> {k: v}
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.mergeWith, R.mergeWithKey
 * @example
 *
 *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
 *      //=> { 'name': 'fred', 'age': 40 }
 *
 *      var resetToDefault = R.merge(R.__, {x: 0});
 *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
 * @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }
 */
module.exports = _curry2(function merge(l, r) {
  return _assign({}, l, r);
});

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _assign = __webpack_require__(60);
var _curry1 = __webpack_require__(1);

/**
 * Merges a list of objects together into one object.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig [{k: v}] -> {k: v}
 * @param {Array} list An array of objects
 * @return {Object} A merged object.
 * @see R.reduce
 * @example
 *
 *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
 *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
 * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }
 */
module.exports = _curry1(function mergeAll(list) {
  return _assign.apply(null, [{}].concat(list));
});

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var mergeWithKey = __webpack_require__(110);

/**
 * Creates a new object with the own properties of the two provided objects. If
 * a key exists in both objects, the provided function is applied to the values
 * associated with the key in each object, with the result being used as the
 * value associated with the key in the returned object. The key will be
 * excluded from the returned object if the resulting value is `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Object
 * @sig (a -> a -> a) -> {a} -> {a} -> {a}
 * @param {Function} fn
 * @param {Object} l
 * @param {Object} r
 * @return {Object}
 * @see R.merge, R.mergeWithKey
 * @example
 *
 *      R.mergeWith(R.concat,
 *                  { a: true, values: [10, 20] },
 *                  { b: true, values: [15, 35] });
 *      //=> { a: true, b: true, values: [10, 20, 15, 35] }
 */
module.exports = _curry3(function mergeWith(fn, l, r) {
  return mergeWithKey(function (_, _l, _r) {
    return fn(_l, _r);
  }, l, r);
});

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns the smaller of its two arguments.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> a
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.minBy, R.max
 * @example
 *
 *      R.min(789, 123); //=> 123
 *      R.min('a', 'b'); //=> 'a'
 */
module.exports = _curry2(function min(a, b) {
  return b < a ? b : a;
});

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Takes a function and two values, and returns whichever value produces the
 * smaller result when passed to the provided function.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Relation
 * @sig Ord b => (a -> b) -> a -> a -> a
 * @param {Function} f
 * @param {*} a
 * @param {*} b
 * @return {*}
 * @see R.min, R.maxBy
 * @example
 *
 *      //  square :: Number -> Number
 *      var square = n => n * n;
 *
 *      R.minBy(square, -3, 2); //=> 2
 *
 *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
 *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
 */
module.exports = _curry3(function minBy(f, a, b) {
  return f(b) < f(a) ? b : a;
});

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Divides the first parameter by the second and returns the remainder. Note
 * that this function preserves the JavaScript-style behavior for modulo. For
 * mathematical modulo see `mathMod`.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The value to the divide.
 * @param {Number} b The pseudo-modulus
 * @return {Number} The result of `b % a`.
 * @see R.mathMod
 * @example
 *
 *      R.modulo(17, 3); //=> 2
 *      // JS behavior:
 *      R.modulo(-17, 3); //=> -2
 *      R.modulo(17, -3); //=> 2
 *
 *      var isOdd = R.modulo(R.__, 2);
 *      isOdd(42); //=> 0
 *      isOdd(21); //=> 1
 */
module.exports = _curry2(function modulo(a, b) {
  return a % b;
});

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Negates its argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Math
 * @sig Number -> Number
 * @param {Number} n
 * @return {Number}
 * @example
 *
 *      R.negate(42); //=> -42
 */
module.exports = _curry1(function negate(n) {
  return -n;
});

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _complement = __webpack_require__(92);
var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xany = __webpack_require__(101);
var any = __webpack_require__(75);

/**
 * Returns `true` if no elements of the list match the predicate, `false`
 * otherwise.
 *
 * Dispatches to the `any` method of the second argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> Boolean
 * @param {Function} fn The predicate function.
 * @param {Array} list The array to consider.
 * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.
 * @see R.all, R.any
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *
 *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true
 *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false
 */
module.exports = _curry2(_complement(_dispatchable(['any'], _xany, any)));

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var curryN = __webpack_require__(5);
var nth = __webpack_require__(31);

/**
 * Returns a function which returns its nth argument.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Function
 * @sig Number -> *... -> *
 * @param {Number} n
 * @return {Function}
 * @example
 *
 *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
 *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
 * @symb R.nthArg(-1)(a, b, c) = c
 * @symb R.nthArg(0)(a, b, c) = a
 * @symb R.nthArg(1)(a, b, c) = b
 */
module.exports = _curry1(function nthArg(n) {
  var arity = n < 0 ? 1 : n + 1;
  return curryN(arity, function () {
    return nth(n, arguments);
  });
});

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _of = __webpack_require__(232);

/**
 * Returns a singleton array containing the value provided.
 *
 * Note this `of` is different from the ES6 `of`; See
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category Function
 * @sig a -> [a]
 * @param {*} x any value
 * @return {Array} An array wrapping `x`.
 * @example
 *
 *      R.of(null); //=> [null]
 *      R.of([42]); //=> [[42]]
 */
module.exports = _curry1(_of);

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _contains = __webpack_require__(22);
var _curry2 = __webpack_require__(0);

/**
 * Returns a partial copy of an object omitting the keys specified.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [String] -> {String: *} -> {String: *}
 * @param {Array} names an array of String property names to omit from the new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with properties from `names` not on it.
 * @see R.pick
 * @example
 *
 *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
 */
module.exports = _curry2(function omit(names, obj) {
  var result = {};
  for (var prop in obj) {
    if (!_contains(prop, names)) {
      result[prop] = obj[prop];
    }
  }
  return result;
});

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arity = __webpack_require__(12);
var _curry1 = __webpack_require__(1);

/**
 * Accepts a function `fn` and returns a function that guards invocation of
 * `fn` such that `fn` can only ever be called once, no matter how many times
 * the returned function is invoked. The first value calculated is returned in
 * subsequent invocations.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a... -> b) -> (a... -> b)
 * @param {Function} fn The function to wrap in a call-only-once wrapper.
 * @return {Function} The wrapped function.
 * @example
 *
 *      var addOneOnce = R.once(x => x + 1);
 *      addOneOnce(10); //=> 11
 *      addOneOnce(addOneOnce(50)); //=> 11
 */
module.exports = _curry1(function once(fn) {
  var called = false;
  var result;
  return _arity(fn.length, function () {
    if (called) {
      return result;
    }
    called = true;
    result = fn.apply(this, arguments);
    return result;
  });
});

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category List
 * @sig a -> b -> (a,b)
 * @param {*} fst
 * @param {*} snd
 * @return {Array}
 * @see R.objOf, R.of
 * @example
 *
 *      R.pair('foo', 'bar'); //=> ['foo', 'bar']
 */
module.exports = _curry2(function pair(fst, snd) {
  return [fst, snd];
});

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(10);
var _createPartialApplicator = __webpack_require__(93);

/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided initially followed by the arguments provided to `g`.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partialRight
 * @example
 *
 *      var multiply2 = (a, b) => a * b;
 *      var double = R.partial(multiply2, [2]);
 *      double(2); //=> 4
 *
 *      var greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      var sayHello = R.partial(greet, ['Hello']);
 *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);
 *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)
 */
module.exports = _createPartialApplicator(_concat);

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(10);
var _createPartialApplicator = __webpack_require__(93);
var flip = __webpack_require__(38);

/**
 * Takes a function `f` and a list of arguments, and returns a function `g`.
 * When applied, `g` returns the result of applying `f` to the arguments
 * provided to `g` followed by the arguments provided initially.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category Function
 * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
 * @param {Function} f
 * @param {Array} args
 * @return {Function}
 * @see R.partial
 * @example
 *
 *      var greet = (salutation, title, firstName, lastName) =>
 *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
 *
 *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
 *
 *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
 * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)
 */
module.exports = _createPartialApplicator(flip(_concat));

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var filter = __webpack_require__(58);
var juxt = __webpack_require__(105);
var reject = __webpack_require__(48);

/**
 * Takes a predicate and a list or other "filterable" object and returns the
 * pair of filterable objects of the same type of elements which do and do not
 * satisfy, the predicate, respectively.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
 * @param {Function} pred A predicate to determine which side the element belongs to.
 * @param {Array} filterable the list (or other filterable) to partition.
 * @return {Array} An array, containing first the subset of elements that satisfy the
 *         predicate, and second the subset of elements that do not satisfy.
 * @see R.filter, R.reject
 * @example
 *
 *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);
 *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
 *
 *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
 *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
 */
module.exports = juxt([filter, reject]);

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var equals = __webpack_require__(11);
var path = __webpack_require__(32);

/**
 * Determines whether a nested path on an object has a specific value, in
 * `R.equals` terms. Most likely used to filter a list.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category Relation
 * @typedefn Idx = String | Int
 * @sig [Idx] -> a -> {a} -> Boolean
 * @param {Array} path The path of the nested property to use
 * @param {*} val The value to compare the nested property with
 * @param {Object} obj The object to check the nested property in
 * @return {Boolean} `true` if the value equals the nested object property,
 *         `false` otherwise.
 * @example
 *
 *      var user1 = { address: { zipCode: 90210 } };
 *      var user2 = { address: { zipCode: 55555 } };
 *      var user3 = { name: 'Bob' };
 *      var users = [ user1, user2, user3 ];
 *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);
 *      R.filter(isFamous, users); //=> [ user1 ]
 */
module.exports = _curry3(function pathEq(_path, val, obj) {
  return equals(path(_path, obj), val);
});

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var defaultTo = __webpack_require__(82);
var path = __webpack_require__(32);

/**
 * If the given, non-null object has a value at the given path, returns the
 * value at that path. Otherwise returns the provided default value.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Object
 * @typedefn Idx = String | Int
 * @sig a -> [Idx] -> {a} -> a
 * @param {*} d The default value.
 * @param {Array} p The path to use.
 * @param {Object} obj The object to retrieve the nested property from.
 * @return {*} The data at `path` of the supplied object or the default value.
 * @example
 *
 *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2
 *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"
 */
module.exports = _curry3(function pathOr(d, p, obj) {
  return defaultTo(d, path(p, obj));
});

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var path = __webpack_require__(32);

/**
 * Returns `true` if the specified object property at given path satisfies the
 * given predicate; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Logic
 * @typedefn Idx = String | Int
 * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean
 * @param {Function} pred
 * @param {Array} propPath
 * @param {*} obj
 * @return {Boolean}
 * @see R.propSatisfies, R.path
 * @example
 *
 *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true
 */
module.exports = _curry3(function pathSatisfies(pred, propPath, obj) {
  return propPath.length > 0 && pred(path(propPath, obj));
});

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns a partial copy of an object containing only the keys specified. If
 * the key does not exist, the property is ignored.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> {k: v}
 * @param {Array} names an array of String property names to copy onto a new object
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties from `names` on it.
 * @see R.omit, R.props
 * @example
 *
 *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
 *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
 */
module.exports = _curry2(function pick(names, obj) {
  var result = {};
  var idx = 0;
  while (idx < names.length) {
    if (names[idx] in obj) {
      result[names[idx]] = obj[names[idx]];
    }
    idx += 1;
  }
  return result;
});

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns a partial copy of an object containing only the keys that satisfy
 * the supplied predicate.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Object
 * @sig (v, k -> Boolean) -> {k: v} -> {k: v}
 * @param {Function} pred A predicate to determine whether or not a key
 *        should be included on the output object.
 * @param {Object} obj The object to copy from
 * @return {Object} A new object with only properties that satisfy `pred`
 *         on it.
 * @see R.pick, R.filter
 * @example
 *
 *      var isUpperCase = (val, key) => key.toUpperCase() === key;
 *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
 */
module.exports = _curry2(function pickBy(test, obj) {
  var result = {};
  for (var prop in obj) {
    if (test(obj[prop], prop, obj)) {
      result[prop] = obj[prop];
    }
  }
  return result;
});

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var composeK = __webpack_require__(79);
var reverse = __webpack_require__(49);

/**
 * Returns the left-to-right Kleisli composition of the provided functions,
 * each of which must return a value of a type supported by [`chain`](#chain).
 *
 * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Function
 * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
 * @param {...Function}
 * @return {Function}
 * @see R.composeK
 * @example
 *
 *      //  parseJson :: String -> Maybe *
 *      //  get :: String -> Object -> Maybe *
 *
 *      //  getStateCode :: Maybe String -> Maybe String
 *      var getStateCode = R.pipeK(
 *        parseJson,
 *        get('user'),
 *        get('address'),
 *        get('state'),
 *        R.compose(Maybe.of, R.toUpper)
 *      );
 *
 *      getStateCode('{"user":{"address":{"state":"ny"}}}');
 *      //=> Just('NY')
 *      getStateCode('[Invalid JSON]');
 *      //=> Nothing()
 * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))
 */
module.exports = function pipeK() {
  if (arguments.length === 0) {
    throw new Error('pipeK requires at least one argument');
  }
  return composeK.apply(this, reverse(arguments));
};

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var multiply = __webpack_require__(111);
var reduce = __webpack_require__(14);

/**
 * Multiplies together all the elements of a list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig [Number] -> Number
 * @param {Array} list An array of numbers
 * @return {Number} The product of all the numbers in the list.
 * @see R.reduce
 * @example
 *
 *      R.product([2,4,6,8,100,1]); //=> 38400
 */
module.exports = reduce(multiply, 1);

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _map = __webpack_require__(43);
var identity = __webpack_require__(59);
var pickAll = __webpack_require__(116);
var useWith = __webpack_require__(127);

/**
 * Reasonable analog to SQL `select` statement.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @category Relation
 * @sig [k] -> [{k: v}] -> [{k: v}]
 * @param {Array} props The property names to project
 * @param {Array} objs The objects to query
 * @return {Array} An array of objects with just the `props` properties.
 * @example
 *
 *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
 *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
 *      var kids = [abby, fred];
 *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
 */
module.exports = useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var equals = __webpack_require__(11);

/**
 * Returns `true` if the specified object property is equal, in `R.equals`
 * terms, to the given value; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig String -> a -> Object -> Boolean
 * @param {String} name
 * @param {*} val
 * @param {*} obj
 * @return {Boolean}
 * @see R.equals, R.propSatisfies
 * @example
 *
 *      var abby = {name: 'Abby', age: 7, hair: 'blond'};
 *      var fred = {name: 'Fred', age: 12, hair: 'brown'};
 *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};
 *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};
 *      var kids = [abby, fred, rusty, alois];
 *      var hasBrownHair = R.propEq('hair', 'brown');
 *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
 */
module.exports = _curry3(function propEq(name, val, obj) {
  return equals(val, obj[name]);
});

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var is = __webpack_require__(104);

/**
 * Returns `true` if the specified object property is of the given type;
 * `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Type
 * @sig Type -> String -> Object -> Boolean
 * @param {Function} type
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.is, R.propSatisfies
 * @example
 *
 *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true
 *      R.propIs(Number, 'x', {x: 'foo'});    //=> false
 *      R.propIs(Number, 'x', {});            //=> false
 */
module.exports = _curry3(function propIs(type, name, obj) {
  return is(type, obj[name]);
});

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var _has = __webpack_require__(6);

/**
 * If the given, non-null object has an own property with the specified name,
 * returns the value of that property. Otherwise returns the provided default
 * value.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Object
 * @sig a -> String -> Object -> a
 * @param {*} val The default value.
 * @param {String} p The name of the property to return.
 * @param {Object} obj The object to query.
 * @return {*} The value of given property of the supplied object or the default value.
 * @example
 *
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var favorite = R.prop('favoriteLibrary');
 *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
 *
 *      favorite(alice);  //=> undefined
 *      favoriteWithDefault(alice);  //=> 'Ramda'
 */
module.exports = _curry3(function propOr(val, p, obj) {
  return obj != null && _has(p, obj) ? obj[p] : val;
});

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Returns `true` if the specified object property satisfies the given
 * predicate; `false` otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Logic
 * @sig (a -> Boolean) -> String -> {String: a} -> Boolean
 * @param {Function} pred
 * @param {String} name
 * @param {*} obj
 * @return {Boolean}
 * @see R.propEq, R.propIs
 * @example
 *
 *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true
 */
module.exports = _curry3(function propSatisfies(pred, name, obj) {
  return pred(obj[name]);
});

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Acts as multiple `prop`: array of keys in, array of values out. Preserves
 * order.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig [k] -> {k: v} -> [v]
 * @param {Array} ps The property names to fetch
 * @param {Object} obj The object to query
 * @return {Array} The corresponding values or partially applied function.
 * @example
 *
 *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
 *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
 *
 *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));
 *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
 */
module.exports = _curry2(function props(ps, obj) {
  var len = ps.length;
  var out = [];
  var idx = 0;

  while (idx < len) {
    out[idx] = obj[ps[idx]];
    idx += 1;
  }

  return out;
});

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _isNumber = __webpack_require__(98);

/**
 * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Number -> Number -> [Number]
 * @param {Number} from The first number in the list.
 * @param {Number} to One more than the last number in the list.
 * @return {Array} The list of numbers in tthe set `[a, b)`.
 * @example
 *
 *      R.range(1, 5);    //=> [1, 2, 3, 4]
 *      R.range(50, 53);  //=> [50, 51, 52]
 */
module.exports = _curry2(function range(from, to) {
  if (!(_isNumber(from) && _isNumber(to))) {
    throw new TypeError('Both arguments to range must be numbers');
  }
  var result = [];
  var n = from;
  while (n < to) {
    result.push(n);
    n += 1;
  }
  return result;
});

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curryN = __webpack_require__(39);
var _reduce = __webpack_require__(8);
var _reduced = __webpack_require__(18);

/**
 * Like `reduce`, `reduceWhile` returns a single item by iterating through
 * the list, successively calling the iterator function. `reduceWhile` also
 * takes a predicate that is evaluated before each step. If the predicate returns
 * `false`, it "short-circuits" the iteration and returns the current value
 * of the accumulator.
 *
 * @func
 * @memberOf R
 * @since v0.22.0
 * @category List
 * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} pred The predicate. It is passed the accumulator and the
 *        current element.
 * @param {Function} fn The iterator function. Receives two values, the
 *        accumulator and the current element.
 * @param {*} a The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced
 * @example
 *
 *      var isOdd = (acc, x) => x % 2 === 1;
 *      var xs = [1, 3, 5, 60, 777, 800];
 *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9
 *
 *      var ys = [2, 4, 6]
 *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111
 */
module.exports = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {
  return _reduce(function (acc, x) {
    return pred(acc, x) ? fn(acc, x) : _reduced(acc);
  }, a, list);
});

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _reduced = __webpack_require__(18);

/**
 * Returns a value wrapped to indicate that it is the final value of the reduce
 * and transduce functions. The returned value should be considered a black
 * box: the internal structure is not guaranteed to be stable.
 *
 * Note: this optimization is unavailable to functions not explicitly listed
 * above. For instance, it is not currently supported by reduceRight.
 *
 * @func
 * @memberOf R
 * @since v0.15.0
 * @category List
 * @sig a -> *
 * @param {*} x The final value of the reduce.
 * @return {*} The wrapped value.
 * @see R.reduce, R.transduce
 * @example
 *
 *      R.reduce(
 *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),
 *        0,
 *        [1, 2, 3, 4, 5]) // 10
 */

module.exports = _curry1(_reduced);

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Removes the sub-list of `list` starting at index `start` and containing
 * `count` elements. _Note that this is not destructive_: it returns a copy of
 * the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @param {Number} start The position to start removing elements
 * @param {Number} count The number of elements to remove
 * @param {Array} list The list to remove from
 * @return {Array} A new Array with `count` elements from `start` removed.
 * @example
 *
 *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
 */
module.exports = _curry3(function remove(start, count, list) {
  var result = Array.prototype.slice.call(list, 0);
  result.splice(start, count);
  return result;
});

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var always = __webpack_require__(24);
var times = __webpack_require__(124);

/**
 * Returns a fixed list of size `n` containing a specified identical value.
 *
 * @func
 * @memberOf R
 * @since v0.1.1
 * @category List
 * @sig a -> n -> [a]
 * @param {*} value The value to repeat.
 * @param {Number} n The desired size of the output list.
 * @return {Array} A new array containing `n` `value`s.
 * @example
 *
 *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
 *
 *      var obj = {};
 *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
 *      repeatedObjs[0] === repeatedObjs[1]; //=> true
 * @symb R.repeat(a, 0) = []
 * @symb R.repeat(a, 1) = [a]
 * @symb R.repeat(a, 2) = [a, a]
 */
module.exports = _curry2(function repeat(value, n) {
  return times(always(value), n);
});

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Replace a substring or regex match in a string with a replacement.
 *
 * @func
 * @memberOf R
 * @since v0.7.0
 * @category String
 * @sig RegExp|String -> String -> String -> String
 * @param {RegExp|String} pattern A regular expression or a substring to match.
 * @param {String} replacement The string to replace the matches with.
 * @param {String} str The String to do the search and replacement in.
 * @return {String} The result.
 * @example
 *
 *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
 *
 *      // Use the "g" (global) flag to replace all occurrences:
 *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
 */
module.exports = _curry3(function replace(regex, replacement, str) {
  return str.replace(regex, replacement);
});

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Scan is similar to reduce, but returns a list of successively reduced values
 * from the left
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (a,b -> a) -> a -> [b] -> [a]
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {Array} A list of all intermediately reduced values.
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
 * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]
 */
module.exports = _curry3(function scan(fn, acc, list) {
  var idx = 0;
  var len = list.length;
  var result = [acc];
  while (idx < len) {
    acc = fn(acc, list[idx]);
    result[idx + 1] = acc;
    idx += 1;
  }
  return result;
});

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var always = __webpack_require__(24);
var over = __webpack_require__(115);

/**
 * Returns the result of "setting" the portion of the given data structure
 * focused by the given lens to the given value.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> a -> s -> s
 * @param {Lens} lens
 * @param {*} v
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
 *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
 */
module.exports = _curry3(function set(lens, v, x) {
  return over(lens, always(v), x);
});

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns a copy of the list, sorted according to the comparator function,
 * which should accept two values at a time and return a negative number if the
 * first value is smaller, a positive number if it's larger, and zero if they
 * are equal. Please note that this is a **copy** of the list. It does not
 * modify the original.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a,a -> Number) -> [a] -> [a]
 * @param {Function} comparator A sorting function :: a -> b -> Int
 * @param {Array} list The list to sort
 * @return {Array} a new array with its elements sorted by the comparator function.
 * @example
 *
 *      var diff = function(a, b) { return a - b; };
 *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
 */
module.exports = _curry2(function sort(comparator, list) {
  return Array.prototype.slice.call(list, 0).sort(comparator);
});

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Sorts the list according to the supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord b => (a -> b) -> [a] -> [a]
 * @param {Function} fn
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted by the keys generated by `fn`.
 * @example
 *
 *      var sortByFirstItem = R.sortBy(R.prop(0));
 *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
 *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
 *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var bob = {
 *        name: 'Bob',
 *        age: -10
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 314.159
 *      };
 *      var people = [clara, bob, alice];
 *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
 */
module.exports = _curry2(function sortBy(fn, list) {
  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
    var aa = fn(a);
    var bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
});

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Sorts a list according to a list of comparators.
 *
 * @func
 * @memberOf R
 * @since v0.23.0
 * @category Relation
 * @sig [a -> a -> Number] -> [a] -> [a]
 * @param {Array} functions A list of comparator functions.
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted according to the comarator functions.
 * @example
 *
 *      var alice = {
 *        name: 'alice',
 *        age: 40
 *      };
 *      var bob = {
 *        name: 'bob',
 *        age: 30
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 40
 *      };
 *      var people = [clara, bob, alice];
 *      var ageNameSort = R.sortWith([
 *        R.descend(R.prop('age')),
 *        R.ascend(R.prop('name'))
 *      ]);
 *      ageNameSort(people); //=> [alice, clara, bob]
 */
module.exports = _curry2(function sortWith(fns, list) {
  return Array.prototype.slice.call(list, 0).sort(function (a, b) {
    var result = 0;
    var i = 0;
    while (result === 0 && i < fns.length) {
      result = fns[i](a, b);
      i += 1;
    }
    return result;
  });
});

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var invoker = __webpack_require__(29);

/**
 * Splits a string into an array of strings based on the given
 * separator.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category String
 * @sig (String | RegExp) -> String -> [String]
 * @param {String|RegExp} sep The pattern.
 * @param {String} str The string to separate into an array.
 * @return {Array} The array of strings from `str` separated by `str`.
 * @see R.join
 * @example
 *
 *      var pathComponents = R.split('/');
 *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
 *
 *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
 */
module.exports = invoker(1, 'split');

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var length = __webpack_require__(107);
var slice = __webpack_require__(23);

/**
 * Splits a given list or string at a given index.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig Number -> [a] -> [[a], [a]]
 * @sig Number -> String -> [String, String]
 * @param {Number} index The index where the array/string is split.
 * @param {Array|String} array The array/string to be split.
 * @return {Array}
 * @example
 *
 *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]
 *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']
 *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']
 */
module.exports = _curry2(function splitAt(index, array) {
  return [slice(0, index, array), slice(index, length(array), array)];
});

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var slice = __webpack_require__(23);

/**
 * Splits a collection into slices of the specified length.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [[a]]
 * @sig Number -> String -> [String]
 * @param {Number} n
 * @param {Array} list
 * @return {Array}
 * @example
 *
 *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]
 *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']
 */
module.exports = _curry2(function splitEvery(n, list) {
  if (n <= 0) {
    throw new Error('First argument to splitEvery must be a positive integer');
  }
  var result = [];
  var idx = 0;
  while (idx < list.length) {
    result.push(slice(idx, idx += n, list));
  }
  return result;
});

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Takes a list and a predicate and returns a pair of lists with the following properties:
 *
 *  - the result of concatenating the two output lists is equivalent to the input list;
 *  - none of the elements of the first output list satisfies the predicate; and
 *  - if the second output list is non-empty, its first element satisfies the predicate.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [[a], [a]]
 * @param {Function} pred The predicate that determines where the array is split.
 * @param {Array} list The array to be split.
 * @return {Array}
 * @example
 *
 *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]
 */
module.exports = _curry2(function splitWhen(pred, list) {
  var idx = 0;
  var len = list.length;
  var prefix = [];

  while (idx < len && !pred(list[idx])) {
    prefix.push(list[idx]);
    idx += 1;
  }

  return [prefix, Array.prototype.slice.call(list, idx)];
});

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Subtracts its second argument from its first argument.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Math
 * @sig Number -> Number -> Number
 * @param {Number} a The first value.
 * @param {Number} b The second value.
 * @return {Number} The result of `a - b`.
 * @see R.add
 * @example
 *
 *      R.subtract(10, 8); //=> 2
 *
 *      var minus5 = R.subtract(R.__, 5);
 *      minus5(17); //=> 12
 *
 *      var complementaryAngle = R.subtract(90);
 *      complementaryAngle(30); //=> 60
 *      complementaryAngle(72); //=> 18
 */
module.exports = _curry2(function subtract(a, b) {
  return Number(a) - Number(b);
});

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var concat = __webpack_require__(57);
var difference = __webpack_require__(83);

/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifferenceWith, R.difference, R.differenceWith
 * @example
 *
 *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]
 *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]
 */
module.exports = _curry2(function symmetricDifference(list1, list2) {
  return concat(difference(list1, list2), difference(list2, list1));
});

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var concat = __webpack_require__(57);
var differenceWith = __webpack_require__(84);

/**
 * Finds the set (i.e. no duplicates) of all elements contained in the first or
 * second list, but not both. Duplication is determined according to the value
 * returned by applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category Relation
 * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The elements in `list1` or `list2`, but not both.
 * @see R.symmetricDifference, R.difference, R.differenceWith
 * @example
 *
 *      var eqA = R.eqBy(R.prop('a'));
 *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];
 *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];
 *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]
 */
module.exports = _curry3(function symmetricDifferenceWith(pred, list1, list2) {
  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));
});

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var drop = __webpack_require__(86);

/**
 * Returns a new list containing the last `n` elements of the given list.
 * If `n > list.length`, returns a list of `list.length` elements.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig Number -> [a] -> [a]
 * @sig Number -> String -> String
 * @param {Number} n The number of elements to return.
 * @param {Array} xs The collection to consider.
 * @return {Array}
 * @see R.dropLast
 * @example
 *
 *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']
 *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
 *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
 *      R.takeLast(3, 'ramda');               //=> 'mda'
 */
module.exports = _curry2(function takeLast(n, xs) {
  return drop(n >= 0 ? xs.length - n : 0, xs);
});

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns a new list containing the last `n` elements of a given list, passing
 * each value to the supplied predicate function, and terminating when the
 * predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @param {Function} fn The function called per iteration.
 * @param {Array} list The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropLastWhile, R.addIndex
 * @example
 *
 *      var isNotOne = x => x !== 1;
 *
 *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
 */
module.exports = _curry2(function takeLastWhile(fn, list) {
  var idx = list.length - 1;
  while (idx >= 0 && fn(list[idx])) {
    idx -= 1;
  }
  return Array.prototype.slice.call(list, idx + 1);
});

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var _dispatchable = __webpack_require__(3);
var _xtakeWhile = __webpack_require__(254);

/**
 * Returns a new list containing the first `n` elements of a given list,
 * passing each value to the supplied predicate function, and terminating when
 * the predicate function returns `false`. Excludes the element that caused the
 * predicate function to fail. The predicate function is passed one argument:
 * *(value)*.
 *
 * Dispatches to the `takeWhile` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a -> Boolean) -> [a] -> [a]
 * @param {Function} fn The function called per iteration.
 * @param {Array} list The collection to iterate over.
 * @return {Array} A new array.
 * @see R.dropWhile, R.transduce, R.addIndex
 * @example
 *
 *      var isNotFour = x => x !== 4;
 *
 *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]
 */
module.exports = _curry2(_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len && fn(list[idx])) {
    idx += 1;
  }
  return Array.prototype.slice.call(list, 0, idx);
}));

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Runs the given function with the supplied object, then returns the object.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a -> *) -> a -> a
 * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
 * @param {*} x
 * @return {*} `x`.
 * @example
 *
 *      var sayX = x => console.log('x is ' + x);
 *      R.tap(sayX, 100); //=> 100
 *      // logs 'x is 100'
 * @symb R.tap(f, a) = a
 */
module.exports = _curry2(function tap(fn, x) {
  fn(x);
  return x;
});

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _cloneRegExp = __webpack_require__(91);
var _curry2 = __webpack_require__(0);
var _isRegExp = __webpack_require__(230);
var toString = __webpack_require__(34);

/**
 * Determines whether a given string matches a given regular expression.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category String
 * @sig RegExp -> String -> Boolean
 * @param {RegExp} pattern
 * @param {String} str
 * @return {Boolean}
 * @see R.match
 * @example
 *
 *      R.test(/^x/, 'xyz'); //=> true
 *      R.test(/^y/, 'xyz'); //=> false
 */
module.exports = _curry2(function test(pattern, str) {
  if (!_isRegExp(pattern)) {
    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));
  }
  return _cloneRegExp(pattern).test(str);
});

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var invoker = __webpack_require__(29);

/**
 * The lower case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to lower case.
 * @return {String} The lower case version of `str`.
 * @see R.toUpper
 * @example
 *
 *      R.toLower('XYZ'); //=> 'xyz'
 */
module.exports = invoker(0, 'toLowerCase');

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var _has = __webpack_require__(6);

/**
 * Converts an object into an array of key, value arrays. Only the object's
 * own properties are used.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own properties.
 * @see R.fromPairs
 * @example
 *
 *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
 */
module.exports = _curry1(function toPairs(obj) {
  var pairs = [];
  for (var prop in obj) {
    if (_has(prop, obj)) {
      pairs[pairs.length] = [prop, obj[prop]];
    }
  }
  return pairs;
});

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Converts an object into an array of key, value arrays. The object's own
 * properties and prototype properties are used. Note that the order of the
 * output array is not guaranteed to be consistent across different JS
 * platforms.
 *
 * @func
 * @memberOf R
 * @since v0.4.0
 * @category Object
 * @sig {String: *} -> [[String,*]]
 * @param {Object} obj The object to extract from
 * @return {Array} An array of key, value arrays from the object's own
 *         and prototype properties.
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
 */
module.exports = _curry1(function toPairsIn(obj) {
  var pairs = [];
  for (var prop in obj) {
    pairs[pairs.length] = [prop, obj[prop]];
  }
  return pairs;
});

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var invoker = __webpack_require__(29);

/**
 * The upper case version of a string.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to upper case.
 * @return {String} The upper case version of `str`.
 * @see R.toLower
 * @example
 *
 *      R.toUpper('abc'); //=> 'ABC'
 */
module.exports = invoker(0, 'toUpperCase');

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _reduce = __webpack_require__(8);
var _xwrap = __webpack_require__(103);
var curryN = __webpack_require__(5);

/**
 * Initializes a transducer using supplied iterator function. Returns a single
 * item by iterating through the list, successively calling the transformed
 * iterator function and passing it an accumulator value and the current value
 * from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It will be
 * wrapped as a transformer to initialize the transducer. A transformer can be
 * passed directly in place of an iterator function. In both cases, iteration
 * may be stopped early with the `R.reduced` function.
 *
 * A transducer is a function that accepts a transformer and returns a
 * transformer and can be composed directly.
 *
 * A transformer is an an object that provides a 2-arity reducing iterator
 * function, step, 0-arity initial value function, init, and 1-arity result
 * extraction function, result. The step function is used as the iterator
 * function in reduce. The result function is used to convert the final
 * accumulator into the return type and in most cases is R.identity. The init
 * function can be used to provide an initial accumulator, but is ignored by
 * transduce.
 *
 * The iteration is performed with R.reduce after initializing the transducer.
 *
 * @func
 * @memberOf R
 * @since v0.12.0
 * @category List
 * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a
 * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array. Wrapped as transformer, if necessary, and used to
 *        initialize the transducer
 * @param {*} acc The initial accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduce, R.reduced, R.into
 * @example
 *
 *      var numbers = [1, 2, 3, 4];
 *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
 *
 *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
 */
module.exports = curryN(4, function transduce(xf, fn, acc, list) {
  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);
});

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Transposes the rows and columns of a 2D list.
 * When passed a list of `n` lists of length `x`,
 * returns a list of `x` lists of length `n`.
 *
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [[a]] -> [[a]]
 * @param {Array} list A 2D list
 * @return {Array} A 2D list
 * @example
 *
 *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]
 *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 *
 * If some of the rows are shorter than the following rows, their elements are skipped:
 *
 *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]
 * @symb R.transpose([[a], [b], [c]]) = [a, b, c]
 * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]
 * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]
 */
module.exports = _curry1(function transpose(outerlist) {
  var i = 0;
  var result = [];
  while (i < outerlist.length) {
    var innerlist = outerlist[i];
    var j = 0;
    while (j < innerlist.length) {
      if (typeof result[j] === 'undefined') {
        result[j] = [];
      }
      result[j].push(innerlist[j]);
      j += 1;
    }
    i += 1;
  }
  return result;
});

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);
var map = __webpack_require__(7);
var sequence = __webpack_require__(121);

/**
 * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning
 * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),
 * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative
 * into an Applicative of Traversable.
 *
 * Dispatches to the `sequence` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
 * @param {Function} of
 * @param {Function} f
 * @param {*} traversable
 * @return {*}
 * @see R.sequence
 * @example
 *
 *      // Returns `Nothing` if the given divisor is `0`
 *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)
 *
 *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])
 *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing
 */
module.exports = _curry3(function traverse(of, f, traversable) {
  return sequence(of, map(f, traversable));
});

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Removes (strips) whitespace from both ends of the string.
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category String
 * @sig String -> String
 * @param {String} str The string to trim.
 * @return {String} Trimmed version of `str`.
 * @example
 *
 *      R.trim('   xyz  '); //=> 'xyz'
 *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
 */
module.exports = function () {
  var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
  var zeroWidth = '\u200b';
  var hasProtoTrim = typeof String.prototype.trim === 'function';
  if (!hasProtoTrim || ws.trim() || !zeroWidth.trim()) {
    return _curry1(function trim(str) {
      var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
      var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
      return str.replace(beginRx, '').replace(endRx, '');
    });
  } else {
    return _curry1(function trim(str) {
      return str.trim();
    });
  }
}();

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _arity = __webpack_require__(12);
var _concat = __webpack_require__(10);
var _curry2 = __webpack_require__(0);

/**
 * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
 * function evaluates the `tryer`; if it does not throw, it simply returns the
 * result. If the `tryer` *does* throw, the returned function evaluates the
 * `catcher` function and returns its result. Note that for effective
 * composition with this function, both the `tryer` and `catcher` functions
 * must return the same type of results.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
 * @param {Function} tryer The function that may throw.
 * @param {Function} catcher The function that will be evaluated if `tryer` throws.
 * @return {Function} A new function that will catch exceptions and send then to the catcher.
 * @example
 *
 *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
 *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false
 */
module.exports = _curry2(function _tryCatch(tryer, catcher) {
  return _arity(tryer.length, function () {
    try {
      return tryer.apply(this, arguments);
    } catch (e) {
      return catcher.apply(this, _concat([e], arguments));
    }
  });
});

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Takes a function `fn`, which takes a single array argument, and returns a
 * function which:
 *
 *   - takes any number of positional arguments;
 *   - passes these arguments to `fn` as an array; and
 *   - returns the result.
 *
 * In other words, R.unapply derives a variadic function from a function which
 * takes an array. R.unapply is the inverse of R.apply.
 *
 * @func
 * @memberOf R
 * @since v0.8.0
 * @category Function
 * @sig ([*...] -> a) -> (*... -> a)
 * @param {Function} fn
 * @return {Function}
 * @see R.apply
 * @example
 *
 *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
 * @symb R.unapply(f)(a, b) = f([a, b])
 */
module.exports = _curry1(function unapply(fn) {
  return function () {
    return fn(Array.prototype.slice.call(arguments, 0));
  };
});

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);
var nAry = __webpack_require__(46);

/**
 * Wraps a function of any arity (including nullary) in a function that accepts
 * exactly 1 parameter. Any extraneous parameters will not be passed to the
 * supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Function
 * @sig (* -> b) -> (a -> b)
 * @param {Function} fn The function to wrap.
 * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
 *         arity 1.
 * @example
 *
 *      var takesTwoArgs = function(a, b) {
 *        return [a, b];
 *      };
 *      takesTwoArgs.length; //=> 2
 *      takesTwoArgs(1, 2); //=> [1, 2]
 *
 *      var takesOneArg = R.unary(takesTwoArgs);
 *      takesOneArg.length; //=> 1
 *      // Only 1 argument is passed to the wrapped function
 *      takesOneArg(1, 2); //=> [1, undefined]
 * @symb R.unary(f)(a, b, c) = f(a)
 */
module.exports = _curry1(function unary(fn) {
  return nAry(1, fn);
});

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var curryN = __webpack_require__(5);

/**
 * Returns a function of arity `n` from a (manually) curried function.
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Function
 * @sig Number -> (a -> b) -> (a -> c)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to uncurry.
 * @return {Function} A new function.
 * @see R.curry
 * @example
 *
 *      var addFour = a => b => c => d => a + b + c + d;
 *
 *      var uncurriedAddFour = R.uncurryN(4, addFour);
 *      uncurriedAddFour(1, 2, 3, 4); //=> 10
 */
module.exports = _curry2(function uncurryN(depth, fn) {
  return curryN(depth, function () {
    var currentDepth = 1;
    var value = fn;
    var idx = 0;
    var endIdx;
    while (currentDepth <= depth && typeof value === 'function') {
      endIdx = currentDepth === depth ? arguments.length : idx + value.length;
      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
      currentDepth += 1;
      idx = endIdx;
    }
    return value;
  });
});

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Builds a list from a seed value. Accepts an iterator function, which returns
 * either false to stop iteration or an array of length 2 containing the value
 * to add to the resulting list and the seed to be used in the next call to the
 * iterator function.
 *
 * The iterator function receives one argument: *(seed)*.
 *
 * @func
 * @memberOf R
 * @since v0.10.0
 * @category List
 * @sig (a -> [b]) -> * -> [b]
 * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
 *        either false to quit iteration or an array of length two to proceed. The element
 *        at index 0 of this array will be added to the resulting array, and the element
 *        at index 1 will be passed to the next call to `fn`.
 * @param {*} seed The seed value.
 * @return {Array} The final list.
 * @example
 *
 *      var f = n => n > 50 ? false : [-n, n + 10];
 *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
 * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]
 */
module.exports = _curry2(function unfold(fn, seed) {
  var pair = fn(seed);
  var result = [];
  while (pair && pair.length) {
    result[result.length] = pair[0];
    pair = fn(pair[1]);
  }
  return result;
});

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(10);
var _curry2 = __webpack_require__(0);
var compose = __webpack_require__(56);
var uniq = __webpack_require__(67);

/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig [*] -> [*] -> [*]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @example
 *
 *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
 */
module.exports = _curry2(compose(uniq, _concat));

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _concat = __webpack_require__(10);
var _curry3 = __webpack_require__(2);
var uniqWith = __webpack_require__(68);

/**
 * Combines two lists into a set (i.e. no duplicates) composed of the elements
 * of each list. Duplication is determined according to the value returned by
 * applying the supplied predicate to two list elements.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]
 * @param {Function} pred A predicate used to test whether two items are equal.
 * @param {Array} list1 The first list.
 * @param {Array} list2 The second list.
 * @return {Array} The first and second lists concatenated, with
 *         duplicates removed.
 * @see R.union
 * @example
 *
 *      var l1 = [{a: 1}, {a: 2}];
 *      var l2 = [{a: 1}, {a: 4}];
 *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
 */
module.exports = _curry3(function unionWith(pred, list1, list2) {
  return uniqWith(pred, _concat(list1, list2));
});

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is not satisfied, the function will return the result of
 * calling the `whenFalseFn` function with the same argument. If the predicate
 * is satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred        A predicate function
 * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
 *                               to a falsy value.
 * @param {*}        x           An object to test with the `pred` function and
 *                               pass to `whenFalseFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
 * @see R.ifElse, R.when
 * @example
 *
 *      // coerceArray :: (a|[a]) -> [a]
 *      var coerceArray = R.unless(R.isArrayLike, R.of);
 *      coerceArray([1, 2, 3]); //=> [1, 2, 3]
 *      coerceArray(1);         //=> [1]
 */
module.exports = _curry3(function unless(pred, whenFalseFn, x) {
  return pred(x) ? x : whenFalseFn(x);
});

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _identity = __webpack_require__(62);
var chain = __webpack_require__(55);

/**
 * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
 * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig Chain c => c (c a) -> c a
 * @param {*} list
 * @return {*}
 * @see R.flatten, R.chain
 * @example
 *
 *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
 *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
 */
module.exports = chain(_identity);

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Takes a predicate, a transformation function, and an initial value,
 * and returns a value of the same type as the initial value.
 * It does so by applying the transformation until the predicate is satisfied,
 * at which point it returns the satisfactory value.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred A predicate function
 * @param {Function} fn The iterator function
 * @param {*} init Initial value
 * @return {*} Final value that satisfies predicate
 * @example
 *
 *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128
 */
module.exports = _curry3(function until(pred, fn, init) {
  var val = init;
  while (!pred(val)) {
    val = fn(val);
  }
  return val;
});

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry1 = __webpack_require__(1);

/**
 * Returns a list of all the properties, including prototype properties, of the
 * supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.2.0
 * @category Object
 * @sig {k: v} -> [v]
 * @param {Object} obj The object to extract values from
 * @return {Array} An array of the values of the object's own and prototype properties.
 * @example
 *
 *      var F = function() { this.x = 'X'; };
 *      F.prototype.y = 'Y';
 *      var f = new F();
 *      R.valuesIn(f); //=> ['X', 'Y']
 */
module.exports = _curry1(function valuesIn(obj) {
  var prop;
  var vs = [];
  for (prop in obj) {
    vs[vs.length] = obj[prop];
  }
  return vs;
});

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Returns a "view" of the given data structure, determined by the given lens.
 * The lens's focus determines which portion of the data structure is visible.
 *
 * @func
 * @memberOf R
 * @since v0.16.0
 * @category Object
 * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
 * @sig Lens s a -> s -> a
 * @param {Lens} lens
 * @param {*} x
 * @return {*}
 * @see R.prop, R.lensIndex, R.lensProp
 * @example
 *
 *      var xLens = R.lensProp('x');
 *
 *      R.view(xLens, {x: 1, y: 2});  //=> 1
 *      R.view(xLens, {x: 4, y: 2});  //=> 4
 */
module.exports = function () {
  // `Const` is a functor that effectively ignores the function given to `map`.
  var Const = function (x) {
    return { value: x, map: function () {
        return this;
      } };
  };

  return _curry2(function view(lens, x) {
    // Using `Const` effectively ignores the setter function of the `lens`,
    // leaving the value returned by the getter function unmodified.
    return lens(Const)(x).value;
  });
}();

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Tests the final argument by passing it to the given predicate function. If
 * the predicate is satisfied, the function will return the result of calling
 * the `whenTrueFn` function with the same argument. If the predicate is not
 * satisfied, the argument is returned as is.
 *
 * @func
 * @memberOf R
 * @since v0.18.0
 * @category Logic
 * @sig (a -> Boolean) -> (a -> a) -> a -> a
 * @param {Function} pred       A predicate function
 * @param {Function} whenTrueFn A function to invoke when the `condition`
 *                              evaluates to a truthy value.
 * @param {*}        x          An object to test with the `pred` function and
 *                              pass to `whenTrueFn` if necessary.
 * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.
 * @see R.ifElse, R.unless
 * @example
 *
 *      // truncate :: String -> String
 *      var truncate = R.when(
 *        R.propSatisfies(R.gt(R.__, 10), 'length'),
 *        R.pipe(R.take(10), R.append('…'), R.join(''))
 *      );
 *      truncate('12345');         //=> '12345'
 *      truncate('0123456789ABC'); //=> '0123456789…'
 */
module.exports = _curry3(function when(pred, whenTrueFn, x) {
  return pred(x) ? whenTrueFn(x) : x;
});

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);
var equals = __webpack_require__(11);
var map = __webpack_require__(7);
var where = __webpack_require__(129);

/**
 * Takes a spec object and a test object; returns true if the test satisfies
 * the spec, false otherwise. An object satisfies the spec if, for each of the
 * spec's own properties, accessing that property of the object gives the same
 * value (in `R.equals` terms) as accessing that property of the spec.
 *
 * `whereEq` is a specialization of [`where`](#where).
 *
 * @func
 * @memberOf R
 * @since v0.14.0
 * @category Object
 * @sig {String: *} -> {String: *} -> Boolean
 * @param {Object} spec
 * @param {Object} testObj
 * @return {Boolean}
 * @see R.where
 * @example
 *
 *      // pred :: Object -> Boolean
 *      var pred = R.whereEq({a: 1, b: 2});
 *
 *      pred({a: 1});              //=> false
 *      pred({a: 1, b: 2});        //=> true
 *      pred({a: 1, b: 2, c: 3});  //=> true
 *      pred({a: 1, b: 1});        //=> false
 */
module.exports = _curry2(function whereEq(spec, testObj) {
  return where(map(equals, spec), testObj);
});

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _contains = __webpack_require__(22);
var _curry2 = __webpack_require__(0);
var flip = __webpack_require__(38);
var reject = __webpack_require__(48);

/**
 * Returns a new list without values in the first argument.
 * `R.equals` is used to determine equality.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.19.0
 * @category List
 * @sig [a] -> [a] -> [a]
 * @param {Array} list1 The values to be removed from `list2`.
 * @param {Array} list2 The array to remove values from.
 * @return {Array} The new array without values in `list1`.
 * @see R.transduce
 * @example
 *
 *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]
 */
module.exports = _curry2(function (xs, list) {
  return reject(flip(_contains)(xs), list);
});

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Creates a new list out of the two supplied by creating each possible pair
 * from the lists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} as The first list.
 * @param {Array} bs The second list.
 * @return {Array} The list made by combining each possible pair from
 *         `as` and `bs` into pairs (`[a, b]`).
 * @example
 *
 *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
 * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]
 */
module.exports = _curry2(function xprod(a, b) {
  // = xprodWith(prepend); (takes about 3 times as long...)
  var idx = 0;
  var ilen = a.length;
  var j;
  var jlen = b.length;
  var result = [];
  while (idx < ilen) {
    j = 0;
    while (j < jlen) {
      result[result.length] = [a[idx], b[j]];
      j += 1;
    }
    idx += 1;
  }
  return result;
});

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Creates a new list out of the two supplied by pairing up equally-positioned
 * items from both lists. The returned list is truncated to the length of the
 * shorter of the two input lists.
 * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [b] -> [[a,b]]
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
 * @example
 *
 *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
 * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]
 */
module.exports = _curry2(function zip(a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);
  while (idx < len) {
    rv[idx] = [a[idx], b[idx]];
    idx += 1;
  }
  return rv;
});

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry2 = __webpack_require__(0);

/**
 * Creates a new object out of a list of keys and a list of values.
 * Key/value pairing is truncated to the length of the shorter of the two lists.
 * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.
 *
 * @func
 * @memberOf R
 * @since v0.3.0
 * @category List
 * @sig [String] -> [*] -> {String: *}
 * @param {Array} keys The array that will be properties on the output object.
 * @param {Array} values The list of values on the output object.
 * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
 * @example
 *
 *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
 */
module.exports = _curry2(function zipObj(keys, values) {
  var idx = 0;
  var len = Math.min(keys.length, values.length);
  var out = {};
  while (idx < len) {
    out[keys[idx]] = values[idx];
    idx += 1;
  }
  return out;
});

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _curry3 = __webpack_require__(2);

/**
 * Creates a new list out of the two supplied by applying the function to each
 * equally-positioned pair in the lists. The returned list is truncated to the
 * length of the shorter of the two input lists.
 *
 * @function
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a,b -> c) -> [a] -> [b] -> [c]
 * @param {Function} fn The function used to combine the two elements into one value.
 * @param {Array} list1 The first array to consider.
 * @param {Array} list2 The second array to consider.
 * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
 *         using `fn`.
 * @example
 *
 *      var f = (x, y) => {
 *        // ...
 *      };
 *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
 *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
 * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]
 */
module.exports = _curry3(function zipWith(fn, a, b) {
  var rv = [];
  var idx = 0;
  var len = Math.min(a.length, b.length);
  while (idx < len) {
    rv[idx] = fn(a[idx], b[idx]);
    idx += 1;
  }
  return rv;
});

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(131);

/*<replacement>*/
var util = __webpack_require__(27);
util.inherits = __webpack_require__(19);
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(9).Buffer;
/*<replacement>*/
var bufferShim = __webpack_require__(51);
/*</replacement>*/

module.exports = BufferList;

function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

BufferList.prototype.push = function (v) {
  var entry = { data: v, next: null };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};

BufferList.prototype.unshift = function (v) {
  var entry = { data: v, next: this.head };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};

BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};

BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};

BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }return ret;
};

BufferList.prototype.concat = function (n) {
  if (this.length === 0) return bufferShim.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = bufferShim.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
        // Callback can either be a function or a string
        if (typeof callback !== "function") {
            callback = new Function("" + callback);
        }
        // Copy function arguments
        var args = new Array(arguments.length - 1);
        for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i + 1];
        }
        // Store and register the task
        var task = { callback: callback, args: args };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
            case 0:
                callback();
                break;
            case 1:
                callback(args[0]);
                break;
            case 2:
                callback(args[0], args[1]);
                break;
            case 3:
                callback(args[0], args[1], args[2]);
                break;
            default:
                callback.apply(undefined, args);
                break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function (handle) {
            process.nextTick(function () {
                runIfPresent(handle);
            });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function () {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function (event) {
            if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function (handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function (event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function (handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function (handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function (handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();
    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();
    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();
    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();
    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? undefined : global : self);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15), __webpack_require__(20)))

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {

var capability = __webpack_require__(136);
var inherits = __webpack_require__(19);
var response = __webpack_require__(362);
var stream = __webpack_require__(134);
var toArrayBuffer = __webpack_require__(366);

var IncomingMessage = response.IncomingMessage;
var rStates = response.readyStates;

function decideMode(preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch';
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer';
	} else if (capability.msstream) {
		return 'ms-stream';
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer';
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray';
	} else {
		return 'text';
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this;
	stream.Writable.call(self);

	self._opts = opts;
	self._body = [];
	self._headers = {};
	if (opts.auth) self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name]);
	});

	var preferBinary;
	var useFetch = true;
	if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
		// If the use of XHR should be preferred and includes preserving the 'content-type' header.
		// Force XHR to be used since the Fetch API does not yet support timeouts.
		useFetch = false;
		preferBinary = true;
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false;
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType;
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true;
	} else {
		throw new Error('Invalid value for opts.mode');
	}
	self._mode = decideMode(preferBinary, useFetch);

	self.on('finish', function () {
		self._onFinish();
	});
};

inherits(ClientRequest, stream.Writable);

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this;
	var lowerName = name.toLowerCase();
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1) return;

	self._headers[lowerName] = {
		name: name,
		value: value
	};
};

ClientRequest.prototype.getHeader = function (name) {
	var self = this;
	return self._headers[name.toLowerCase()].value;
};

ClientRequest.prototype.removeHeader = function (name) {
	var self = this;
	delete self._headers[name.toLowerCase()];
};

ClientRequest.prototype._onFinish = function () {
	var self = this;

	if (self._destroyed) return;
	var opts = self._opts;

	var headersObj = self._headers;
	var body = null;
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
		if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return toArrayBuffer(buffer);
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			});
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString();
		}
	}

	// create flattened list of headers
	var headersList = [];
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name;
		var value = headersObj[keyName].value;
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v]);
			});
		} else {
			headersList.push([name, value]);
		}
	});

	if (self._mode === 'fetch') {
		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin'
		}).then(function (response) {
			self._fetchResponse = response;
			self._connect();
		}, function (reason) {
			self.emit('error', reason);
		});
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest();
		try {
			xhr.open(self._opts.method, self._opts.url, true);
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err);
			});
			return;
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr) xhr.responseType = self._mode.split(':')[0];

		if ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;

		if (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');

		if ('timeout' in opts) {
			xhr.timeout = opts.timeout;
			xhr.ontimeout = function () {
				self.emit('timeout');
			};
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1]);
		});

		self._response = null;
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress();
					break;
			}
		};
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress();
			};
		}

		xhr.onerror = function () {
			if (self._destroyed) return;
			self.emit('error', new Error('XHR error'));
		};

		try {
			xhr.send(body);
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err);
			});
			return;
		}
	}
};

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid(xhr) {
	try {
		var status = xhr.status;
		return status !== null && status !== 0;
	} catch (e) {
		return false;
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this;

	if (!statusValid(self._xhr) || self._destroyed) return;

	if (!self._response) self._connect();

	self._response._onXHRProgress();
};

ClientRequest.prototype._connect = function () {
	var self = this;

	if (self._destroyed) return;

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
	self._response.on('error', function (err) {
		self.emit('error', err);
	});

	self.emit('response', self._response);
};

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this;

	self._body.push(chunk);
	cb();
};

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this;
	self._destroyed = true;
	if (self._response) self._response._destroyed = true;
	if (self._xhr) self._xhr.abort();
	// Currently, there isn't a way to truly abort a fetch.
	// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
};

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this;
	if (typeof data === 'function') {
		cb = data;
		data = undefined;
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb);
};

ClientRequest.prototype.flushHeaders = function () {};
ClientRequest.prototype.setTimeout = function () {};
ClientRequest.prototype.setNoDelay = function () {};
ClientRequest.prototype.setSocketKeepAlive = function () {};

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'user-agent', 'via'];
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer, __webpack_require__(15), __webpack_require__(20)))

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {

var capability = __webpack_require__(136);
var inherits = __webpack_require__(19);
var stream = __webpack_require__(134);

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
};

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
	var self = this;
	stream.Readable.call(self);

	self._mode = mode;
	self.headers = {};
	self.rawHeaders = [];
	self.trailers = {};
	self.rawTrailers = [];

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close');
		});
	});

	if (mode === 'fetch') {
		self._fetchResponse = response;

		self.url = response.url;
		self.statusCode = response.status;
		self.statusMessage = response.statusText;

		response.headers.forEach(function (header, key) {
			self.headers[key.toLowerCase()] = header;
			self.rawHeaders.push(key, header);
		});

		// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
		var reader = response.body.getReader();
		function read() {
			reader.read().then(function (result) {
				if (self._destroyed) return;
				if (result.done) {
					self.push(null);
					return;
				}
				self.push(new Buffer(result.value));
				read();
			}).catch(function (err) {
				self.emit('error', err);
			});
		}
		read();
	} else {
		self._xhr = xhr;
		self._pos = 0;

		self.url = xhr.responseURL;
		self.statusCode = xhr.status;
		self.statusMessage = xhr.statusText;
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/);
			if (matches) {
				var key = matches[1].toLowerCase();
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = [];
					}
					self.headers[key].push(matches[2]);
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2];
				} else {
					self.headers[key] = matches[2];
				}
				self.rawHeaders.push(matches[1], matches[2]);
			}
		});

		self._charset = 'x-user-defined';
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type'];
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase();
				}
			}
			if (!self._charset) self._charset = 'utf-8'; // best guess
		}
	}
};

inherits(IncomingMessage, stream.Readable);

IncomingMessage.prototype._read = function () {};

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this;

	var xhr = self._xhr;

	var response = null;
	switch (self._mode) {
		case 'text:vbarray':
			// For IE9
			if (xhr.readyState !== rStates.DONE) break;
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray();
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response));
				break;
			}
		// Falls through in IE8	
		case 'text':
			try {
				// This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText;
			} catch (e) {
				self._mode = 'text:vbarray';
				break;
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos);
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length);
					for (var i = 0; i < newData.length; i++) buffer[i] = newData.charCodeAt(i) & 0xff;

					self.push(buffer);
				} else {
					self.push(newData, self._charset);
				}
				self._pos = response.length;
			}
			break;
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response) break;
			response = xhr.response;
			self.push(new Buffer(new Uint8Array(response)));
			break;
		case 'moz-chunked-arraybuffer':
			// take whole
			response = xhr.response;
			if (xhr.readyState !== rStates.LOADING || !response) break;
			self.push(new Buffer(new Uint8Array(response)));
			break;
		case 'ms-stream':
			response = xhr.response;
			if (xhr.readyState !== rStates.LOADING) break;
			var reader = new global.MSStreamReader();
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
					self._pos = reader.result.byteLength;
				}
			};
			reader.onload = function () {
				self.push(null);
			};
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response);
			break;
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null);
	}
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20), __webpack_require__(9).Buffer, __webpack_require__(15)))

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
	// get current location
	var location = typeof window !== "undefined" && window.location;

	if (!location) {
		throw new Error("fixUrls requires window.location");
	}

	// blank or null?
	if (!css || typeof css !== "string") {
		return css;
	}

	var baseUrl = location.protocol + "//" + location.host;
	var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
 This regular expression is just a way to recursively match brackets within
 a string.
 	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
    (  = Start a capturing group
      (?:  = Start a non-capturing group
          [^)(]  = Match anything that isn't a parentheses
          |  = OR
          \(  = Match a start parentheses
              (?:  = Start another non-capturing groups
                  [^)(]+  = Match anything that isn't a parentheses
                  |  = OR
                  \(  = Match a start parentheses
                      [^)(]*  = Match anything that isn't a parentheses
                  \)  = Match a end parentheses
              )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
  \)  = Match a close parens
 	 /gi  = Get all matches, not the first.  Be case insensitive.
  */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {
			return $1;
		}).replace(/^'(.*)'$/, function (o, $1) {
			return $1;
		});

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
			return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
			//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function () {};
Timeout.prototype.close = function () {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(360);
exports.setImmediate = setImmediate;
exports.clearImmediate = clearImmediate;

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {
"0.50.0";
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/

var CryptoJS = CryptoJS || function (e, m) {
    var p = {},
        j = p.lib = {},
        l = function () {},
        f = j.Base = { extend: function (a) {
            l.prototype = this;var c = new l();a && c.mixIn(a);c.hasOwnProperty("init") || (c.init = function () {
                c.$super.init.apply(this, arguments);
            });c.init.prototype = c;c.$super = this;return c;
        }, create: function () {
            var a = this.extend();a.init.apply(a, arguments);return a;
        }, init: function () {}, mixIn: function (a) {
            for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]);a.hasOwnProperty("toString") && (this.toString = a.toString);
        }, clone: function () {
            return this.init.prototype.extend(this);
        } },
        n = j.WordArray = f.extend({ init: function (a, c) {
            a = this.words = a || [];this.sigBytes = c != m ? c : 4 * a.length;
        }, toString: function (a) {
            return (a || h).stringify(this);
        }, concat: function (a) {
            var c = this.words,
                q = a.words,
                d = this.sigBytes;a = a.sigBytes;this.clamp();if (d % 4) for (var b = 0; b < a; b++) c[d + b >>> 2] |= (q[b >>> 2] >>> 24 - 8 * (b % 4) & 255) << 24 - 8 * ((d + b) % 4);else if (65535 < q.length) for (b = 0; b < a; b += 4) c[d + b >>> 2] = q[b >>> 2];else c.push.apply(c, q);this.sigBytes += a;return this;
        }, clamp: function () {
            var a = this.words,
                c = this.sigBytes;a[c >>> 2] &= 4294967295 << 32 - 8 * (c % 4);a.length = e.ceil(c / 4);
        }, clone: function () {
            var a = f.clone.call(this);a.words = this.words.slice(0);return a;
        }, random: function (a) {
            for (var c = [], b = 0; b < a; b += 4) c.push(4294967296 * e.random() | 0);return new n.init(c, a);
        } }),
        b = p.enc = {},
        h = b.Hex = { stringify: function (a) {
            var c = a.words;a = a.sigBytes;for (var b = [], d = 0; d < a; d++) {
                var f = c[d >>> 2] >>> 24 - 8 * (d % 4) & 255;b.push((f >>> 4).toString(16));b.push((f & 15).toString(16));
            }return b.join("");
        }, parse: function (a) {
            for (var c = a.length, b = [], d = 0; d < c; d += 2) b[d >>> 3] |= parseInt(a.substr(d, 2), 16) << 24 - 4 * (d % 8);return new n.init(b, c / 2);
        } },
        g = b.Latin1 = { stringify: function (a) {
            var c = a.words;a = a.sigBytes;for (var b = [], d = 0; d < a; d++) b.push(String.fromCharCode(c[d >>> 2] >>> 24 - 8 * (d % 4) & 255));return b.join("");
        }, parse: function (a) {
            for (var c = a.length, b = [], d = 0; d < c; d++) b[d >>> 2] |= (a.charCodeAt(d) & 255) << 24 - 8 * (d % 4);return new n.init(b, c);
        } },
        r = b.Utf8 = { stringify: function (a) {
            try {
                return decodeURIComponent(escape(g.stringify(a)));
            } catch (c) {
                throw Error("Malformed UTF-8 data");
            }
        }, parse: function (a) {
            return g.parse(unescape(encodeURIComponent(a)));
        } },
        k = j.BufferedBlockAlgorithm = f.extend({ reset: function () {
            this._data = new n.init();this._nDataBytes = 0;
        }, _append: function (a) {
            "string" == typeof a && (a = r.parse(a));this._data.concat(a);this._nDataBytes += a.sigBytes;
        }, _process: function (a) {
            var c = this._data,
                b = c.words,
                d = c.sigBytes,
                f = this.blockSize,
                h = d / (4 * f),
                h = a ? e.ceil(h) : e.max((h | 0) - this._minBufferSize, 0);a = h * f;d = e.min(4 * a, d);if (a) {
                for (var g = 0; g < a; g += f) this._doProcessBlock(b, g);g = b.splice(0, a);c.sigBytes -= d;
            }return new n.init(g, d);
        }, clone: function () {
            var a = f.clone.call(this);
            a._data = this._data.clone();return a;
        }, _minBufferSize: 0 });j.Hasher = k.extend({ cfg: f.extend(), init: function (a) {
            this.cfg = this.cfg.extend(a);this.reset();
        }, reset: function () {
            k.reset.call(this);this._doReset();
        }, update: function (a) {
            this._append(a);this._process();return this;
        }, finalize: function (a) {
            a && this._append(a);return this._doFinalize();
        }, blockSize: 16, _createHelper: function (a) {
            return function (c, b) {
                return new a.init(b).finalize(c);
            };
        }, _createHmacHelper: function (a) {
            return function (b, f) {
                return new s.HMAC.init(a, f).finalize(b);
            };
        } });var s = p.algo = {};return p;
}(Math);
(function () {
    var e = CryptoJS,
        m = e.lib,
        p = m.WordArray,
        j = m.Hasher,
        l = [],
        m = e.algo.SHA1 = j.extend({ _doReset: function () {
            this._hash = new p.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
        }, _doProcessBlock: function (f, n) {
            for (var b = this._hash.words, h = b[0], g = b[1], e = b[2], k = b[3], j = b[4], a = 0; 80 > a; a++) {
                if (16 > a) l[a] = f[n + a] | 0;else {
                    var c = l[a - 3] ^ l[a - 8] ^ l[a - 14] ^ l[a - 16];l[a] = c << 1 | c >>> 31;
                }c = (h << 5 | h >>> 27) + j + l[a];c = 20 > a ? c + ((g & e | ~g & k) + 1518500249) : 40 > a ? c + ((g ^ e ^ k) + 1859775393) : 60 > a ? c + ((g & e | g & k | e & k) - 1894007588) : c + ((g ^ e ^ k) - 899497514);j = k;k = e;e = g << 30 | g >>> 2;g = h;h = c;
            }b[0] = b[0] + h | 0;b[1] = b[1] + g | 0;b[2] = b[2] + e | 0;b[3] = b[3] + k | 0;b[4] = b[4] + j | 0;
        }, _doFinalize: function () {
            var f = this._data,
                e = f.words,
                b = 8 * this._nDataBytes,
                h = 8 * f.sigBytes;e[h >>> 5] |= 128 << 24 - h % 32;e[(h + 64 >>> 9 << 4) + 14] = Math.floor(b / 4294967296);e[(h + 64 >>> 9 << 4) + 15] = b;f.sigBytes = 4 * e.length;this._process();return this._hash;
        }, clone: function () {
            var e = j.clone.call(this);e._hash = this._hash.clone();return e;
        } });e.SHA1 = j._createHelper(m);e.HmacSHA1 = j._createHmacHelper(m);
})();

/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS = CryptoJS || function (h, s) {
    var f = {},
        t = f.lib = {},
        g = function () {},
        j = t.Base = { extend: function (a) {
            g.prototype = this;var c = new g();a && c.mixIn(a);c.hasOwnProperty("init") || (c.init = function () {
                c.$super.init.apply(this, arguments);
            });c.init.prototype = c;c.$super = this;return c;
        }, create: function () {
            var a = this.extend();a.init.apply(a, arguments);return a;
        }, init: function () {}, mixIn: function (a) {
            for (var c in a) a.hasOwnProperty(c) && (this[c] = a[c]);a.hasOwnProperty("toString") && (this.toString = a.toString);
        }, clone: function () {
            return this.init.prototype.extend(this);
        } },
        q = t.WordArray = j.extend({ init: function (a, c) {
            a = this.words = a || [];this.sigBytes = c != s ? c : 4 * a.length;
        }, toString: function (a) {
            return (a || u).stringify(this);
        }, concat: function (a) {
            var c = this.words,
                d = a.words,
                b = this.sigBytes;a = a.sigBytes;this.clamp();if (b % 4) for (var e = 0; e < a; e++) c[b + e >>> 2] |= (d[e >>> 2] >>> 24 - 8 * (e % 4) & 255) << 24 - 8 * ((b + e) % 4);else if (65535 < d.length) for (e = 0; e < a; e += 4) c[b + e >>> 2] = d[e >>> 2];else c.push.apply(c, d);this.sigBytes += a;return this;
        }, clamp: function () {
            var a = this.words,
                c = this.sigBytes;a[c >>> 2] &= 4294967295 << 32 - 8 * (c % 4);a.length = h.ceil(c / 4);
        }, clone: function () {
            var a = j.clone.call(this);a.words = this.words.slice(0);return a;
        }, random: function (a) {
            for (var c = [], d = 0; d < a; d += 4) c.push(4294967296 * h.random() | 0);return new q.init(c, a);
        } }),
        v = f.enc = {},
        u = v.Hex = { stringify: function (a) {
            var c = a.words;a = a.sigBytes;for (var d = [], b = 0; b < a; b++) {
                var e = c[b >>> 2] >>> 24 - 8 * (b % 4) & 255;d.push((e >>> 4).toString(16));d.push((e & 15).toString(16));
            }return d.join("");
        }, parse: function (a) {
            for (var c = a.length, d = [], b = 0; b < c; b += 2) d[b >>> 3] |= parseInt(a.substr(b, 2), 16) << 24 - 4 * (b % 8);return new q.init(d, c / 2);
        } },
        k = v.Latin1 = { stringify: function (a) {
            var c = a.words;a = a.sigBytes;for (var d = [], b = 0; b < a; b++) d.push(String.fromCharCode(c[b >>> 2] >>> 24 - 8 * (b % 4) & 255));return d.join("");
        }, parse: function (a) {
            for (var c = a.length, d = [], b = 0; b < c; b++) d[b >>> 2] |= (a.charCodeAt(b) & 255) << 24 - 8 * (b % 4);return new q.init(d, c);
        } },
        l = v.Utf8 = { stringify: function (a) {
            try {
                return decodeURIComponent(escape(k.stringify(a)));
            } catch (c) {
                throw Error("Malformed UTF-8 data");
            }
        }, parse: function (a) {
            return k.parse(unescape(encodeURIComponent(a)));
        } },
        x = t.BufferedBlockAlgorithm = j.extend({ reset: function () {
            this._data = new q.init();this._nDataBytes = 0;
        }, _append: function (a) {
            "string" == typeof a && (a = l.parse(a));this._data.concat(a);this._nDataBytes += a.sigBytes;
        }, _process: function (a) {
            var c = this._data,
                d = c.words,
                b = c.sigBytes,
                e = this.blockSize,
                f = b / (4 * e),
                f = a ? h.ceil(f) : h.max((f | 0) - this._minBufferSize, 0);a = f * e;b = h.min(4 * a, b);if (a) {
                for (var m = 0; m < a; m += e) this._doProcessBlock(d, m);m = d.splice(0, a);c.sigBytes -= b;
            }return new q.init(m, b);
        }, clone: function () {
            var a = j.clone.call(this);
            a._data = this._data.clone();return a;
        }, _minBufferSize: 0 });t.Hasher = x.extend({ cfg: j.extend(), init: function (a) {
            this.cfg = this.cfg.extend(a);this.reset();
        }, reset: function () {
            x.reset.call(this);this._doReset();
        }, update: function (a) {
            this._append(a);this._process();return this;
        }, finalize: function (a) {
            a && this._append(a);return this._doFinalize();
        }, blockSize: 16, _createHelper: function (a) {
            return function (c, d) {
                return new a.init(d).finalize(c);
            };
        }, _createHmacHelper: function (a) {
            return function (c, d) {
                return new w.HMAC.init(a, d).finalize(c);
            };
        } });var w = f.algo = {};return f;
}(Math);
(function (h) {
    for (var s = CryptoJS, f = s.lib, t = f.WordArray, g = f.Hasher, f = s.algo, j = [], q = [], v = function (a) {
        return 4294967296 * (a - (a | 0)) | 0;
    }, u = 2, k = 0; 64 > k;) {
        var l;a: {
            l = u;for (var x = h.sqrt(l), w = 2; w <= x; w++) if (!(l % w)) {
                l = !1;break a;
            }l = !0;
        }l && (8 > k && (j[k] = v(h.pow(u, 0.5))), q[k] = v(h.pow(u, 1 / 3)), k++);u++;
    }var a = [],
        f = f.SHA256 = g.extend({ _doReset: function () {
            this._hash = new t.init(j.slice(0));
        }, _doProcessBlock: function (c, d) {
            for (var b = this._hash.words, e = b[0], f = b[1], m = b[2], h = b[3], p = b[4], j = b[5], k = b[6], l = b[7], n = 0; 64 > n; n++) {
                if (16 > n) a[n] = c[d + n] | 0;else {
                    var r = a[n - 15],
                        g = a[n - 2];a[n] = ((r << 25 | r >>> 7) ^ (r << 14 | r >>> 18) ^ r >>> 3) + a[n - 7] + ((g << 15 | g >>> 17) ^ (g << 13 | g >>> 19) ^ g >>> 10) + a[n - 16];
                }r = l + ((p << 26 | p >>> 6) ^ (p << 21 | p >>> 11) ^ (p << 7 | p >>> 25)) + (p & j ^ ~p & k) + q[n] + a[n];g = ((e << 30 | e >>> 2) ^ (e << 19 | e >>> 13) ^ (e << 10 | e >>> 22)) + (e & f ^ e & m ^ f & m);l = k;k = j;j = p;p = h + r | 0;h = m;m = f;f = e;e = r + g | 0;
            }b[0] = b[0] + e | 0;b[1] = b[1] + f | 0;b[2] = b[2] + m | 0;b[3] = b[3] + h | 0;b[4] = b[4] + p | 0;b[5] = b[5] + j | 0;b[6] = b[6] + k | 0;b[7] = b[7] + l | 0;
        }, _doFinalize: function () {
            var a = this._data,
                d = a.words,
                b = 8 * this._nDataBytes,
                e = 8 * a.sigBytes;
            d[e >>> 5] |= 128 << 24 - e % 32;d[(e + 64 >>> 9 << 4) + 14] = h.floor(b / 4294967296);d[(e + 64 >>> 9 << 4) + 15] = b;a.sigBytes = 4 * d.length;this._process();return this._hash;
        }, clone: function () {
            var a = g.clone.call(this);a._hash = this._hash.clone();return a;
        } });s.SHA256 = g._createHelper(f);s.HmacSHA256 = g._createHmacHelper(f);
})(Math);

/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var C_enc = C.enc;

    /**
     * Base64 encoding strategy.
     */
    var Base64 = C_enc.Base64 = {
        /**
         * Converts a word array to a Base64 string.
         *
         * @param {WordArray} wordArray The word array.
         *
         * @return {string} The Base64 string.
         *
         * @static
         *
         * @example
         *
         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
         */
        stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;

            // Clamp excess bits
            wordArray.clamp();

            // Convert
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
                var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
                var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;

                var triplet = byte1 << 16 | byte2 << 8 | byte3;

                for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                    base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
                }
            }

            // Add padding
            var paddingChar = map.charAt(64);
            if (paddingChar) {
                while (base64Chars.length % 4) {
                    base64Chars.push(paddingChar);
                }
            }

            return base64Chars.join('');
        },

        /**
         * Converts a Base64 string to a word array.
         *
         * @param {string} base64Str The Base64 string.
         *
         * @return {WordArray} The word array.
         *
         * @static
         *
         * @example
         *
         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
         */
        parse: function (base64Str) {
            // Shortcuts
            var base64StrLength = base64Str.length;
            var map = this._map;

            // Ignore padding
            var paddingChar = map.charAt(64);
            if (paddingChar) {
                var paddingIndex = base64Str.indexOf(paddingChar);
                if (paddingIndex != -1) {
                    base64StrLength = paddingIndex;
                }
            }

            // Convert
            var words = [];
            var nBytes = 0;
            for (var i = 0; i < base64StrLength; i++) {
                if (i % 4) {
                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << i % 4 * 2;
                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> 6 - i % 4 * 2;
                    words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
                    nBytes++;
                }
            }

            return WordArray.create(words, nBytes);
        },

        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
    };
})();

/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
    // Check if typed arrays are supported
    if (typeof ArrayBuffer != 'function') {
        return;
    }

    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;

    // Reference original init
    var superInit = WordArray.init;

    // Augment WordArray.init to handle typed arrays
    var subInit = WordArray.init = function (typedArray) {
        // Convert buffers to uint8
        if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
        }

        // Convert other array views to uint8
        if (typedArray instanceof Int8Array || typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
        }

        // Handle Uint8Array
        if (typedArray instanceof Uint8Array) {
            // Shortcut
            var typedArrayByteLength = typedArray.byteLength;

            // Extract bytes
            var words = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
                words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }

            // Initialize this word array
            superInit.call(this, words, typedArrayByteLength);
        } else {
            // Else call normal init
            superInit.apply(this, arguments);
        }
    };

    subInit.prototype = WordArray;
})();

/*!
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

TODO:

* Add statement queueing

@module TinCan
**/
var TinCan;

(function () {
    "use strict";

    var _reservedQSParams = {
        //
        // these are TC spec reserved words that may end up in queries to the endpoint
        //
        statementId: true,
        voidedStatementId: true,
        verb: true,
        object: true,
        registration: true,
        context: true,
        actor: true,
        since: true,
        until: true,
        limit: true,
        authoritative: true,
        sparse: true,
        instructor: true,
        ascending: true,
        continueToken: true,
        agent: true,
        activityId: true,
        stateId: true,
        profileId: true,

        //
        // these are suggested by the LMS launch spec addition that TinCanJS consumes
        //
        activity_platform: true,
        grouping: true,
        "Accept-Language": true
    };

    /**
    @class TinCan
    @constructor
    @param {Object} [options] Configuration used to initialize.
        @param {String} [options.url] URL for determining launch provided
            configuration options
        @param {Array} [options.recordStores] list of pre-configured LRSes
        @param {Object|TinCan.Agent} [options.actor] default actor
        @param {Object|TinCan.Activity} [options.activity] default activity
        @param {String} [options.registration] default registration
        @param {Object|TinCan.Context} [options.context] default context
    **/
    TinCan = function (cfg) {
        this.log("constructor");

        /**
        @property recordStores
        @type Array
        */
        this.recordStores = [];

        /**
        Default actor used when preparing statements that
        don't yet have an actor set, and for saving state, etc.
         @property actor
        @type Object
        */
        this.actor = null;

        /**
        Default activity, may be used as a statement 'target'
        or incorporated into 'context'
         @property activity
        @type Object
        */
        this.activity = null;

        /**
        Default registration, included in default context when
        provided, otherwise used in statement queries
         @property registration
        @type String
        */
        this.registration = null;

        /**
        Default context used when preparing statements that
        don't yet have a context set, or mixed in when one
        has been provided, properties do NOT override on mixing
         @property context
        @type Object
        */
        this.context = null;

        this.init(cfg);
    };

    TinCan.prototype = {
        LOG_SRC: "TinCan",

        /**
        Safe version of logging, only displays when .DEBUG is true, and console.log
        is available
         @method log
        @param {String} msg Message to output
        */
        log: function (msg, src) {
            /* globals console */
            if (TinCan.DEBUG && typeof console !== "undefined" && console.log) {
                src = src || this.LOG_SRC || "TinCan";

                console.log("TinCan." + src + ": " + msg);
            }
        },

        /**
        @method init
        @param {Object} [options] Configuration used to initialize (see TinCan constructor).
        */
        init: function (cfg) {
            this.log("init");
            var i;

            cfg = cfg || {};

            if (cfg.hasOwnProperty("url") && cfg.url !== "") {
                this._initFromQueryString(cfg.url);
            }

            if (cfg.hasOwnProperty("recordStores") && cfg.recordStores !== undefined) {
                for (i = 0; i < cfg.recordStores.length; i += 1) {
                    this.addRecordStore(cfg.recordStores[i]);
                }
            }
            if (cfg.hasOwnProperty("activity")) {
                if (cfg.activity instanceof TinCan.Activity) {
                    this.activity = cfg.activity;
                } else {
                    this.activity = new TinCan.Activity(cfg.activity);
                }
            }
            if (cfg.hasOwnProperty("actor")) {
                if (cfg.actor instanceof TinCan.Agent) {
                    this.actor = cfg.actor;
                } else {
                    this.actor = new TinCan.Agent(cfg.actor);
                }
            }
            if (cfg.hasOwnProperty("context")) {
                if (cfg.context instanceof TinCan.Context) {
                    this.context = cfg.context;
                } else {
                    this.context = new TinCan.Context(cfg.context);
                }
            }
            if (cfg.hasOwnProperty("registration")) {
                this.registration = cfg.registration;
            }
        },

        /**
        @method _initFromQueryString
        @param {String} url
        @private
        */
        _initFromQueryString: function (url) {
            this.log("_initFromQueryString");

            var i,
                prop,
                qsParams = TinCan.Utils.parseURL(url).params,
                lrsProps = ["endpoint", "auth"],
                lrsCfg = {},
                contextCfg,
                extended = null;

            if (qsParams.hasOwnProperty("actor")) {
                this.log("_initFromQueryString - found actor: " + qsParams.actor);
                try {
                    this.actor = TinCan.Agent.fromJSON(qsParams.actor);
                    delete qsParams.actor;
                } catch (ex) {
                    this.log("_initFromQueryString - failed to set actor: " + ex);
                }
            }

            if (qsParams.hasOwnProperty("activity_id")) {
                this.activity = new TinCan.Activity({
                    id: qsParams.activity_id
                });
                delete qsParams.activity_id;
            }

            if (qsParams.hasOwnProperty("activity_platform") || qsParams.hasOwnProperty("registration") || qsParams.hasOwnProperty("grouping")) {
                contextCfg = {};

                if (qsParams.hasOwnProperty("activity_platform")) {
                    contextCfg.platform = qsParams.activity_platform;
                    delete qsParams.activity_platform;
                }
                if (qsParams.hasOwnProperty("registration")) {
                    //
                    // stored in two locations cause we always want it in the default
                    // context, but we also want to be able to get to it for Statement
                    // queries
                    //
                    contextCfg.registration = this.registration = qsParams.registration;
                    delete qsParams.registration;
                }
                if (qsParams.hasOwnProperty("grouping")) {
                    contextCfg.contextActivities = {};
                    contextCfg.contextActivities.grouping = qsParams.grouping;
                    delete qsParams.grouping;
                }

                this.context = new TinCan.Context(contextCfg);
            }

            //
            // order matters here, process the URL provided LRS last because it gets
            // all the remaining parameters so that they get passed through
            //
            if (qsParams.hasOwnProperty("endpoint")) {
                for (i = 0; i < lrsProps.length; i += 1) {
                    prop = lrsProps[i];
                    if (qsParams.hasOwnProperty(prop)) {
                        lrsCfg[prop] = qsParams[prop];
                        delete qsParams[prop];
                    }
                }

                // remove our reserved params so they don't end up  in the extended object
                for (i in qsParams) {
                    if (qsParams.hasOwnProperty(i)) {
                        if (_reservedQSParams.hasOwnProperty(i)) {
                            delete qsParams[i];
                        } else {
                            extended = extended || {};
                            extended[i] = qsParams[i];
                        }
                    }
                }
                if (extended !== null) {
                    lrsCfg.extended = extended;
                }

                lrsCfg.allowFail = false;

                this.addRecordStore(lrsCfg);
            }
        },

        /**
        @method addRecordStore
        @param {Object} Configuration data
          * TODO:
         * check endpoint for trailing '/'
         * check for unique endpoints
        */
        addRecordStore: function (cfg) {
            this.log("addRecordStore");
            var lrs;
            if (cfg instanceof TinCan.LRS) {
                lrs = cfg;
            } else {
                lrs = new TinCan.LRS(cfg);
            }
            this.recordStores.push(lrs);
        },

        /**
        @method prepareStatement
        @param {Object|TinCan.Statement} Base statement properties or
            pre-created TinCan.Statement instance
        @return {TinCan.Statement}
        */
        prepareStatement: function (stmt) {
            this.log("prepareStatement");
            if (!(stmt instanceof TinCan.Statement)) {
                stmt = new TinCan.Statement(stmt);
            }

            if (stmt.actor === null && this.actor !== null) {
                stmt.actor = this.actor;
            }
            if (stmt.target === null && this.activity !== null) {
                stmt.target = this.activity;
            }

            if (this.context !== null) {
                if (stmt.context === null) {
                    stmt.context = this.context;
                } else {
                    if (stmt.context.registration === null) {
                        stmt.context.registration = this.context.registration;
                    }
                    if (stmt.context.platform === null) {
                        stmt.context.platform = this.context.platform;
                    }

                    if (this.context.contextActivities !== null) {
                        if (stmt.context.contextActivities === null) {
                            stmt.context.contextActivities = this.context.contextActivities;
                        } else {
                            if (this.context.contextActivities.grouping !== null && stmt.context.contextActivities.grouping === null) {
                                stmt.context.contextActivities.grouping = this.context.contextActivities.grouping;
                            }
                            if (this.context.contextActivities.parent !== null && stmt.context.contextActivities.parent === null) {
                                stmt.context.contextActivities.parent = this.context.contextActivities.parent;
                            }
                            if (this.context.contextActivities.other !== null && stmt.context.contextActivities.other === null) {
                                stmt.context.contextActivities.other = this.context.contextActivities.other;
                            }
                        }
                    }
                }
            }

            return stmt;
        },

        /**
        Calls saveStatement on each configured LRS, provide callback to make it asynchronous
         @method sendStatement
        @param {TinCan.Statement|Object} statement Send statement to LRS
        @param {Function} [callback] Callback function to execute on completion
        */
        sendStatement: function (stmt, callback) {
            this.log("sendStatement");

            // would prefer to use .bind instead of 'self'
            var self = this,
                lrs,
                statement = this.prepareStatement(stmt),
                rsCount = this.recordStores.length,
                i,
                results = [],
                callbackWrapper,
                callbackResults = [];

            if (rsCount > 0) {
                /*
                   if there is a callback that is a function then we need
                   to wrap that function with a function that becomes
                   the new callback that reduces a closure count of the
                   requests that don't have allowFail set to true and
                   when that number hits zero then the original callback
                   is executed
                */
                if (typeof callback === "function") {
                    callbackWrapper = function (err, xhr) {
                        var args;

                        self.log("sendStatement - callbackWrapper: " + rsCount);
                        if (rsCount > 1) {
                            rsCount -= 1;
                            callbackResults.push({
                                err: err,
                                xhr: xhr
                            });
                        } else if (rsCount === 1) {
                            callbackResults.push({
                                err: err,
                                xhr: xhr
                            });
                            args = [callbackResults, statement];
                            callback.apply(this, args);
                        } else {
                            self.log("sendStatement - unexpected record store count: " + rsCount);
                        }
                    };
                }

                for (i = 0; i < rsCount; i += 1) {
                    lrs = this.recordStores[i];

                    results.push(lrs.saveStatement(statement, { callback: callbackWrapper }));
                }
            } else {
                this.log("[warning] sendStatement: No LRSs added yet (statement not sent)");
                if (typeof callback === "function") {
                    callback.apply(this, [null, statement]);
                }
            }

            return {
                statement: statement,
                results: results
            };
        },

        /**
        Calls retrieveStatement on the first LRS, provide callback to make it asynchronous
         @method getStatement
        @param {String} [stmtId] Statement ID to get
        @param {Function} [callback] Callback function to execute on completion
        @param {Object} [cfg] Configuration data
            @param {Object} [params] Query parameters
                @param {Boolean} [attachments] Include attachments in multipart response or don't (defualt: false)
        @return {Array|Result} Array of results, or single result
         TODO: make TinCan track statements it has seen in a local cache to be returned easily
        */
        getStatement: function (stmtId, callback, cfg) {
            this.log("getStatement");

            var lrs;

            cfg = cfg || {};
            cfg.params = cfg.params || {};

            if (this.recordStores.length > 0) {
                //
                // for statements (for now) we only need to read from the first LRS
                // in the future it may make sense to get all from all LRSes and
                // compare to remove duplicates or allow inspection of them for differences?
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                return lrs.retrieveStatement(stmtId, { callback: callback, params: cfg.params });
            }

            this.log("[warning] getStatement: No LRSs added yet (statement not retrieved)");
        },

        /**
        Creates a statement used for voiding the passed statement/statement ID and calls
        send statement with the voiding statement.
         @method voidStatement
        @param {TinCan.Statement|String} statement Statement or statement ID to void
        @param {Function} [callback] Callback function to execute on completion
        @param {Object} [options] Options used to build voiding statement
            @param {TinCan.Agent} [options.actor] Agent to be used as 'actor' in voiding statement
        */
        voidStatement: function (stmt, callback, options) {
            this.log("voidStatement");

            // would prefer to use .bind instead of 'self'
            var self = this,
                lrs,
                actor,
                voidingStatement,
                rsCount = this.recordStores.length,
                i,
                results = [],
                callbackWrapper,
                callbackResults = [];

            if (stmt instanceof TinCan.Statement) {
                stmt = stmt.id;
            }

            if (typeof options.actor !== "undefined") {
                actor = options.actor;
            } else if (this.actor !== null) {
                actor = this.actor;
            }

            voidingStatement = new TinCan.Statement({
                actor: actor,
                verb: {
                    id: "http://adlnet.gov/expapi/verbs/voided"
                },
                target: {
                    objectType: "StatementRef",
                    id: stmt
                }
            });

            if (rsCount > 0) {
                /*
                   if there is a callback that is a function then we need
                   to wrap that function with a function that becomes
                   the new callback that reduces a closure count of the
                   requests that don't have allowFail set to true and
                   when that number hits zero then the original callback
                   is executed
                */
                if (typeof callback === "function") {
                    callbackWrapper = function (err, xhr) {
                        var args;

                        self.log("voidStatement - callbackWrapper: " + rsCount);
                        if (rsCount > 1) {
                            rsCount -= 1;
                            callbackResults.push({
                                err: err,
                                xhr: xhr
                            });
                        } else if (rsCount === 1) {
                            callbackResults.push({
                                err: err,
                                xhr: xhr
                            });
                            args = [callbackResults, voidingStatement];
                            callback.apply(this, args);
                        } else {
                            self.log("voidStatement - unexpected record store count: " + rsCount);
                        }
                    };
                }

                for (i = 0; i < rsCount; i += 1) {
                    lrs = this.recordStores[i];

                    results.push(lrs.saveStatement(voidingStatement, { callback: callbackWrapper }));
                }
            } else {
                this.log("[warning] voidStatement: No LRSs added yet (statement not sent)");
                if (typeof callback === "function") {
                    callback.apply(this, [null, voidingStatement]);
                }
            }

            return {
                statement: voidingStatement,
                results: results
            };
        },

        /**
        Calls retrieveVoidedStatement on the first LRS, provide callback to make it asynchronous
         @method getVoidedStatement
        @param {String} statement Statement ID to get
        @param {Function} [callback] Callback function to execute on completion
        @return {Array|Result} Array of results, or single result
         TODO: make TinCan track voided statements it has seen in a local cache to be returned easily
        */
        getVoidedStatement: function (stmtId, callback) {
            this.log("getVoidedStatement");

            var lrs;

            if (this.recordStores.length > 0) {
                //
                // for statements (for now) we only need to read from the first LRS
                // in the future it may make sense to get all from all LRSes and
                // compare to remove duplicates or allow inspection of them for differences?
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                return lrs.retrieveVoidedStatement(stmtId, { callback: callback });
            }

            this.log("[warning] getVoidedStatement: No LRSs added yet (statement not retrieved)");
        },

        /**
        Calls saveStatements with list of prepared statements
         @method sendStatements
        @param {Array} Array of statements to send
        @param {Function} Callback function to execute on completion
        */
        sendStatements: function (stmts, callback) {
            this.log("sendStatements");
            var self = this,
                lrs,
                statements = [],
                rsCount = this.recordStores.length,
                i,
                results = [],
                callbackWrapper,
                callbackResults = [];
            if (stmts.length === 0) {
                if (typeof callback === "function") {
                    callback.apply(this, [null, statements]);
                }
            } else {
                for (i = 0; i < stmts.length; i += 1) {
                    statements.push(this.prepareStatement(stmts[i]));
                }

                if (rsCount > 0) {
                    /*
                       if there is a callback that is a function then we need
                       to wrap that function with a function that becomes
                       the new callback that reduces a closure count of the
                       requests that don't have allowFail set to true and
                       when that number hits zero then the original callback
                       is executed
                    */

                    if (typeof callback === "function") {
                        callbackWrapper = function (err, xhr) {
                            var args;

                            self.log("sendStatements - callbackWrapper: " + rsCount);
                            if (rsCount > 1) {
                                rsCount -= 1;
                                callbackResults.push({
                                    err: err,
                                    xhr: xhr
                                });
                            } else if (rsCount === 1) {
                                callbackResults.push({
                                    err: err,
                                    xhr: xhr
                                });
                                args = [callbackResults, statements];
                                callback.apply(this, args);
                            } else {
                                self.log("sendStatements - unexpected record store count: " + rsCount);
                            }
                        };
                    }

                    for (i = 0; i < rsCount; i += 1) {
                        lrs = this.recordStores[i];

                        results.push(lrs.saveStatements(statements, { callback: callbackWrapper }));
                    }
                } else {
                    this.log("[warning] sendStatements: No LRSs added yet (statements not sent)");
                    if (typeof callback === "function") {
                        callback.apply(this, [null, statements]);
                    }
                }
            }

            return {
                statements: statements,
                results: results
            };
        },

        /**
        @method getStatements
        @param {Object} [cfg] Configuration for request
            @param {Boolean} [cfg.sendActor] Include default actor in query params
            @param {Boolean} [cfg.sendActivity] Include default activity in query params
            @param {Object} [cfg.params] Parameters used to filter.
                            These are the same as those accepted by the
                            <a href="TinCan.LRS.html#method_queryStatements">LRS.queryStatements</a>
                            method.
             @param {Function} [cfg.callback] Function to run at completion
         TODO: support multiple LRSs and flag to use single
        */
        getStatements: function (cfg) {
            this.log("getStatements");
            var queryCfg = {},
                lrs,
                params;
            if (this.recordStores.length > 0) {
                //
                // for get (for now) we only get from one (as they should be the same)
                // but it may make sense to long term try to merge statements, perhaps
                // by using statementId as unique
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                cfg = cfg || {};

                // TODO: need a clone function?
                params = cfg.params || {};

                if (cfg.sendActor && this.actor !== null) {
                    if (lrs.version === "0.9" || lrs.version === "0.95") {
                        params.actor = this.actor;
                    } else {
                        params.agent = this.actor;
                    }
                }
                if (cfg.sendActivity && this.activity !== null) {
                    if (lrs.version === "0.9" || lrs.version === "0.95") {
                        params.target = this.activity;
                    } else {
                        params.activity = this.activity;
                    }
                }
                if (typeof params.registration === "undefined" && this.registration !== null) {
                    params.registration = this.registration;
                }

                queryCfg = {
                    params: params
                };
                if (typeof cfg.callback !== "undefined") {
                    queryCfg.callback = cfg.callback;
                }

                return lrs.queryStatements(queryCfg);
            }

            this.log("[warning] getStatements: No LRSs added yet (statements not read)");
        },

        /**
        @method getState
        @param {String} key Key to retrieve from the state
        @param {Object} [cfg] Configuration for request
            @param {Object} [cfg.agent] Agent used in query,
                defaults to 'actor' property if empty
            @param {Object} [cfg.activity] Activity used in query,
                defaults to 'activity' property if empty
            @param {Object} [cfg.registration] Registration used in query,
                defaults to 'registration' property if empty
            @param {Function} [cfg.callback] Function to run with state
        */
        getState: function (key, cfg) {
            this.log("getState");
            var queryCfg, lrs;

            if (this.recordStores.length > 0) {
                //
                // for state (for now) we are only going to store to the first LRS
                // so only get from there too
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                cfg = cfg || {};

                queryCfg = {
                    agent: typeof cfg.agent !== "undefined" ? cfg.agent : this.actor,
                    activity: typeof cfg.activity !== "undefined" ? cfg.activity : this.activity
                };
                if (typeof cfg.registration !== "undefined") {
                    queryCfg.registration = cfg.registration;
                } else if (this.registration !== null) {
                    queryCfg.registration = this.registration;
                }
                if (typeof cfg.callback !== "undefined") {
                    queryCfg.callback = cfg.callback;
                }

                return lrs.retrieveState(key, queryCfg);
            }

            this.log("[warning] getState: No LRSs added yet (state not retrieved)");
        },

        /**
        @method setState
        @param {String} key Key to store into the state
        @param {String|Object} val Value to store into the state, objects will be stringified to JSON
        @param {Object} [cfg] Configuration for request
            @param {Object} [cfg.agent] Agent used in query,
                defaults to 'actor' property if empty
            @param {Object} [cfg.activity] Activity used in query,
                defaults to 'activity' property if empty
            @param {Object} [cfg.registration] Registration used in query,
                defaults to 'registration' property if empty
            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing state
            @param {String} [cfg.contentType] Content-Type to specify in headers
            @param {Boolean} [cfg.overwriteJSON] If the Content-Type is JSON, should a PUT be used? 
            @param {Function} [cfg.callback] Function to run with state
        */
        setState: function (key, val, cfg) {
            this.log("setState");
            var queryCfg, lrs;

            if (this.recordStores.length > 0) {
                //
                // for state (for now) we are only going to store to the first LRS
                // so only get from there too
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                cfg = cfg || {};

                queryCfg = {
                    agent: typeof cfg.agent !== "undefined" ? cfg.agent : this.actor,
                    activity: typeof cfg.activity !== "undefined" ? cfg.activity : this.activity
                };
                if (typeof cfg.registration !== "undefined") {
                    queryCfg.registration = cfg.registration;
                } else if (this.registration !== null) {
                    queryCfg.registration = this.registration;
                }
                if (typeof cfg.lastSHA1 !== "undefined") {
                    queryCfg.lastSHA1 = cfg.lastSHA1;
                }
                if (typeof cfg.contentType !== "undefined") {
                    queryCfg.contentType = cfg.contentType;
                    if (typeof cfg.overwriteJSON !== "undefined" && !cfg.overwriteJSON && TinCan.Utils.isApplicationJSON(cfg.contentType)) {
                        queryCfg.method = "POST";
                    }
                }
                if (typeof cfg.callback !== "undefined") {
                    queryCfg.callback = cfg.callback;
                }

                return lrs.saveState(key, val, queryCfg);
            }

            this.log("[warning] setState: No LRSs added yet (state not saved)");
        },

        /**
        @method deleteState
        @param {String|null} key Key to remove from the state, or null to clear all
        @param {Object} [cfg] Configuration for request
            @param {Object} [cfg.agent] Agent used in query,
                defaults to 'actor' property if empty
            @param {Object} [cfg.activity] Activity used in query,
                defaults to 'activity' property if empty
            @param {Object} [cfg.registration] Registration used in query,
                defaults to 'registration' property if empty
            @param {Function} [cfg.callback] Function to run with state
        */
        deleteState: function (key, cfg) {
            this.log("deleteState");
            var queryCfg, lrs;

            if (this.recordStores.length > 0) {
                //
                // for state (for now) we are only going to store to the first LRS
                // so only get from there too
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                cfg = cfg || {};

                queryCfg = {
                    agent: typeof cfg.agent !== "undefined" ? cfg.agent : this.actor,
                    activity: typeof cfg.activity !== "undefined" ? cfg.activity : this.activity
                };
                if (typeof cfg.registration !== "undefined") {
                    queryCfg.registration = cfg.registration;
                } else if (this.registration !== null) {
                    queryCfg.registration = this.registration;
                }
                if (typeof cfg.callback !== "undefined") {
                    queryCfg.callback = cfg.callback;
                }

                return lrs.dropState(key, queryCfg);
            }

            this.log("[warning] deleteState: No LRSs added yet (state not deleted)");
        },

        /**
        @method getActivityProfile
        @param {String} key Key to retrieve from the profile
        @param {Object} [cfg] Configuration for request
            @param {Object} [cfg.activity] Activity used in query,
                defaults to 'activity' property if empty
            @param {Function} [cfg.callback] Function to run with activity profile
        */
        getActivityProfile: function (key, cfg) {
            this.log("getActivityProfile");
            var queryCfg, lrs;

            if (this.recordStores.length > 0) {
                //
                // for activity profiles (for now) we are only going to store to the first LRS
                // so only get from there too
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                cfg = cfg || {};

                queryCfg = {
                    activity: typeof cfg.activity !== "undefined" ? cfg.activity : this.activity
                };
                if (typeof cfg.callback !== "undefined") {
                    queryCfg.callback = cfg.callback;
                }

                return lrs.retrieveActivityProfile(key, queryCfg);
            }

            this.log("[warning] getActivityProfile: No LRSs added yet (activity profile not retrieved)");
        },

        /**
        @method setActivityProfile
        @param {String} key Key to store into the activity profile
        @param {String|Object} val Value to store into the activity profile, objects will be stringified to JSON
        @param {Object} [cfg] Configuration for request
            @param {Object} [cfg.activity] Activity used in query,
                defaults to 'activity' property if empty
            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing profile
            @param {String} [cfg.contentType] Content-Type to specify in headers
            @param {Boolean} [cfg.overwriteJSON] If the Content-Type is JSON, should a PUT be used?
            @param {Function} [cfg.callback] Function to run with activity profile
        */
        setActivityProfile: function (key, val, cfg) {
            this.log("setActivityProfile");
            var queryCfg, lrs;

            if (this.recordStores.length > 0) {
                //
                // for activity profile (for now) we are only going to store to the first LRS
                // so only get from there too
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                cfg = cfg || {};

                queryCfg = {
                    activity: typeof cfg.activity !== "undefined" ? cfg.activity : this.activity
                };
                if (typeof cfg.callback !== "undefined") {
                    queryCfg.callback = cfg.callback;
                }
                if (typeof cfg.lastSHA1 !== "undefined") {
                    queryCfg.lastSHA1 = cfg.lastSHA1;
                }
                if (typeof cfg.contentType !== "undefined") {
                    queryCfg.contentType = cfg.contentType;
                    if (typeof cfg.overwriteJSON !== "undefined" && !cfg.overwriteJSON && TinCan.Utils.isApplicationJSON(cfg.contentType)) {
                        queryCfg.method = "POST";
                    }
                }

                return lrs.saveActivityProfile(key, val, queryCfg);
            }

            this.log("[warning] setActivityProfile: No LRSs added yet (activity profile not saved)");
        },

        /**
        @method deleteActivityProfile
        @param {String|null} key Key to remove from the activity profile, or null to clear all
        @param {Object} [cfg] Configuration for request
            @param {Object} [cfg.activity] Activity used in query,
                defaults to 'activity' property if empty
            @param {Function} [cfg.callback] Function to run with activity profile
        */
        deleteActivityProfile: function (key, cfg) {
            this.log("deleteActivityProfile");
            var queryCfg, lrs;

            if (this.recordStores.length > 0) {
                //
                // for activity profile (for now) we are only going to store to the first LRS
                // so only get from there too
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                cfg = cfg || {};

                queryCfg = {
                    activity: typeof cfg.activity !== "undefined" ? cfg.activity : this.activity
                };
                if (typeof cfg.callback !== "undefined") {
                    queryCfg.callback = cfg.callback;
                }

                return lrs.dropActivityProfile(key, queryCfg);
            }

            this.log("[warning] deleteActivityProfile: No LRSs added yet (activity profile not deleted)");
        },

        /**
        @method getAgentProfile
        @param {String} key Key to retrieve from the profile
        @param {Object} [cfg] Configuration for request
            @param {Object} [cfg.agent] Agent used in query,
                defaults to 'actor' property if empty
            @param {Function} [cfg.callback] Function to run with agent profile
        */
        getAgentProfile: function (key, cfg) {
            this.log("getAgentProfile");
            var queryCfg, lrs;

            if (this.recordStores.length > 0) {
                //
                // for agent profiles (for now) we are only going to store to the first LRS
                // so only get from there too
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                cfg = cfg || {};

                queryCfg = {
                    agent: typeof cfg.agent !== "undefined" ? cfg.agent : this.actor
                };
                if (typeof cfg.callback !== "undefined") {
                    queryCfg.callback = cfg.callback;
                }

                return lrs.retrieveAgentProfile(key, queryCfg);
            }

            this.log("[warning] getAgentProfile: No LRSs added yet (agent profile not retrieved)");
        },

        /**
        @method setAgentProfile
        @param {String} key Key to store into the agent profile
        @param {String|Object} val Value to store into the agent profile, objects will be stringified to JSON
        @param {Object} [cfg] Configuration for request
            @param {Object} [cfg.agent] Agent used in query,
                defaults to 'actor' property if empty
            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing profile
            @param {String} [cfg.contentType] Content-Type to specify in headers
            @param {Boolean} [cfg.overwriteJSON] If the Content-Type is JSON, should a PUT be used?
            @param {Function} [cfg.callback] Function to run with agent profile
        */
        setAgentProfile: function (key, val, cfg) {
            this.log("setAgentProfile");
            var queryCfg, lrs;

            if (this.recordStores.length > 0) {
                //
                // for agent profile (for now) we are only going to store to the first LRS
                // so only get from there too
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                cfg = cfg || {};

                queryCfg = {
                    agent: typeof cfg.agent !== "undefined" ? cfg.agent : this.actor
                };
                if (typeof cfg.callback !== "undefined") {
                    queryCfg.callback = cfg.callback;
                }
                if (typeof cfg.lastSHA1 !== "undefined") {
                    queryCfg.lastSHA1 = cfg.lastSHA1;
                }
                if (typeof cfg.contentType !== "undefined") {
                    queryCfg.contentType = cfg.contentType;
                    if (typeof cfg.overwriteJSON !== "undefined" && !cfg.overwriteJSON && TinCan.Utils.isApplicationJSON(cfg.contentType)) {
                        queryCfg.method = "POST";
                    }
                }

                return lrs.saveAgentProfile(key, val, queryCfg);
            }

            this.log("[warning] setAgentProfile: No LRSs added yet (agent profile not saved)");
        },

        /**
        @method deleteAgentProfile
        @param {String|null} key Key to remove from the agent profile, or null to clear all
        @param {Object} [cfg] Configuration for request
            @param {Object} [cfg.agent] Agent used in query,
                defaults to 'actor' property if empty
            @param {Function} [cfg.callback] Function to run with agent profile
        */
        deleteAgentProfile: function (key, cfg) {
            this.log("deleteAgentProfile");
            var queryCfg, lrs;

            if (this.recordStores.length > 0) {
                //
                // for agent profile (for now) we are only going to store to the first LRS
                // so only get from there too
                //
                // TODO: make this the first non-allowFail LRS but for now it should
                // be good enough to make it the first since we know the LMS provided
                // LRS is the first
                //
                lrs = this.recordStores[0];

                cfg = cfg || {};

                queryCfg = {
                    agent: typeof cfg.agent !== "undefined" ? cfg.agent : this.actor
                };
                if (typeof cfg.callback !== "undefined") {
                    queryCfg.callback = cfg.callback;
                }

                return lrs.dropAgentProfile(key, queryCfg);
            }

            this.log("[warning] deleteAgentProfile: No LRSs added yet (agent profile not deleted)");
        }
    };

    /**
    @property DEBUG
    @static
    @default false
    */
    TinCan.DEBUG = false;

    /**
    Turn on debug logging
     @method enableDebug
    @static
    */
    TinCan.enableDebug = function () {
        TinCan.DEBUG = true;
    };

    /**
    Turn off debug logging
     @method disableDebug
    @static
    */
    TinCan.disableDebug = function () {
        TinCan.DEBUG = false;
    };

    /**
    @method versions
    @return {Array} Array of supported version numbers
    @static
    */
    TinCan.versions = function () {
        // newest first so we can use the first as the default
        return ["1.0.2", "1.0.1", "1.0.0", "0.95", "0.9"];
    };

    /*global module*/
    // Support the CommonJS method for exporting our single global
    if (true) {
        module.exports = TinCan;
    }
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Utils
**/
(function () {
    "use strict";

    /**
    @class TinCan.Utils
    */

    TinCan.Utils = {
        defaultEncoding: "utf8",

        /**
        Generates a UUIDv4 compliant string that should be reasonably unique
         @method getUUID
        @return {String} UUID
        @static
         Excerpt from: http://www.broofa.com/Tools/Math.uuid.js (v1.4)
        http://www.broofa.com
        mailto:robert@broofa.com
        Copyright (c) 2010 Robert Kieffer
        Dual licensed under the MIT and GPL licenses.
        */
        getUUID: function () {
            /*jslint bitwise: true, eqeq: true */
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0,
                    v = c == "x" ? r : r & 0x3 | 0x8;
                return v.toString(16);
            });
        },

        /**
        @method getISODateString
        @static
        @param {Date} date Date to stringify
        @return {String} ISO date String
        */
        getISODateString: function (d) {
            function pad(val, n) {
                var padder, tempVal;
                if (typeof val === "undefined" || val === null) {
                    val = 0;
                }
                if (typeof n === "undefined" || n === null) {
                    n = 2;
                }
                padder = Math.pow(10, n - 1);
                tempVal = val.toString();

                while (val < padder && padder > 1) {
                    tempVal = "0" + tempVal;
                    padder = padder / 10;
                }

                return tempVal;
            }

            return d.getUTCFullYear() + "-" + pad(d.getUTCMonth() + 1) + "-" + pad(d.getUTCDate()) + "T" + pad(d.getUTCHours()) + ":" + pad(d.getUTCMinutes()) + ":" + pad(d.getUTCSeconds()) + "." + pad(d.getUTCMilliseconds(), 3) + "Z";
        },

        /**
        @method convertISO8601DurationToMilliseconds
        @static
        @param {String} ISO8601Duration Duration in ISO8601 format
        @return {Int} Duration in milliseconds
         Note: does not handle input strings with years, months and days
        */
        convertISO8601DurationToMilliseconds: function (ISO8601Duration) {
            var isValueNegative = ISO8601Duration.indexOf("-") >= 0,
                indexOfT = ISO8601Duration.indexOf("T"),
                indexOfH = ISO8601Duration.indexOf("H"),
                indexOfM = ISO8601Duration.indexOf("M"),
                indexOfS = ISO8601Duration.indexOf("S"),
                hours,
                minutes,
                seconds,
                durationInMilliseconds;

            if (indexOfT === -1 || indexOfM !== -1 && indexOfM < indexOfT || ISO8601Duration.indexOf("D") !== -1 || ISO8601Duration.indexOf("Y") !== -1) {
                throw new Error("ISO 8601 timestamps including years, months and/or days are not currently supported");
            }

            if (indexOfH === -1) {
                indexOfH = indexOfT;
                hours = 0;
            } else {
                hours = parseInt(ISO8601Duration.slice(indexOfT + 1, indexOfH), 10);
            }

            if (indexOfM === -1) {
                indexOfM = indexOfT;
                minutes = 0;
            } else {
                minutes = parseInt(ISO8601Duration.slice(indexOfH + 1, indexOfM), 10);
            }

            seconds = parseFloat(ISO8601Duration.slice(indexOfM + 1, indexOfS));

            durationInMilliseconds = parseInt(((hours * 60 + minutes) * 60 + seconds) * 1000, 10);
            if (isNaN(durationInMilliseconds)) {
                durationInMilliseconds = 0;
            }
            if (isValueNegative) {
                durationInMilliseconds = durationInMilliseconds * -1;
            }

            return durationInMilliseconds;
        },

        /**
        @method convertMillisecondsToISO8601Duration
        @static
        @param {Int} inputMilliseconds Duration in milliseconds
        @return {String} Duration in ISO8601 format
        */
        convertMillisecondsToISO8601Duration: function (inputMilliseconds) {
            var hours,
                minutes,
                seconds,
                i_inputMilliseconds = parseInt(inputMilliseconds, 10),
                i_inputCentiseconds,
                inputIsNegative = "",
                rtnStr = "";

            //round to nearest 0.01 seconds
            i_inputCentiseconds = Math.round(i_inputMilliseconds / 10);

            if (i_inputCentiseconds < 0) {
                inputIsNegative = "-";
                i_inputCentiseconds = i_inputCentiseconds * -1;
            }

            hours = parseInt(i_inputCentiseconds / 360000, 10);
            minutes = parseInt(i_inputCentiseconds % 360000 / 6000, 10);
            seconds = i_inputCentiseconds % 360000 % 6000 / 100;

            rtnStr = inputIsNegative + "PT";
            if (hours > 0) {
                rtnStr += hours + "H";
            }

            if (minutes > 0) {
                rtnStr += minutes + "M";
            }

            rtnStr += seconds + "S";

            return rtnStr;
        },

        /**
        @method getSHA1String
        @static
        @param {String} str Content to hash
        @return {String} SHA1 for contents
        */
        getSHA1String: function (str) {
            /*global CryptoJS*/

            return CryptoJS.SHA1(str).toString(CryptoJS.enc.Hex);
        },

        /**
        @method getSHA256String
        @static
        @param {ArrayBuffer|String} content Content to hash
        @return {String} SHA256 for contents
        */
        getSHA256String: function (content) {
            /*global CryptoJS*/

            if (Object.prototype.toString.call(content) === "[object ArrayBuffer]") {
                content = CryptoJS.lib.WordArray.create(content);
            }
            return CryptoJS.SHA256(content).toString(CryptoJS.enc.Hex);
        },

        /**
        @method getBase64String
        @static
        @param {String} str Content to encode
        @return {String} Base64 encoded contents
        */
        getBase64String: function (str) {
            /*global CryptoJS*/

            return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Latin1.parse(str));
        },

        /**
        Intended to be inherited by objects with properties that store
        display values in a language based "dictionary"
         @method getLangDictionaryValue
        @param {String} prop Property name storing the dictionary
        @param {String} [lang] Language to return
        @return {String}
        */
        getLangDictionaryValue: function (prop, lang) {
            var langDict = this[prop],
                key;

            if (typeof lang !== "undefined" && typeof langDict[lang] !== "undefined") {
                return langDict[lang];
            }
            if (typeof langDict.und !== "undefined") {
                return langDict.und;
            }
            if (typeof langDict["en-US"] !== "undefined") {
                return langDict["en-US"];
            }
            for (key in langDict) {
                if (langDict.hasOwnProperty(key)) {
                    return langDict[key];
                }
            }

            return "";
        },

        /**
        @method parseURL
        @param {String} url
        @param {Object} [options]
            @param {Boolean} [options.allowRelative] Option to allow relative URLs
        @return {Object} Object of values
        @private
        */
        parseURL: function (url, cfg) {
            //
            // see http://stackoverflow.com/a/21553982
            // and http://stackoverflow.com/a/2880929
            //
            var isRelative = url.charAt(0) === "/",
                _reURLInformation = ["(/[^?#]*)", // pathname
            "(\\?[^#]*|)", // search
            "(#.*|)$" // hash
            ],
                reURLInformation,
                match,
                result,
                paramMatch,
                pl = /\+/g,
                // Regex for replacing addition symbol with a space
            search = /([^&=]+)=?([^&]*)/g,
                decode = function (s) {
                return decodeURIComponent(s.replace(pl, " "));
            };

            cfg = cfg || {};

            //
            // this method in an earlier version supported relative URLs, mostly to provide
            // support to the `LRS.moreStatements` method, that functionality was removed and
            // subsequently restored but with the addition of the option for allowing relative
            // URLs to be accepted which is the reason for the "helpful" exception message here
            //
            if (!isRelative) {
                //
                // not relative so make sure they have a scheme, host, etc.
                //
                _reURLInformation.unshift("^(https?:)//", // scheme
                "(([^:/?#]*)(?::([0-9]+))?)" // host (hostname and port)
                );

                //
                // our regex requires there to be a '/' for the detection of the start
                // of the path, we can detect a '/' using indexOf beyond the part of the
                // scheme, since we've restricted scheme to 'http' or 'https' and because
                // a hostname is guaranteed to be there we can detect beyond the '://'
                // based on position, then tack on a trailing '/' because it can't be
                // part of the path
                //
                if (url.indexOf("/", 8) === -1) {
                    url = url + "/";
                }
            } else {
                //
                // relative so make sure they allow that explicitly
                //
                if (typeof cfg.allowRelative === "undefined" || !cfg.allowRelative) {
                    throw new Error("Refusing to parse relative URL without 'allowRelative' option");
                }
            }

            reURLInformation = new RegExp(_reURLInformation.join(""));
            match = url.match(reURLInformation);
            if (match === null) {
                throw new Error("Unable to parse URL regular expression did not match: '" + url + "'");
            }

            // 'path' is for backwards compatibility
            if (isRelative) {
                result = {
                    protocol: null,
                    host: null,
                    hostname: null,
                    port: null,
                    path: null,
                    pathname: match[1],
                    search: match[2],
                    hash: match[3],
                    params: {}
                };

                result.path = result.pathname;
            } else {
                result = {
                    protocol: match[1],
                    host: match[2],
                    hostname: match[3],
                    port: match[4],
                    pathname: match[5],
                    search: match[6],
                    hash: match[7],
                    params: {}
                };

                result.path = result.protocol + "//" + result.host + result.pathname;
            }

            if (result.search !== "") {
                // extra parens to let jshint know this is an expression
                while (paramMatch = search.exec(result.search.substring(1))) {
                    result.params[decode(paramMatch[1])] = decode(paramMatch[2]);
                }
            }

            return result;
        },

        /**
        @method getServerRoot
        @param {String} absoluteUrl
        @return {String} server root of url
        @private
        */
        getServerRoot: function (absoluteUrl) {
            var urlParts = absoluteUrl.split("/");
            return urlParts[0] + "//" + urlParts[2];
        },

        /**
        @method getContentTypeFromHeader
        @static
        @param {String} header Content-Type header value
        @return {String} Primary value from Content-Type
        */
        getContentTypeFromHeader: function (header) {
            return String(header).split(";")[0];
        },

        /**
        @method isApplicationJSON
        @static
        @param {String} header Content-Type header value
        @return {Boolean} whether "application/json" was matched
        */
        isApplicationJSON: function (header) {
            return TinCan.Utils.getContentTypeFromHeader(header).toLowerCase().indexOf("application/json") === 0;
        },

        /**
        @method stringToArrayBuffer
        @static
        @param {String} content String of content to convert to an ArrayBuffer
        @param {String} [encoding] Encoding to use for conversion
        @return {ArrayBuffer} Converted content
        */
        stringToArrayBuffer: function () {
            TinCan.prototype.log("stringToArrayBuffer not overloaded - no environment loaded?");
        },

        /**
        @method stringFromArrayBuffer
        @static
        @param {ArrayBuffer} content ArrayBuffer of content to convert to a String
        @param {String} [encoding] Encoding to use for conversion
        @return {String} Converted content
        */
        stringFromArrayBuffer: function () {
            TinCan.prototype.log("stringFromArrayBuffer not overloaded - no environment loaded?");
        }
    };
})();

/*
    Copyright 2012-2013 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.LRS
**/
(function () {
    "use strict";
    /**
    @class TinCan.LRS
    @constructor
    */

    var LRS = TinCan.LRS = function (cfg) {
        this.log("constructor");

        /**
        @property endpoint
        @type String
        */
        this.endpoint = null;

        /**
        @property version
        @type String
        */
        this.version = null;

        /**
        @property auth
        @type String
        */
        this.auth = null;

        /**
        @property allowFail
        @type Boolean
        @default true
        */
        this.allowFail = true;

        /**
        @property extended
        @type Object
        */
        this.extended = null;

        this.init(cfg);
    };
    LRS.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "LRS",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        */
        init: function (cfg) {
            this.log("init");

            var versions = TinCan.versions(),
                versionMatch = false,
                i;

            cfg = cfg || {};

            if (cfg.hasOwnProperty("alertOnRequestFailure")) {
                this.log("'alertOnRequestFailure' is deprecated (alerts have been removed) no need to set it now");
            }

            if (!cfg.hasOwnProperty("endpoint") || cfg.endpoint === null || cfg.endpoint === "") {
                this.log("[error] LRS invalid: no endpoint");
                throw {
                    code: 3,
                    mesg: "LRS invalid: no endpoint"
                };
            }

            this.endpoint = String(cfg.endpoint);
            if (this.endpoint.slice(-1) !== "/") {
                this.log("adding trailing slash to endpoint");
                this.endpoint += "/";
            }

            if (cfg.hasOwnProperty("allowFail")) {
                this.allowFail = cfg.allowFail;
            }

            if (cfg.hasOwnProperty("auth")) {
                this.auth = cfg.auth;
            } else if (cfg.hasOwnProperty("username") && cfg.hasOwnProperty("password")) {
                this.auth = "Basic " + TinCan.Utils.getBase64String(cfg.username + ":" + cfg.password);
            }

            if (cfg.hasOwnProperty("extended")) {
                this.extended = cfg.extended;
            }

            //
            // provide a hook method that environments can override
            // to handle anything necessary in the initialization
            // process that is customized to them, such as cross domain
            // setup in browsers, default implementation is empty
            //
            // this hook must run prior to version detection so that
            // request handling can be set up before requesting the
            // LRS version via the /about resource
            //
            this._initByEnvironment(cfg);

            if (typeof cfg.version !== "undefined") {
                this.log("version: " + cfg.version);
                for (i = 0; i < versions.length; i += 1) {
                    if (versions[i] === cfg.version) {
                        versionMatch = true;
                        break;
                    }
                }
                if (!versionMatch) {
                    this.log("[error] LRS invalid: version not supported (" + cfg.version + ")");
                    throw {
                        code: 5,
                        mesg: "LRS invalid: version not supported (" + cfg.version + ")"
                    };
                }
                this.version = cfg.version;
            } else {
                //
                // assume max supported when not specified,
                // TODO: add detection of LRS from call to endpoint
                //
                this.version = versions[0];
            }
        },

        /**
        Creates and returns a boundary for separating parts in
        requests where the statement has an attachment
         @method _getBoundary
        @private
        */
        _getBoundary: function () {
            return TinCan.Utils.getUUID().replace(/-/g, "");
        },

        /**
        Method should be overloaded by an environment to do per
        environment specifics such that the LRS can make a call
        to set the version if not provided
         @method _initByEnvironment
        @private
        */
        _initByEnvironment: function () {
            this.log("_initByEnvironment not overloaded - no environment loaded?");
        },

        /**
        Method should be overloaded by an environment to do per
        environment specifics for sending requests to the LRS
         @method _makeRequest
        @private
        */
        _makeRequest: function () {
            this.log("_makeRequest not overloaded - no environment loaded?");
        },

        /**
        Method should be overloaded by an environment to do per
        environment specifics for building multipart request data
         @method _getMultipartRequestData
        @private
        */
        _getMultipartRequestData: function () {
            this.log("_getMultipartRequestData not overloaded - no environment loaded?");
        },

        /**
        Method is overloaded by the browser environment in order to test converting an
        HTTP request that is greater than a defined length
         @method _IEModeConversion
        @private
        */
        _IEModeConversion: function () {
            this.log("_IEModeConversion not overloaded - browser environment not loaded.");
        },

        _processGetStatementResult: function (xhr, params) {
            var boundary,
                parsedResponse,
                statement,
                attachmentMap = {},
                i;

            if (!params.attachments) {
                return TinCan.Statement.fromJSON(xhr.responseText);
            }

            boundary = xhr.getResponseHeader("Content-Type").split("boundary=")[1];

            parsedResponse = this._parseMultipart(boundary, xhr.response);
            statement = JSON.parse(parsedResponse[0].body);
            for (i = 1; i < parsedResponse.length; i += 1) {
                attachmentMap[parsedResponse[i].headers["X-Experience-API-Hash"]] = parsedResponse[i].body;
            }

            this._assignAttachmentContent([statement], attachmentMap);

            return new TinCan.Statement(statement);
        },

        /**
        Method used to send a request via browser objects to the LRS
         @method sendRequest
        @param {Object} cfg Configuration for request
            @param {String} cfg.url URL portion to add to endpoint
            @param {String} [cfg.method] GET, PUT, POST, etc.
            @param {Object} [cfg.params] Parameters to set on the querystring
            @param {String|ArrayBuffer} [cfg.data] Body content as a String or ArrayBuffer
            @param {Object} [cfg.headers] Additional headers to set in the request
            @param {Function} [cfg.callback] Function to run at completion
                @param {String|Null} cfg.callback.err If an error occurred, this parameter will contain the HTTP status code.
                    If the operation succeeded, err will be null.
                @param {Object} cfg.callback.xhr XHR object
            @param {Boolean} [cfg.ignore404] Whether 404 status codes should be considered an error
            @param {Boolean} [cfg.expectMultipart] Whether to expect the response to be a multipart response
        @return {Object} XHR if called in a synchronous way (in other words no callback)
        */
        sendRequest: function (cfg) {
            this.log("sendRequest");
            var fullUrl = this.endpoint + cfg.url,
                headers = {},
                prop;

            // respect absolute URLs passed in
            if (cfg.url.indexOf("http") === 0) {
                fullUrl = cfg.url;
            }

            // add extended LMS-specified values to the params
            if (this.extended !== null) {
                cfg.params = cfg.params || {};

                for (prop in this.extended) {
                    if (this.extended.hasOwnProperty(prop)) {
                        // don't overwrite cfg.params values that have already been added to the request with our extended params
                        if (!cfg.params.hasOwnProperty(prop)) {
                            if (this.extended[prop] !== null) {
                                cfg.params[prop] = this.extended[prop];
                            }
                        }
                    }
                }
            }

            // consolidate headers
            headers.Authorization = this.auth;
            if (this.version !== "0.9") {
                headers["X-Experience-API-Version"] = this.version;
            }

            for (prop in cfg.headers) {
                if (cfg.headers.hasOwnProperty(prop)) {
                    headers[prop] = cfg.headers[prop];
                }
            }

            return this._makeRequest(fullUrl, headers, cfg);
        },

        /**
        Method used to determine the LRS version
         @method about
        @param {Object} cfg Configuration object for the about request
            @param {Function} [cfg.callback] Callback to execute upon receiving a response
            @param {Object} [cfg.params] this is needed, but can be empty
        @return {Object} About which holds the version, or asyncrhonously calls a specified callback
        */
        about: function (cfg) {
            this.log("about");
            var requestCfg, requestResult, callbackWrapper;

            cfg = cfg || {};

            requestCfg = {
                url: "about",
                method: "GET",
                params: {}
            };
            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err === null) {
                        result = TinCan.About.fromJSON(xhr.responseText);
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }

            requestResult = this.sendRequest(requestCfg);

            if (callbackWrapper) {
                return;
            }

            if (requestResult.err === null) {
                requestResult.xhr = TinCan.About.fromJSON(requestResult.xhr.responseText);
            }
            return requestResult;
        },

        /**
        Save a statement, when used from a browser sends to the endpoint using the RESTful interface.
        Use a callback to make the call asynchronous.
         @method saveStatement
        @param {TinCan.Statement} statement to send
        @param {Object} [cfg] Configuration used when saving
            @param {Function} [cfg.callback] Callback to execute on completion
        */
        saveStatement: function (stmt, cfg) {
            this.log("saveStatement");
            var requestCfg = {
                url: "statements",
                headers: {}
            },
                versionedStatement,
                requestAttachments = [],
                boundary,
                i;

            cfg = cfg || {};

            try {
                versionedStatement = stmt.asVersion(this.version);
            } catch (ex) {
                if (this.allowFail) {
                    this.log("[warning] statement could not be serialized in version (" + this.version + "): " + ex);
                    if (typeof cfg.callback !== "undefined") {
                        cfg.callback(null, null);
                        return;
                    }
                    return {
                        err: null,
                        xhr: null
                    };
                }

                this.log("[error] statement could not be serialized in version (" + this.version + "): " + ex);
                if (typeof cfg.callback !== "undefined") {
                    cfg.callback(ex, null);
                    return;
                }
                return {
                    err: ex,
                    xhr: null
                };
            }

            if (versionedStatement.hasOwnProperty("attachments") && stmt.hasAttachmentWithContent()) {
                boundary = this._getBoundary();

                requestCfg.headers["Content-Type"] = "multipart/mixed; boundary=" + boundary;

                for (i = 0; i < stmt.attachments.length; i += 1) {
                    if (stmt.attachments[i].content !== null) {
                        requestAttachments.push(stmt.attachments[i]);
                    }
                }

                try {
                    requestCfg.data = this._getMultipartRequestData(boundary, versionedStatement, requestAttachments);
                } catch (ex) {
                    if (this.allowFail) {
                        this.log("[warning] multipart request data could not be created (attachments probably not supported): " + ex);
                        if (typeof cfg.callback !== "undefined") {
                            cfg.callback(null, null);
                            return;
                        }
                        return {
                            err: null,
                            xhr: null
                        };
                    }

                    this.log("[error] multipart request data could not be created (attachments probably not supported): " + ex);
                    if (typeof cfg.callback !== "undefined") {
                        cfg.callback(ex, null);
                        return;
                    }
                    return {
                        err: ex,
                        xhr: null
                    };
                }
            } else {
                requestCfg.headers["Content-Type"] = "application/json";
                requestCfg.data = JSON.stringify(versionedStatement);
            }
            if (stmt.id !== null) {
                requestCfg.method = "PUT";
                requestCfg.params = {
                    statementId: stmt.id
                };
            } else {
                requestCfg.method = "POST";
            }

            if (typeof cfg.callback !== "undefined") {
                requestCfg.callback = cfg.callback;
            }

            return this.sendRequest(requestCfg);
        },

        /**
        Retrieve a statement, when used from a browser sends to the endpoint using the RESTful interface.
         @method retrieveStatement
        @param {String} ID of statement to retrieve
        @param {Object} [cfg] Configuration options
            @param {Object} [cfg.params] Query parameters
                @param {Boolean} [cfg.params.attachments] Include attachments in multipart response or don't (default: false)
            @param {Function} [cfg.callback] Callback to execute on completion
        @return {TinCan.Statement} Statement retrieved
        */
        retrieveStatement: function (stmtId, cfg) {
            this.log("retrieveStatement");
            var requestCfg,
                requestResult,
                callbackWrapper,
                lrs = this;

            cfg = cfg || {};
            cfg.params = cfg.params || {};

            requestCfg = {
                url: "statements",
                method: "GET",
                params: {
                    statementId: stmtId
                }
            };
            if (cfg.params.attachments) {
                requestCfg.params.attachments = true;
                requestCfg.expectMultipart = true;
            }
            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err === null) {
                        result = lrs._processGetStatementResult(xhr, cfg.params);
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }

            requestResult = this.sendRequest(requestCfg);
            if (!callbackWrapper) {
                requestResult.statement = null;
                if (requestResult.err === null) {
                    requestResult.statement = lrs._processGetStatementResult(requestResult.xhr, cfg.params);
                }
            }

            return requestResult;
        },

        /**
        Retrieve a voided statement, when used from a browser sends to the endpoint using the RESTful interface.
         @method retrieveVoidedStatement
        @param {String} ID of voided statement to retrieve
        @param {Object} [cfg] Configuration options
            @param {Object} [cfg.params] Query parameters
                @param {Boolean} [cfg.params.attachments] Include attachments in multipart response or don't (default: false)
            @param {Function} [cfg.callback] Callback to execute on completion
        @return {TinCan.Statement} Statement retrieved
        */
        retrieveVoidedStatement: function (stmtId, cfg) {
            this.log("retrieveVoidedStatement");
            var requestCfg,
                requestResult,
                callbackWrapper,
                lrs = this;

            cfg = cfg || {};
            cfg.params = cfg.params || {};

            requestCfg = {
                url: "statements",
                method: "GET",
                params: {}
            };
            if (this.version === "0.9" || this.version === "0.95") {
                requestCfg.params.statementId = stmtId;
            } else {
                requestCfg.params.voidedStatementId = stmtId;
                if (cfg.params.attachments) {
                    requestCfg.params.attachments = true;
                    requestCfg.expectMultipart = true;
                }
            }

            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err === null) {
                        result = lrs._processGetStatementResult(xhr, cfg.params);
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }

            requestResult = this.sendRequest(requestCfg);
            if (!callbackWrapper) {
                requestResult.statement = null;
                if (requestResult.err === null) {
                    requestResult.statement = lrs._processGetStatementResult(requestResult.xhr, cfg.params);
                }
            }

            return requestResult;
        },

        /**
        Save a set of statements, when used from a browser sends to the endpoint using the RESTful interface.
        Use a callback to make the call asynchronous.
         @method saveStatements
        @param {Array} Array of statements or objects convertable to statements
        @param {Object} [cfg] Configuration used when saving
            @param {Function} [cfg.callback] Callback to execute on completion
        */
        saveStatements: function (stmts, cfg) {
            this.log("saveStatements");
            var requestCfg = {
                url: "statements",
                method: "POST",
                headers: {}
            },
                versionedStatement,
                versionedStatements = [],
                requestAttachments = [],
                boundary,
                i,
                j;

            cfg = cfg || {};

            if (stmts.length === 0) {
                if (typeof cfg.callback !== "undefined") {
                    cfg.callback(new Error("no statements"), null);
                    return;
                }
                return {
                    err: new Error("no statements"),
                    xhr: null
                };
            }

            for (i = 0; i < stmts.length; i += 1) {
                try {
                    versionedStatement = stmts[i].asVersion(this.version);
                } catch (ex) {
                    if (this.allowFail) {
                        this.log("[warning] statement could not be serialized in version (" + this.version + "): " + ex);
                        if (typeof cfg.callback !== "undefined") {
                            cfg.callback(null, null);
                            return;
                        }
                        return {
                            err: null,
                            xhr: null
                        };
                    }

                    this.log("[error] statement could not be serialized in version (" + this.version + "): " + ex);
                    if (typeof cfg.callback !== "undefined") {
                        cfg.callback(ex, null);
                        return;
                    }
                    return {
                        err: ex,
                        xhr: null
                    };
                }

                if (stmts[i].hasAttachmentWithContent()) {
                    for (j = 0; j < stmts[i].attachments.length; j += 1) {
                        if (stmts[i].attachments[j].content !== null) {
                            requestAttachments.push(stmts[i].attachments[j]);
                        }
                    }
                }

                versionedStatements.push(versionedStatement);
            }

            if (requestAttachments.length !== 0) {
                boundary = this._getBoundary();

                requestCfg.headers["Content-Type"] = "multipart/mixed; boundary=" + boundary;

                try {
                    requestCfg.data = this._getMultipartRequestData(boundary, versionedStatements, requestAttachments);
                } catch (ex) {
                    if (this.allowFail) {
                        this.log("[warning] multipart request data could not be created (attachments probably not supported): " + ex);
                        if (typeof cfg.callback !== "undefined") {
                            cfg.callback(null, null);
                            return;
                        }
                        return {
                            err: null,
                            xhr: null
                        };
                    }

                    this.log("[error] multipart request data could not be created (attachments probably not supported): " + ex);
                    if (typeof cfg.callback !== "undefined") {
                        cfg.callback(ex, null);
                        return;
                    }
                    return {
                        err: ex,
                        xhr: null
                    };
                }
            } else {
                requestCfg.headers["Content-Type"] = "application/json";
                requestCfg.data = JSON.stringify(versionedStatements);
            }

            if (typeof cfg.callback !== "undefined") {
                requestCfg.callback = cfg.callback;
            }

            return this.sendRequest(requestCfg);
        },

        /**
        Fetch a set of statements, when used from a browser sends to the endpoint using the
        RESTful interface.  Use a callback to make the call asynchronous.
         @method queryStatements
        @param {Object} [cfg] Configuration used to query
            @param {Object} [cfg.params] Query parameters
                @param {TinCan.Agent|TinCan.Group} [cfg.params.agent] Agent matches 'actor' or 'object'
                @param {TinCan.Verb|String} [cfg.params.verb] Verb (or verb ID) to query on
                @param {TinCan.Activity|String} [cfg.params.activity] Activity (or activity ID) to query on
                @param {String} [cfg.params.registration] Registration UUID
                @param {Boolean} [cfg.params.related_activities] Match related activities
                @param {Boolean} [cfg.params.related_agents] Match related agents
                @param {String} [cfg.params.since] Match statements stored since specified timestamp
                @param {String} [cfg.params.until] Match statements stored at or before specified timestamp
                @param {Integer} [cfg.params.limit] Number of results to retrieve
                @param {String} [cfg.params.format] One of "ids", "exact", "canonical" (default: "exact")
                @param {Boolean} [cfg.params.ascending] Return results in ascending order of stored time
                 @param {TinCan.Agent} [cfg.params.actor] (Removed in 1.0.0, use 'agent' instead) Agent matches 'actor'
                @param {TinCan.Activity|TinCan.Agent|TinCan.Statement} [cfg.params.target] (Removed in 1.0.0, use 'activity' or 'agent' instead) Activity, Agent, or Statement matches 'object'
                @param {TinCan.Agent} [cfg.params.instructor] (Removed in 1.0.0, use 'agent' + 'related_agents' instead) Agent matches 'context:instructor'
                @param {Boolean} [cfg.params.context] (Removed in 1.0.0, use 'activity' instead) When filtering on target, include statements with matching context
                @param {Boolean} [cfg.params.authoritative] (Removed in 1.0.0) Get authoritative results
                @param {Boolean} [cfg.params.sparse] (Removed in 1.0.0, use 'format' instead) Get sparse results
             @param {Function} [cfg.callback] Callback to execute on completion
                @param {String|null} cfg.callback.err Error status or null if succcess
                @param {TinCan.StatementsResult|XHR} cfg.callback.response Receives a StatementsResult argument
        @return {Object} Request result
        */
        queryStatements: function (cfg) {
            this.log("queryStatements");
            var requestCfg,
                requestResult,
                callbackWrapper,
                lrs = this;

            cfg = cfg || {};
            cfg.params = cfg.params || {};

            //
            // if they misconfigured (possibly due to version mismatches) the
            // query then don't try to send a request at all, rather than give
            // them invalid results
            //
            try {
                requestCfg = this._queryStatementsRequestCfg(cfg);

                if (cfg.params.attachments) {
                    requestCfg.expectMultipart = true;
                }
            } catch (ex) {
                this.log("[error] Query statements failed - " + ex);
                if (typeof cfg.callback !== "undefined") {
                    cfg.callback(ex, {});
                }

                return {
                    err: ex,
                    statementsResult: null
                };
            }

            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr,
                        parsedResponse,
                        boundary,
                        statements,
                        attachmentMap = {},
                        i;

                    if (err === null) {
                        if (!cfg.params.attachments) {
                            result = TinCan.StatementsResult.fromJSON(xhr.responseText);
                        } else {
                            boundary = xhr.getResponseHeader("Content-Type").split("boundary=")[1];

                            parsedResponse = lrs._parseMultipart(boundary, xhr.response);
                            statements = JSON.parse(parsedResponse[0].body);
                            for (i = 1; i < parsedResponse.length; i += 1) {
                                attachmentMap[parsedResponse[i].headers["X-Experience-API-Hash"]] = parsedResponse[i].body;
                            }

                            lrs._assignAttachmentContent(statements.statements, attachmentMap);
                            result = new TinCan.StatementsResult({ statements: statements.statements });

                            for (i = 0; i < result.statements.length; i += 1) {
                                if (!(result.statements[i] instanceof TinCan.Statement)) {
                                    result.statements[i] = new TinCan.Statement(result.statements[i]);
                                }
                            }
                        }
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }

            requestResult = this.sendRequest(requestCfg);
            requestResult.config = requestCfg;

            if (!callbackWrapper) {
                requestResult.statementsResult = null;
                if (requestResult.err === null) {
                    requestResult.statementsResult = TinCan.StatementsResult.fromJSON(requestResult.xhr.responseText);
                }
            }

            return requestResult;
        },

        /**
        Build a request config object that can be passed to sendRequest() to make a query request
         @method _queryStatementsRequestCfg
        @private
        @param {Object} [cfg] See configuration for {{#crossLink "TinCan.LRS/queryStatements"}}{{/crossLink}}
        @return {Object} Request configuration object
        */
        _queryStatementsRequestCfg: function (cfg) {
            this.log("_queryStatementsRequestCfg");
            var params = {},
                returnCfg = {
                url: "statements",
                method: "GET",
                params: params
            },
                jsonProps = ["agent", "actor", "object", "instructor"],
                idProps = ["verb", "activity"],
                valProps = ["registration", "context", "since", "until", "limit", "authoritative", "sparse", "ascending", "related_activities", "related_agents", "format", "attachments"],
                i,
                prop,

            //
            // list of parameters that are supported in all versions (supported by
            // this library) of the spec
            //
            universal = {
                verb: true,
                registration: true,
                since: true,
                until: true,
                limit: true,
                ascending: true
            },

            //
            // future proofing here, "supported" is an object so that
            // in the future we can support a "deprecated" list to
            // throw warnings, hopefully the spec uses deprecation phases
            // for the removal of these things
            //
            compatibility = {
                "0.9": {
                    supported: {
                        actor: true,
                        instructor: true,
                        target: true,
                        object: true,
                        context: true,
                        authoritative: true,
                        sparse: true
                    }
                },
                "1.0.0": {
                    supported: {
                        agent: true,
                        activity: true,
                        related_activities: true,
                        related_agents: true,
                        format: true,
                        attachments: true
                    }
                }
            };

            compatibility["0.95"] = compatibility["0.9"];
            compatibility["1.0.1"] = compatibility["1.0.0"];
            compatibility["1.0.2"] = compatibility["1.0.0"];

            if (cfg.params.hasOwnProperty("target")) {
                cfg.params.object = cfg.params.target;
            }

            //
            // check compatibility tables, either the configured parameter is in
            // the universal list or the specific version, if not then throw an
            // error which at least for .queryStatements will prevent the request
            // and potentially alert the user
            //
            for (prop in cfg.params) {
                if (cfg.params.hasOwnProperty(prop)) {
                    if (typeof universal[prop] === "undefined" && typeof compatibility[this.version].supported[prop] === "undefined") {
                        throw "Unrecognized query parameter configured: " + prop;
                    }
                }
            }

            //
            // getting here means that all parameters are valid for this version
            // to make handling the output formats easier
            //

            for (i = 0; i < jsonProps.length; i += 1) {
                if (typeof cfg.params[jsonProps[i]] !== "undefined") {
                    params[jsonProps[i]] = JSON.stringify(cfg.params[jsonProps[i]].asVersion(this.version));
                }
            }

            for (i = 0; i < idProps.length; i += 1) {
                if (typeof cfg.params[idProps[i]] !== "undefined") {
                    if (typeof cfg.params[idProps[i]].id === "undefined") {
                        params[idProps[i]] = cfg.params[idProps[i]];
                    } else {
                        params[idProps[i]] = cfg.params[idProps[i]].id;
                    }
                }
            }

            for (i = 0; i < valProps.length; i += 1) {
                if (typeof cfg.params[valProps[i]] !== "undefined" && cfg.params[valProps[i]] !== null) {
                    params[valProps[i]] = cfg.params[valProps[i]];
                }
            }

            return returnCfg;
        },

        /**
        Assigns attachment content to the correct attachment to create a StatementsResult object that is sent
        to the callback of queryStatements()
         @method _assignAttachmentContent
        @private
        @param {Array} [stmts] Array of TinCan.Statement JSON objects
        @param {Object} [attachmentMap] Map of the content to place into its attachment
        @return {Array} Array of TinCan.Statement JSON objects with correctly assigned attachment content
        */
        _assignAttachmentContent: function (stmts, attachmentMap) {
            var i, j;

            for (i = 0; i < stmts.length; i += 1) {
                if (stmts[i].hasOwnProperty("attachments") && stmts[i].attachments !== null) {
                    for (j = 0; j < stmts[i].attachments.length; j += 1) {
                        if (attachmentMap.hasOwnProperty(stmts[i].attachments[j].sha2)) {
                            stmts[i].attachments[j].content = attachmentMap[stmts[i].attachments[j].sha2];
                        }
                    }
                }
            }
        },

        /**
        Parses the different sections of a multipart/mixed response
         @method _parseMultipart
        @private
        @param {String} [boundary] Boundary used to mark off the sections of the response
        @param {ArrayBuffer} [response] Body of the response
        @return {Array} Array of objects containing the parsed headers and body of each part
        */
        _parseMultipart: function (boundary, response) {
            /* global Uint8Array */
            var __boundary = "--" + boundary,
                byteArray,
                bodyEncodedInString,
                fullBodyEnd,
                sliceStart,
                sliceEnd,
                headerStart,
                headerEnd,
                bodyStart,
                bodyEnd,
                headers,
                body,
                parts = [],
                CRLF = 2;

            //
            // treating the reponse as a stream of bytes and assuming that headers
            // and related mime boundaries are all US-ASCII (which is a safe assumption)
            // allows us to treat the whole response as a string when looking for offsets
            // but then slice on the raw array buffer
            //
            byteArray = new Uint8Array(response);
            bodyEncodedInString = this.__uint8ToString(byteArray);

            fullBodyEnd = bodyEncodedInString.indexOf(__boundary + "--");

            sliceStart = bodyEncodedInString.indexOf(__boundary);
            while (sliceStart !== -1) {
                sliceEnd = bodyEncodedInString.indexOf(__boundary, sliceStart + __boundary.length);

                headerStart = sliceStart + __boundary.length + CRLF;
                headerEnd = bodyEncodedInString.indexOf("\r\n\r\n", sliceStart);
                bodyStart = headerEnd + CRLF + CRLF;
                bodyEnd = sliceEnd - 2;

                headers = this._parseHeaders(this.__uint8ToString(new Uint8Array(response.slice(headerStart, headerEnd))));
                body = response.slice(bodyStart, bodyEnd);

                //
                // we know the first slice is the statement, and we know it is a string in UTF-8 (spec requirement)
                //
                if (parts.length === 0) {
                    body = TinCan.Utils.stringFromArrayBuffer(body);
                }

                parts.push({
                    headers: headers,
                    body: body
                });

                if (sliceEnd === fullBodyEnd) {
                    sliceStart = -1;
                } else {
                    sliceStart = sliceEnd;
                }
            }

            return parts;
        },

        //
        // implemented as a function to avoid 'RangeError: Maximum call stack size exceeded'
        // when calling .fromCharCode on the full byteArray which results in a too long
        // argument list for large arrays
        //
        __uint8ToString: function (byteArray) {
            var result = "",
                len = byteArray.byteLength,
                i;

            for (i = 0; i < len; i += 1) {
                result += String.fromCharCode(byteArray[i]);
            }
            return result;
        },

        /**
        Parses the headers of a multipart/mixed response section
         @method _parseHeaders
        @private
        @param {String} [rawHeaders] String containing all the headers
        @return {Object} Map of the headers
        */
        _parseHeaders: function (rawHeaders) {
            var headers = {},
                headerList,
                key,
                h,
                i;

            headerList = rawHeaders.split("\n");
            for (i = 0; i < headerList.length; i += 1) {
                h = headerList[i].split(":", 2);

                if (h[1] !== null) {
                    headers[h[0]] = h[1].replace(/^\s+|\s+$/g, "");

                    key = h[0];
                } else {
                    if (h[0].substring(0, 1) === "\t") {
                        headers[h[0]] = h[1].replace(/^\s+|\s+$/g, "");
                    }
                }
            }

            return headers;
        },

        /**
        Fetch more statements from a previous query, when used from a browser sends to the endpoint using the
        RESTful interface.  Use a callback to make the call asynchronous.
         @method moreStatements
        @param {Object} [cfg] Configuration used to query
            @param {String} [cfg.url] More URL
            @param {Function} [cfg.callback] Callback to execute on completion
                @param {String|null} cfg.callback.err Error status or null if succcess
                @param {TinCan.StatementsResult|XHR} cfg.callback.response Receives a StatementsResult argument
        @return {Object} Request result
        */
        moreStatements: function (cfg) {
            this.log("moreStatements: " + cfg.url);
            var requestCfg, requestResult, callbackWrapper, parsedURL, serverRoot;

            cfg = cfg || {};

            // to support our interface (to support IE) we need to break apart
            // the more URL query params so that the request can be made properly later
            parsedURL = TinCan.Utils.parseURL(cfg.url, { allowRelative: true });

            // Respect a more URL that is relative to either the server root
            // or endpoint (though only the former is allowed in the spec)
            serverRoot = TinCan.Utils.getServerRoot(this.endpoint);
            if (parsedURL.path.indexOf("/statements") === 0) {
                parsedURL.path = this.endpoint.replace(serverRoot, "") + parsedURL.path;
                this.log("converting non-standard more URL to " + parsedURL.path);
            }

            // The more relative URL might not start with a slash, add it if not
            if (parsedURL.path.indexOf("/") !== 0) {
                parsedURL.path = "/" + parsedURL.path;
            }

            requestCfg = {
                method: "GET",
                // For arbitrary more URLs to work, we need to make the URL absolute here
                url: serverRoot + parsedURL.path,
                params: parsedURL.params
            };
            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err === null) {
                        result = TinCan.StatementsResult.fromJSON(xhr.responseText);
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }

            requestResult = this.sendRequest(requestCfg);
            requestResult.config = requestCfg;

            if (!callbackWrapper) {
                requestResult.statementsResult = null;
                if (requestResult.err === null) {
                    requestResult.statementsResult = TinCan.StatementsResult.fromJSON(requestResult.xhr.responseText);
                }
            }

            return requestResult;
        },

        /**
        Retrieve a state value, when used from a browser sends to the endpoint using the RESTful interface.
         @method retrieveState
        @param {String} key Key of state to retrieve
        @param {Object} cfg Configuration options
            @param {TinCan.Activity} cfg.activity Activity in document identifier
            @param {TinCan.Agent} cfg.agent Agent in document identifier
            @param {String} [cfg.registration] Registration
            @param {Function} [cfg.callback] Callback to execute on completion
                @param {Object|Null} cfg.callback.error
                @param {TinCan.State|null} cfg.callback.result null if state is 404
            @param {Object} [cfg.requestHeaders] Object containing additional headers to add to request
        @return {TinCan.State|Object} TinCan.State retrieved when synchronous, or result from sendRequest
        */
        retrieveState: function (key, cfg) {
            this.log("retrieveState");
            var requestParams = {},
                requestCfg = {},
                requestResult,
                callbackWrapper,
                requestHeaders,
                self = this;

            requestHeaders = cfg.requestHeaders || {};

            requestParams = {
                stateId: key,
                activityId: cfg.activity.id
            };
            if (this.version === "0.9") {
                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));
            } else {
                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));
            }
            if (typeof cfg.registration !== "undefined" && cfg.registration !== null) {
                if (this.version === "0.9") {
                    requestParams.registrationId = cfg.registration;
                } else {
                    requestParams.registration = cfg.registration;
                }
            }

            requestCfg = {
                url: "activities/state",
                method: "GET",
                params: requestParams,
                ignore404: true,
                headers: requestHeaders
            };

            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err === null) {
                        if (xhr.status === 404) {
                            result = null;
                        } else {
                            result = new TinCan.State({
                                id: key,
                                contents: xhr.responseText
                            });
                            if (typeof xhr.getResponseHeader !== "undefined" && xhr.getResponseHeader("ETag") !== null && xhr.getResponseHeader("ETag") !== "") {
                                result.etag = xhr.getResponseHeader("ETag");
                            } else {
                                //
                                // either XHR didn't have getResponseHeader (probably cause it is an IE
                                // XDomainRequest object which doesn't) or not populated by LRS so create
                                // the hash ourselves
                                //
                                // the LRS is responsible for quoting the Etag value so we need to mimic
                                // that behavior here as well
                                //
                                result.etag = "\"" + TinCan.Utils.getSHA1String(xhr.responseText) + "\"";
                            }

                            if (typeof xhr.contentType !== "undefined") {
                                // most likely an XDomainRequest which has .contentType,
                                // for the ones that it supports
                                result.contentType = xhr.contentType;
                            } else if (typeof xhr.getResponseHeader !== "undefined" && xhr.getResponseHeader("Content-Type") !== null && xhr.getResponseHeader("Content-Type") !== "") {
                                result.contentType = xhr.getResponseHeader("Content-Type");
                            }

                            if (TinCan.Utils.isApplicationJSON(result.contentType)) {
                                try {
                                    result.contents = JSON.parse(result.contents);
                                } catch (ex) {
                                    self.log("retrieveState - failed to deserialize JSON: " + ex);
                                }
                            }
                        }
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }

            requestResult = this.sendRequest(requestCfg);
            if (!callbackWrapper) {
                requestResult.state = null;
                if (requestResult.err === null && requestResult.xhr.status !== 404) {
                    requestResult.state = new TinCan.State({
                        id: key,
                        contents: requestResult.xhr.responseText
                    });
                    if (typeof requestResult.xhr.getResponseHeader !== "undefined" && requestResult.xhr.getResponseHeader("ETag") !== null && requestResult.xhr.getResponseHeader("ETag") !== "") {
                        requestResult.state.etag = requestResult.xhr.getResponseHeader("ETag");
                    } else {
                        //
                        // either XHR didn't have getResponseHeader (probably cause it is an IE
                        // XDomainRequest object which doesn't) or not populated by LRS so create
                        // the hash ourselves
                        //
                        // the LRS is responsible for quoting the Etag value so we need to mimic
                        // that behavior here as well
                        //
                        requestResult.state.etag = "\"" + TinCan.Utils.getSHA1String(requestResult.xhr.responseText) + "\"";
                    }
                    if (typeof requestResult.xhr.contentType !== "undefined") {
                        // most likely an XDomainRequest which has .contentType
                        // for the ones that it supports
                        requestResult.state.contentType = requestResult.xhr.contentType;
                    } else if (typeof requestResult.xhr.getResponseHeader !== "undefined" && requestResult.xhr.getResponseHeader("Content-Type") !== null && requestResult.xhr.getResponseHeader("Content-Type") !== "") {
                        requestResult.state.contentType = requestResult.xhr.getResponseHeader("Content-Type");
                    }
                    if (TinCan.Utils.isApplicationJSON(requestResult.state.contentType)) {
                        try {
                            requestResult.state.contents = JSON.parse(requestResult.state.contents);
                        } catch (ex) {
                            this.log("retrieveState - failed to deserialize JSON: " + ex);
                        }
                    }
                }
            }

            return requestResult;
        },

        /**
        Retrieve the list of IDs for a state, when used from a browser sends to the endpoint using the RESTful interface.
         @method retrieveStateIds
        @param {Object} cfg Configuration options
            @param {TinCan.Activity} cfg.activity Activity in document identifier
            @param {TinCan.Agent} cfg.agent Agent in document identifier
            @param {String} [cfg.registration] Registration
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {String} [cfg.since] Match activity profiles saved since given timestamp
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        @return {Object} requestResult Request result
        */
        retrieveStateIds: function (cfg) {
            this.log("retrieveStateIds");
            var requestParams = {},
                requestCfg,
                requestHeaders,
                requestResult,
                callbackWrapper;

            cfg = cfg || {};
            requestHeaders = cfg.requestHeaders || {};

            requestParams.activityId = cfg.activity.id;
            if (this.version === "0.9") {
                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));
            } else {
                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));
            }
            if (typeof cfg.registration !== "undefined" && cfg.registration !== null) {
                if (this.version === "0.9") {
                    requestParams.registrationId = cfg.registration;
                } else {
                    requestParams.registration = cfg.registration;
                }
            }

            requestCfg = {
                url: "activities/state",
                method: "GET",
                params: requestParams,
                headers: requestHeaders,
                ignore404: true
            };
            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err !== null) {
                        cfg.callback(err, result);
                        return;
                    }

                    if (xhr.status === 404) {
                        result = [];
                    } else {
                        try {
                            result = JSON.parse(xhr.responseText);
                        } catch (ex) {
                            err = "Response JSON parse error: " + ex;
                        }
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }
            if (typeof cfg.since !== "undefined") {
                requestCfg.params.since = cfg.since;
            }

            requestResult = this.sendRequest(requestCfg);
            if (!callbackWrapper) {
                requestResult.profileIds = null;
                if (requestResult.err !== null) {
                    return requestResult;
                }

                if (requestResult.xhr.status === 404) {
                    requestResult.profileIds = [];
                } else {
                    try {
                        requestResult.profileIds = JSON.parse(requestResult.xhr.responseText);
                    } catch (ex) {
                        requestResult.err = "retrieveStateIds - JSON parse error: " + ex;
                    }
                }
            }
            return requestResult;
        },

        /**
        Save a state value, when used from a browser sends to the endpoint using the RESTful interface.
         @method saveState
        @param {String} key Key of state to save
        @param val Value to be stored
        @param {Object} cfg Configuration options
            @param {TinCan.Activity} cfg.activity Activity in document identifier
            @param {TinCan.Agent} cfg.agent Agent in document identifier
            @param {String} [cfg.registration] Registration
            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing state
            @param {String} [cfg.contentType] Content-Type to specify in headers (defaults to 'application/octet-stream')
            @param {String} [cfg.method] Method to use. Default: PUT
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        */
        saveState: function (key, val, cfg) {
            this.log("saveState");
            var requestParams, requestCfg, requestHeaders;

            requestHeaders = cfg.requestHeaders || {};

            if (typeof cfg.contentType === "undefined") {
                cfg.contentType = "application/octet-stream";
            }
            requestHeaders["Content-Type"] = cfg.contentType;

            if (typeof val === "object" && TinCan.Utils.isApplicationJSON(cfg.contentType)) {
                val = JSON.stringify(val);
            }

            if (typeof cfg.method === "undefined" || cfg.method !== "POST") {
                cfg.method = "PUT";
            }

            requestParams = {
                stateId: key,
                activityId: cfg.activity.id
            };
            if (this.version === "0.9") {
                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));
            } else {
                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));
            }
            if (typeof cfg.registration !== "undefined" && cfg.registration !== null) {
                if (this.version === "0.9") {
                    requestParams.registrationId = cfg.registration;
                } else {
                    requestParams.registration = cfg.registration;
                }
            }

            requestCfg = {
                url: "activities/state",
                method: cfg.method,
                params: requestParams,
                data: val,
                headers: requestHeaders
            };

            if (typeof cfg.callback !== "undefined") {
                requestCfg.callback = cfg.callback;
            }
            if (typeof cfg.lastSHA1 !== "undefined" && cfg.lastSHA1 !== null) {
                requestCfg.headers["If-Match"] = cfg.lastSHA1;
            }

            return this.sendRequest(requestCfg);
        },

        /**
        Drop a state value or all of the state, when used from a browser sends to the endpoint using the RESTful interface.
         @method dropState
        @param {String|null} key Key of state to delete, or null for all
        @param {Object} cfg Configuration options
            @param {TinCan.Activity} cfg.activity Activity in document identifier
            @param {TinCan.Agent} cfg.agent Agent in document identifier
            @param {String} [cfg.registration] Registration
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        */
        dropState: function (key, cfg) {
            this.log("dropState");
            var requestParams, requestCfg, requestHeaders;

            requestHeaders = cfg.requestHeaders || {};

            requestParams = {
                activityId: cfg.activity.id
            };
            if (this.version === "0.9") {
                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));
            } else {
                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));
            }
            if (key !== null) {
                requestParams.stateId = key;
            }
            if (typeof cfg.registration !== "undefined" && cfg.registration !== null) {
                if (this.version === "0.9") {
                    requestParams.registrationId = cfg.registration;
                } else {
                    requestParams.registration = cfg.registration;
                }
            }

            requestCfg = {
                url: "activities/state",
                method: "DELETE",
                params: requestParams,
                headers: requestHeaders
            };

            if (typeof cfg.callback !== "undefined") {
                requestCfg.callback = cfg.callback;
            }

            return this.sendRequest(requestCfg);
        },

        /**
        Retrieve an activity, when used from a browser sends to the endpoint using the RESTful interface.
         @method retrieveActivity
        @param {String} activityId id of the Activity to retrieve
        @param {Object} cfg Configuration options
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        @return {Object} Value retrieved
        */
        retrieveActivity: function (activityId, cfg) {
            this.log("retrieveActivity");
            var requestCfg = {},
                requestResult,
                callbackWrapper,
                requestHeaders;

            requestHeaders = cfg.requestHeaders || {};

            requestCfg = {
                url: "activities",
                method: "GET",
                params: {
                    activityId: activityId
                },
                ignore404: true,
                headers: requestHeaders
            };

            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err === null) {
                        //
                        // a 404 really shouldn't happen because the LRS can dynamically
                        // build the response based on what has been passed to it, but
                        // don't have the client fail in the condition that it does, because
                        // we can do the same thing
                        //
                        if (xhr.status === 404) {
                            result = new TinCan.Activity({
                                id: activityId
                            });
                        } else {
                            result = TinCan.Activity.fromJSON(xhr.responseText);
                        }
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }

            requestResult = this.sendRequest(requestCfg);
            if (!callbackWrapper) {
                requestResult.activity = null;
                if (requestResult.err === null) {
                    if (requestResult.xhr.status === 404) {
                        requestResult.activity = new TinCan.Activity({
                            id: activityId
                        });
                    } else {
                        requestResult.activity = TinCan.Activity.fromJSON(requestResult.xhr.responseText);
                    }
                }
            }

            return requestResult;
        },

        /**
        Retrieve an activity profile value, when used from a browser sends to the endpoint using the RESTful interface.
         @method retrieveActivityProfile
        @param {String} key Key of activity profile to retrieve
        @param {Object} cfg Configuration options
            @param {TinCan.Activity} cfg.activity Activity in document identifier
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        @return {Object} Value retrieved
        */
        retrieveActivityProfile: function (key, cfg) {
            this.log("retrieveActivityProfile");
            var requestCfg = {},
                requestResult,
                callbackWrapper,
                requestHeaders,
                self = this;

            requestHeaders = cfg.requestHeaders || {};

            requestCfg = {
                url: "activities/profile",
                method: "GET",
                params: {
                    profileId: key,
                    activityId: cfg.activity.id
                },
                ignore404: true,
                headers: requestHeaders
            };

            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err === null) {
                        if (xhr.status === 404) {
                            result = null;
                        } else {
                            result = new TinCan.ActivityProfile({
                                id: key,
                                activity: cfg.activity,
                                contents: xhr.responseText
                            });
                            if (typeof xhr.getResponseHeader !== "undefined" && xhr.getResponseHeader("ETag") !== null && xhr.getResponseHeader("ETag") !== "") {
                                result.etag = xhr.getResponseHeader("ETag");
                            } else {
                                //
                                // either XHR didn't have getResponseHeader (probably cause it is an IE
                                // XDomainRequest object which doesn't) or not populated by LRS so create
                                // the hash ourselves
                                //
                                // the LRS is responsible for quoting the Etag value so we need to mimic
                                // that behavior here as well
                                //
                                result.etag = "\"" + TinCan.Utils.getSHA1String(xhr.responseText) + "\"";
                            }
                            if (typeof xhr.contentType !== "undefined") {
                                // most likely an XDomainRequest which has .contentType
                                // for the ones that it supports
                                result.contentType = xhr.contentType;
                            } else if (typeof xhr.getResponseHeader !== "undefined" && xhr.getResponseHeader("Content-Type") !== null && xhr.getResponseHeader("Content-Type") !== "") {
                                result.contentType = xhr.getResponseHeader("Content-Type");
                            }
                            if (TinCan.Utils.isApplicationJSON(result.contentType)) {
                                try {
                                    result.contents = JSON.parse(result.contents);
                                } catch (ex) {
                                    self.log("retrieveActivityProfile - failed to deserialize JSON: " + ex);
                                }
                            }
                        }
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }

            requestResult = this.sendRequest(requestCfg);
            if (!callbackWrapper) {
                requestResult.profile = null;
                if (requestResult.err === null && requestResult.xhr.status !== 404) {
                    requestResult.profile = new TinCan.ActivityProfile({
                        id: key,
                        activity: cfg.activity,
                        contents: requestResult.xhr.responseText
                    });
                    if (typeof requestResult.xhr.getResponseHeader !== "undefined" && requestResult.xhr.getResponseHeader("ETag") !== null && requestResult.xhr.getResponseHeader("ETag") !== "") {
                        requestResult.profile.etag = requestResult.xhr.getResponseHeader("ETag");
                    } else {
                        //
                        // either XHR didn't have getResponseHeader (probably cause it is an IE
                        // XDomainRequest object which doesn't) or not populated by LRS so create
                        // the hash ourselves
                        //
                        // the LRS is responsible for quoting the Etag value so we need to mimic
                        // that behavior here as well
                        //
                        requestResult.profile.etag = "\"" + TinCan.Utils.getSHA1String(requestResult.xhr.responseText) + "\"";
                    }
                    if (typeof requestResult.xhr.contentType !== "undefined") {
                        // most likely an XDomainRequest which has .contentType
                        // for the ones that it supports
                        requestResult.profile.contentType = requestResult.xhr.contentType;
                    } else if (typeof requestResult.xhr.getResponseHeader !== "undefined" && requestResult.xhr.getResponseHeader("Content-Type") !== null && requestResult.xhr.getResponseHeader("Content-Type") !== "") {
                        requestResult.profile.contentType = requestResult.xhr.getResponseHeader("Content-Type");
                    }
                    if (TinCan.Utils.isApplicationJSON(requestResult.profile.contentType)) {
                        try {
                            requestResult.profile.contents = JSON.parse(requestResult.profile.contents);
                        } catch (ex) {
                            this.log("retrieveActivityProfile - failed to deserialize JSON: " + ex);
                        }
                    }
                }
            }

            return requestResult;
        },

        /**
        Retrieve the list of IDs for an activity profile, when used from a browser sends to the endpoint using the RESTful interface.
         @method retrieveActivityProfileIds
        @param {Object} cfg Configuration options
            @param {TinCan.Activity} cfg.activity Activity in document identifier
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {String} [cfg.since] Match activity profiles saved since given timestamp
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        @return {Array} List of ids for this Activity profile
        */
        retrieveActivityProfileIds: function (cfg) {
            this.log("retrieveActivityProfileIds");
            var requestCfg, requestHeaders, requestResult, callbackWrapper;

            cfg = cfg || {};
            requestHeaders = cfg.requestHeaders || {};

            requestCfg = {
                url: "activities/profile",
                method: "GET",
                params: {
                    activityId: cfg.activity.id
                },
                headers: requestHeaders,
                ignore404: true
            };
            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err !== null) {
                        cfg.callback(err, result);
                        return;
                    }

                    if (xhr.status === 404) {
                        result = [];
                    } else {
                        try {
                            result = JSON.parse(xhr.responseText);
                        } catch (ex) {
                            err = "Response JSON parse error: " + ex;
                        }
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }
            if (typeof cfg.since !== "undefined") {
                requestCfg.params.since = cfg.since;
            }

            requestResult = this.sendRequest(requestCfg);
            if (!callbackWrapper) {
                requestResult.profileIds = null;
                if (requestResult.err !== null) {
                    return requestResult;
                }

                if (requestResult.xhr.status === 404) {
                    requestResult.profileIds = [];
                } else {
                    try {
                        requestResult.profileIds = JSON.parse(requestResult.xhr.responseText);
                    } catch (ex) {
                        requestResult.err = "retrieveActivityProfileIds - JSON parse error: " + ex;
                    }
                }
            }
            return requestResult;
        },

        /**
        Save an activity profile value, when used from a browser sends to the endpoint using the RESTful interface.
         @method saveActivityProfile
        @param {String} key Key of activity profile to retrieve
        @param val Value to be stored
        @param {Object} cfg Configuration options
            @param {TinCan.Activity} cfg.activity Activity in document identifier
            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing profile
            @param {String} [cfg.contentType] Content-Type to specify in headers (defaults to 'application/octet-stream')
            @param {String} [cfg.method] Method to use. Default: PUT
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        */
        saveActivityProfile: function (key, val, cfg) {
            this.log("saveActivityProfile");
            var requestCfg, requestHeaders;

            requestHeaders = cfg.requestHeaders || {};

            if (typeof cfg.contentType === "undefined") {
                cfg.contentType = "application/octet-stream";
            }
            requestHeaders["Content-Type"] = cfg.contentType;

            if (typeof cfg.method === "undefined" || cfg.method !== "POST") {
                cfg.method = "PUT";
            }

            if (typeof val === "object" && TinCan.Utils.isApplicationJSON(cfg.contentType)) {
                val = JSON.stringify(val);
            }

            requestCfg = {
                url: "activities/profile",
                method: cfg.method,
                params: {
                    profileId: key,
                    activityId: cfg.activity.id
                },
                data: val,
                headers: requestHeaders
            };

            if (typeof cfg.callback !== "undefined") {
                requestCfg.callback = cfg.callback;
            }
            if (typeof cfg.lastSHA1 !== "undefined" && cfg.lastSHA1 !== null) {
                requestCfg.headers["If-Match"] = cfg.lastSHA1;
            } else {
                requestCfg.headers["If-None-Match"] = "*";
            }

            return this.sendRequest(requestCfg);
        },

        /**
        Drop an activity profile value, when used from a browser sends to the endpoint using the RESTful interface. Full activity profile
        delete is not supported by the spec.
         @method dropActivityProfile
        @param {String|null} key Key of activity profile to delete
        @param {Object} cfg Configuration options
            @param {TinCan.Activity} cfg.activity Activity in document identifier
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        */
        dropActivityProfile: function (key, cfg) {
            this.log("dropActivityProfile");
            var requestParams, requestCfg, requestHeaders;

            requestHeaders = cfg.requestHeaders || {};

            requestParams = {
                profileId: key,
                activityId: cfg.activity.id
            };

            requestCfg = {
                url: "activities/profile",
                method: "DELETE",
                params: requestParams,
                headers: requestHeaders
            };

            if (typeof cfg.callback !== "undefined") {
                requestCfg.callback = cfg.callback;
            }

            return this.sendRequest(requestCfg);
        },

        /**
        Retrieve an agent profile value, when used from a browser sends to the endpoint using the RESTful interface.
         @method retrieveAgentProfile
        @param {String} key Key of agent profile to retrieve
        @param {Object} cfg Configuration options
            @param {TinCan.Agent} cfg.agent Agent in document identifier
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        @return {Object} Value retrieved
        */
        retrieveAgentProfile: function (key, cfg) {
            this.log("retrieveAgentProfile");
            var requestCfg = {},
                requestResult,
                callbackWrapper,
                requestHeaders,
                self = this;

            requestHeaders = cfg.requestHeaders || {};

            requestCfg = {
                method: "GET",
                params: {
                    profileId: key
                },
                ignore404: true,
                headers: requestHeaders
            };

            if (this.version === "0.9") {
                requestCfg.url = "actors/profile";
                requestCfg.params.actor = JSON.stringify(cfg.agent.asVersion(this.version));
            } else {
                requestCfg.url = "agents/profile";
                requestCfg.params.agent = JSON.stringify(cfg.agent.asVersion(this.version));
            }
            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err === null) {
                        if (xhr.status === 404) {
                            result = null;
                        } else {
                            result = new TinCan.AgentProfile({
                                id: key,
                                agent: cfg.agent,
                                contents: xhr.responseText
                            });
                            if (typeof xhr.getResponseHeader !== "undefined" && xhr.getResponseHeader("ETag") !== null && xhr.getResponseHeader("ETag") !== "") {
                                result.etag = xhr.getResponseHeader("ETag");
                            } else {
                                //
                                // either XHR didn't have getResponseHeader (probably cause it is an IE
                                // XDomainRequest object which doesn't) or not populated by LRS so create
                                // the hash ourselves
                                //
                                // the LRS is responsible for quoting the Etag value so we need to mimic
                                // that behavior here as well
                                //
                                result.etag = "\"" + TinCan.Utils.getSHA1String(xhr.responseText) + "\"";
                            }
                            if (typeof xhr.contentType !== "undefined") {
                                // most likely an XDomainRequest which has .contentType
                                // for the ones that it supports
                                result.contentType = xhr.contentType;
                            } else if (typeof xhr.getResponseHeader !== "undefined" && xhr.getResponseHeader("Content-Type") !== null && xhr.getResponseHeader("Content-Type") !== "") {
                                result.contentType = xhr.getResponseHeader("Content-Type");
                            }
                            if (TinCan.Utils.isApplicationJSON(result.contentType)) {
                                try {
                                    result.contents = JSON.parse(result.contents);
                                } catch (ex) {
                                    self.log("retrieveAgentProfile - failed to deserialize JSON: " + ex);
                                }
                            }
                        }
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }

            requestResult = this.sendRequest(requestCfg);
            if (!callbackWrapper) {
                requestResult.profile = null;
                if (requestResult.err === null && requestResult.xhr.status !== 404) {
                    requestResult.profile = new TinCan.AgentProfile({
                        id: key,
                        agent: cfg.agent,
                        contents: requestResult.xhr.responseText
                    });
                    if (typeof requestResult.xhr.getResponseHeader !== "undefined" && requestResult.xhr.getResponseHeader("ETag") !== null && requestResult.xhr.getResponseHeader("ETag") !== "") {
                        requestResult.profile.etag = requestResult.xhr.getResponseHeader("ETag");
                    } else {
                        //
                        // either XHR didn't have getResponseHeader (probably cause it is an IE
                        // XDomainRequest object which doesn't) or not populated by LRS so create
                        // the hash ourselves
                        //
                        // the LRS is responsible for quoting the Etag value so we need to mimic
                        // that behavior here as well
                        //
                        requestResult.profile.etag = "\"" + TinCan.Utils.getSHA1String(requestResult.xhr.responseText) + "\"";
                    }
                    if (typeof requestResult.xhr.contentType !== "undefined") {
                        // most likely an XDomainRequest which has .contentType
                        // for the ones that it supports
                        requestResult.profile.contentType = requestResult.xhr.contentType;
                    } else if (typeof requestResult.xhr.getResponseHeader !== "undefined" && requestResult.xhr.getResponseHeader("Content-Type") !== null && requestResult.xhr.getResponseHeader("Content-Type") !== "") {
                        requestResult.profile.contentType = requestResult.xhr.getResponseHeader("Content-Type");
                    }
                    if (TinCan.Utils.isApplicationJSON(requestResult.profile.contentType)) {
                        try {
                            requestResult.profile.contents = JSON.parse(requestResult.profile.contents);
                        } catch (ex) {
                            this.log("retrieveAgentProfile - failed to deserialize JSON: " + ex);
                        }
                    }
                }
            }

            return requestResult;
        },

        /**
        Retrieve the list of profileIds for an agent profile, when used from a browser sends to the endpoint using the RESTful interface.
         @method retrieveAgentProfileIds
        @param {Object} cfg Configuration options
            @param {TinCan.Agent} cfg.agent Agent in document identifier
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {String} [cfg.since] Match activity profiles saved since given timestamp
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        @return {Array} List of profileIds for this Agent
         */
        retrieveAgentProfileIds: function (cfg) {
            this.log("retrieveAgentProfileIds");
            var requestParams = {},
                requestCfg,
                requestHeaders,
                requestResult,
                callbackWrapper;

            cfg = cfg || {};
            requestHeaders = cfg.requestHeaders || {};

            requestCfg = {
                method: "GET",
                params: requestParams,
                headers: requestHeaders,
                ignore404: true
            };

            if (this.version === "0.9") {
                requestCfg.url = "actors/profile";
                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));
            } else {
                requestCfg.url = "agents/profile";
                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));
            }
            if (typeof cfg.callback !== "undefined") {
                callbackWrapper = function (err, xhr) {
                    var result = xhr;

                    if (err !== null) {
                        cfg.callback(err, result);
                        return;
                    }

                    if (xhr.status === 404) {
                        result = [];
                    } else {
                        try {
                            result = JSON.parse(xhr.responseText);
                        } catch (ex) {
                            err = "Response JSON parse error: " + ex;
                        }
                    }

                    cfg.callback(err, result);
                };
                requestCfg.callback = callbackWrapper;
            }
            if (typeof cfg.since !== "undefined") {
                requestCfg.params.since = cfg.since;
            }

            requestResult = this.sendRequest(requestCfg);
            if (!callbackWrapper) {
                requestResult.profileIds = null;
                if (requestResult.err !== null) {
                    return requestResult;
                }

                if (requestResult.xhr.status === 404) {
                    requestResult.profileIds = [];
                } else {
                    try {
                        requestResult.profileIds = JSON.parse(requestResult.xhr.responseText);
                    } catch (ex) {
                        requestResult.err = "retrieveAgentProfileIds - JSON parse error: " + ex;
                    }
                }
            }
            return requestResult;
        },

        /**
        Save an agent profile value, when used from a browser sends to the endpoint using the RESTful interface.
         @method saveAgentProfile
        @param {String} key Key of agent profile to retrieve
        @param val Value to be stored
        @param {Object} cfg Configuration options
            @param {TinCan.Agent} cfg.agent Agent in document identifier
            @param {String} [cfg.lastSHA1] SHA1 of the previously seen existing profile
            @param {String} [cfg.contentType] Content-Type to specify in headers (defaults to 'application/octet-stream')
            @param {String} [cfg.method] Method to use. Default: PUT
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        */
        saveAgentProfile: function (key, val, cfg) {
            this.log("saveAgentProfile");
            var requestCfg, requestHeaders;

            requestHeaders = cfg.requestHeaders || {};

            if (typeof cfg.contentType === "undefined") {
                cfg.contentType = "application/octet-stream";
            }
            requestHeaders["Content-Type"] = cfg.contentType;

            if (typeof cfg.method === "undefined" || cfg.method !== "POST") {
                cfg.method = "PUT";
            }

            if (typeof val === "object" && TinCan.Utils.isApplicationJSON(cfg.contentType)) {
                val = JSON.stringify(val);
            }

            requestCfg = {
                method: cfg.method,
                params: {
                    profileId: key
                },
                data: val,
                headers: requestHeaders
            };

            if (this.version === "0.9") {
                requestCfg.url = "actors/profile";
                requestCfg.params.actor = JSON.stringify(cfg.agent.asVersion(this.version));
            } else {
                requestCfg.url = "agents/profile";
                requestCfg.params.agent = JSON.stringify(cfg.agent.asVersion(this.version));
            }
            if (typeof cfg.callback !== "undefined") {
                requestCfg.callback = cfg.callback;
            }
            if (typeof cfg.lastSHA1 !== "undefined" && cfg.lastSHA1 !== null) {
                requestCfg.headers["If-Match"] = cfg.lastSHA1;
            } else {
                requestCfg.headers["If-None-Match"] = "*";
            }

            return this.sendRequest(requestCfg);
        },

        /**
        Drop an agent profile value, when used from a browser sends to the endpoint using the RESTful interface. Full agent profile
        delete is not supported by the spec.
         @method dropAgentProfile
        @param {String|null} key Key of agent profile to delete
        @param {Object} cfg Configuration options
            @param {TinCan.Agent} cfg.agent Agent in document identifier
            @param {Function} [cfg.callback] Callback to execute on completion
            @param {Object} [cfg.requestHeaders] Optional object containing additional headers to add to request
        */
        dropAgentProfile: function (key, cfg) {
            this.log("dropAgentProfile");
            var requestParams, requestCfg, requestHeaders;

            requestHeaders = cfg.requestHeaders || {};

            requestParams = {
                profileId: key
            };
            requestCfg = {
                method: "DELETE",
                params: requestParams,
                headers: requestHeaders
            };

            if (this.version === "0.9") {
                requestCfg.url = "actors/profile";
                requestParams.actor = JSON.stringify(cfg.agent.asVersion(this.version));
            } else {
                requestCfg.url = "agents/profile";
                requestParams.agent = JSON.stringify(cfg.agent.asVersion(this.version));
            }
            if (typeof cfg.callback !== "undefined") {
                requestCfg.callback = cfg.callback;
            }

            return this.sendRequest(requestCfg);
        }
    };

    /**
    Allows client code to determine whether their environment supports synchronous xhr handling
    @static this is a static property, set by the environment
    */
    LRS.syncEnabled = null;
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.AgentAccount
**/
(function () {
    "use strict";

    /**
    @class TinCan.AgentAccount
    @constructor
    */

    var AgentAccount = TinCan.AgentAccount = function (cfg) {
        this.log("constructor");

        /**
        @property homePage
        @type String
        */
        this.homePage = null;

        /**
        @property name
        @type String
        */
        this.name = null;

        this.init(cfg);
    };
    AgentAccount.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "AgentAccount",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["name", "homePage"];

            cfg = cfg || {};

            // handle .9 name changes
            if (typeof cfg.accountServiceHomePage !== "undefined") {
                cfg.homePage = cfg.accountServiceHomePage;
            }
            if (typeof cfg.accountName !== "undefined") {
                cfg.name = cfg.accountName;
            }

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }
        },

        toString: function () {
            this.log("toString");
            var result = "";

            if (this.name !== null || this.homePage !== null) {
                result += this.name !== null ? this.name : "-";
                result += ":";
                result += this.homePage !== null ? this.homePage : "-";
            } else {
                result = "AgentAccount: unidentified";
            }

            return result;
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion: " + version);
            var result = {};

            version = version || TinCan.versions()[0];

            if (version === "0.9") {
                result.accountName = this.name;
                result.accountServiceHomePage = this.homePage;
            } else {
                result.name = this.name;
                result.homePage = this.homePage;
            }

            return result;
        }
    };

    /**
    @method fromJSON
    @return {Object} AgentAccount
    @static
    */
    AgentAccount.fromJSON = function (acctJSON) {
        AgentAccount.prototype.log("fromJSON");
        var _acct = JSON.parse(acctJSON);

        return new AgentAccount(_acct);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Agent
**/
(function () {
    "use strict";

    /**
    @class TinCan.Agent
    @constructor
    */

    var Agent = TinCan.Agent = function (cfg) {
        this.log("constructor");

        /**
        @property name
        @type String
        */
        this.name = null;

        /**
        @property mbox
        @type String
        */
        this.mbox = null;

        /**
        @property mbox_sha1sum
        @type String
        */
        this.mbox_sha1sum = null;

        /**
        @property openid
        @type String
        */
        this.openid = null;

        /**
        @property account
        @type TinCan.AgentAccount
        */
        this.account = null;

        /**
        @property degraded
        @type Boolean
        @default false
        */
        this.degraded = false;

        this.init(cfg);
    };
    Agent.prototype = {
        /**
        @property objectType
        @type String
        @default Agent
        */
        objectType: "Agent",

        /**
        @property LOG_SRC
        */
        LOG_SRC: "Agent",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["name", "mbox", "mbox_sha1sum", "openid"],
                val;

            cfg = cfg || {};

            // handle .9 split names and array properties into single interface
            if (typeof cfg.lastName !== "undefined" || typeof cfg.firstName !== "undefined") {
                cfg.name = "";
                if (typeof cfg.firstName !== "undefined" && cfg.firstName.length > 0) {
                    cfg.name = cfg.firstName[0];
                    if (cfg.firstName.length > 1) {
                        this.degraded = true;
                    }
                }

                if (cfg.name !== "") {
                    cfg.name += " ";
                }

                if (typeof cfg.lastName !== "undefined" && cfg.lastName.length > 0) {
                    cfg.name += cfg.lastName[0];
                    if (cfg.lastName.length > 1) {
                        this.degraded = true;
                    }
                }
            } else if (typeof cfg.familyName !== "undefined" || typeof cfg.givenName !== "undefined") {
                cfg.name = "";
                if (typeof cfg.givenName !== "undefined" && cfg.givenName.length > 0) {
                    cfg.name = cfg.givenName[0];
                    if (cfg.givenName.length > 1) {
                        this.degraded = true;
                    }
                }

                if (cfg.name !== "") {
                    cfg.name += " ";
                }

                if (typeof cfg.familyName !== "undefined" && cfg.familyName.length > 0) {
                    cfg.name += cfg.familyName[0];
                    if (cfg.familyName.length > 1) {
                        this.degraded = true;
                    }
                }
            }

            if (typeof cfg.name === "object" && cfg.name !== null) {
                if (cfg.name.length > 1) {
                    this.degraded = true;
                }
                cfg.name = cfg.name[0];
            }
            if (typeof cfg.mbox === "object" && cfg.mbox !== null) {
                if (cfg.mbox.length > 1) {
                    this.degraded = true;
                }
                cfg.mbox = cfg.mbox[0];
            }
            if (typeof cfg.mbox_sha1sum === "object" && cfg.mbox_sha1sum !== null) {
                if (cfg.mbox_sha1sum.length > 1) {
                    this.degraded = true;
                }
                cfg.mbox_sha1sum = cfg.mbox_sha1sum[0];
            }
            if (typeof cfg.openid === "object" && cfg.openid !== null) {
                if (cfg.openid.length > 1) {
                    this.degraded = true;
                }
                cfg.openid = cfg.openid[0];
            }
            if (typeof cfg.account === "object" && cfg.account !== null && typeof cfg.account.homePage === "undefined" && typeof cfg.account.name === "undefined") {
                if (cfg.account.length === 0) {
                    delete cfg.account;
                } else {
                    if (cfg.account.length > 1) {
                        this.degraded = true;
                    }
                    cfg.account = cfg.account[0];
                }
            }

            if (cfg.hasOwnProperty("account")) {
                if (cfg.account instanceof TinCan.AgentAccount) {
                    this.account = cfg.account;
                } else {
                    this.account = new TinCan.AgentAccount(cfg.account);
                }
            }

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    val = cfg[directProps[i]];
                    if (directProps[i] === "mbox" && val.indexOf("mailto:") === -1) {
                        val = "mailto:" + val;
                    }
                    this[directProps[i]] = val;
                }
            }
        },

        toString: function () {
            this.log("toString");

            if (this.name !== null) {
                return this.name;
            }
            if (this.mbox !== null) {
                return this.mbox.replace("mailto:", "");
            }
            if (this.mbox_sha1sum !== null) {
                return this.mbox_sha1sum;
            }
            if (this.openid !== null) {
                return this.openid;
            }
            if (this.account !== null) {
                return this.account.toString();
            }

            return this.objectType + ": unidentified";
        },

        /**
        While a TinCan.Agent instance can store more than one inverse functional identifier
        this method will always only output one to be compliant with the statement sending
        specification. Order of preference is: mbox, mbox_sha1sum, openid, account
         @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion: " + version);
            var result = {
                objectType: this.objectType
            };

            version = version || TinCan.versions()[0];

            if (version === "0.9") {
                if (this.mbox !== null) {
                    result.mbox = [this.mbox];
                } else if (this.mbox_sha1sum !== null) {
                    result.mbox_sha1sum = [this.mbox_sha1sum];
                } else if (this.openid !== null) {
                    result.openid = [this.openid];
                } else if (this.account !== null) {
                    result.account = [this.account.asVersion(version)];
                }

                if (this.name !== null) {
                    result.name = [this.name];
                }
            } else {
                if (this.mbox !== null) {
                    result.mbox = this.mbox;
                } else if (this.mbox_sha1sum !== null) {
                    result.mbox_sha1sum = this.mbox_sha1sum;
                } else if (this.openid !== null) {
                    result.openid = this.openid;
                } else if (this.account !== null) {
                    result.account = this.account.asVersion(version);
                }

                if (this.name !== null) {
                    result.name = this.name;
                }
            }

            return result;
        }
    };

    /**
    @method fromJSON
    @return {Object} Agent
    @static
    */
    Agent.fromJSON = function (agentJSON) {
        Agent.prototype.log("fromJSON");
        var _agent = JSON.parse(agentJSON);

        return new Agent(_agent);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Group
**/
(function () {
    "use strict";

    /**
    @class TinCan.Group
    @constructor
    */

    var Group = TinCan.Group = function (cfg) {
        this.log("constructor");

        /**
        @property name
        @type String
        */
        this.name = null;

        /**
        @property mbox
        @type String
        */
        this.mbox = null;

        /**
        @property mbox_sha1sum
        @type String
        */
        this.mbox_sha1sum = null;

        /**
        @property openid
        @type String
        */
        this.openid = null;

        /**
        @property account
        @type TinCan.AgentAccount
        */
        this.account = null;

        /**
        @property member
        @type Array
        */
        this.member = [];

        this.init(cfg);
    };
    Group.prototype = {
        /**
        @property objectType
        @type String
        @default "Group"
        @static
        */
        objectType: "Group",

        /**
        @property LOG_SRC
        */
        LOG_SRC: "Group",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");
            var i;

            cfg = cfg || {};

            TinCan.Agent.prototype.init.call(this, cfg);

            if (typeof cfg.member !== "undefined") {
                for (i = 0; i < cfg.member.length; i += 1) {
                    if (cfg.member[i] instanceof TinCan.Agent) {
                        this.member.push(cfg.member[i]);
                    } else {
                        this.member.push(new TinCan.Agent(cfg.member[i]));
                    }
                }
            }
        },

        toString: function (lang) {
            this.log("toString");

            var result = TinCan.Agent.prototype.toString.call(this, lang);
            if (result !== this.objectType + ": unidentified") {
                result = this.objectType + ": " + result;
            }

            return result;
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion: " + version);
            var result, i;

            version = version || TinCan.versions()[0];

            result = TinCan.Agent.prototype.asVersion.call(this, version);

            if (this.member.length > 0) {
                result.member = [];
                for (i = 0; i < this.member.length; i += 1) {
                    result.member.push(this.member[i].asVersion(version));
                }
            }

            return result;
        }
    };

    /**
    @method fromJSON
    @return {Object} Group
    @static
    */
    Group.fromJSON = function (groupJSON) {
        Group.prototype.log("fromJSON");
        var _group = JSON.parse(groupJSON);

        return new Group(_group);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Verb
*/
(function () {
    "use strict";

    //
    // this represents the full set of verb values that were
    // allowed by the .9 spec version, if an object is created with one of
    // the short forms it will be upconverted to the matching long form,
    // for local storage and use and if an object is needed in .9 version
    // consequently down converted
    //
    // hopefully this list will never grow (or change) and only the exact
    // ADL compatible URLs should be matched
    //

    var _downConvertMap = {
        "http://adlnet.gov/expapi/verbs/experienced": "experienced",
        "http://adlnet.gov/expapi/verbs/attended": "attended",
        "http://adlnet.gov/expapi/verbs/attempted": "attempted",
        "http://adlnet.gov/expapi/verbs/completed": "completed",
        "http://adlnet.gov/expapi/verbs/passed": "passed",
        "http://adlnet.gov/expapi/verbs/failed": "failed",
        "http://adlnet.gov/expapi/verbs/answered": "answered",
        "http://adlnet.gov/expapi/verbs/interacted": "interacted",
        "http://adlnet.gov/expapi/verbs/imported": "imported",
        "http://adlnet.gov/expapi/verbs/created": "created",
        "http://adlnet.gov/expapi/verbs/shared": "shared",
        "http://adlnet.gov/expapi/verbs/voided": "voided"
    },


    /**
    @class TinCan.Verb
    @constructor
    */
    Verb = TinCan.Verb = function (cfg) {
        this.log("constructor");

        /**
        @property id
        @type String
        */
        this.id = null;

        /**
        @property display
        @type Object
        */
        this.display = null;

        this.init(cfg);
    };
    Verb.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "Verb",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["id", "display"],
                prop;

            if (typeof cfg === "string") {
                this.id = cfg;
                this.display = {
                    und: this.id
                };

                //If simple string like "attempted" was passed in (0.9 verbs), 
                //upconvert the ID to the 0.95 ADL version
                for (prop in _downConvertMap) {
                    if (_downConvertMap.hasOwnProperty(prop) && _downConvertMap[prop] === cfg) {
                        this.id = prop;
                        break;
                    }
                }
            } else {
                cfg = cfg || {};

                for (i = 0; i < directProps.length; i += 1) {
                    if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                        this[directProps[i]] = cfg[directProps[i]];
                    }
                }

                if (this.display === null && typeof _downConvertMap[this.id] !== "undefined") {
                    this.display = {
                        "und": _downConvertMap[this.id]
                    };
                }
            }
        },

        /**
        @method toString
        @return {String} String representation of the verb
        */
        toString: function (lang) {
            this.log("toString");

            if (this.display !== null) {
                return this.getLangDictionaryValue("display", lang);
            }

            return this.id;
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result;

            version = version || TinCan.versions()[0];

            if (version === "0.9") {
                result = _downConvertMap[this.id];
            } else {
                result = {
                    id: this.id
                };
                if (this.display !== null) {
                    result.display = this.display;
                }
            }

            return result;
        },

        /**
        See {{#crossLink "TinCan.Utils/getLangDictionaryValue"}}{{/crossLink}}
         @method getLangDictionaryValue
        */
        getLangDictionaryValue: TinCan.Utils.getLangDictionaryValue
    };

    /**
    @method fromJSON
    @param {String} verbJSON String of JSON representing the verb
    @return {Object} Verb
    @static
    */
    Verb.fromJSON = function (verbJSON) {
        Verb.prototype.log("fromJSON");
        var _verb = JSON.parse(verbJSON);

        return new Verb(_verb);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Result
**/
(function () {
    "use strict";

    /**
    @class TinCan.Result
    @constructor
    */

    var Result = TinCan.Result = function (cfg) {
        this.log("constructor");

        /**
        @property score
        @type TinCan.Score|null
        */
        this.score = null;

        /**
        @property success
        @type Boolean|null
        */
        this.success = null;

        /**
        @property completion
        @type Boolean|null
        */
        this.completion = null;

        /**
        @property duration
        @type String|null
        */
        this.duration = null;

        /**
        @property response
        @type String|null
        */
        this.response = null;

        /**
        @property extensions
        @type Object|null
        */
        this.extensions = null;

        this.init(cfg);
    };
    Result.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "Result",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");

            var i,
                directProps = ["completion", "duration", "extensions", "response", "success"];

            cfg = cfg || {};

            if (cfg.hasOwnProperty("score") && cfg.score !== null) {
                if (cfg.score instanceof TinCan.Score) {
                    this.score = cfg.score;
                } else {
                    this.score = new TinCan.Score(cfg.score);
                }
            }

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }

            // 0.9 used a string, store it internally as a bool
            if (this.completion === "Completed") {
                this.completion = true;
            }
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result = {},
                optionalDirectProps = ["success", "duration", "response", "extensions"],
                optionalObjProps = ["score"],
                i;

            version = version || TinCan.versions()[0];

            for (i = 0; i < optionalDirectProps.length; i += 1) {
                if (this[optionalDirectProps[i]] !== null) {
                    result[optionalDirectProps[i]] = this[optionalDirectProps[i]];
                }
            }
            for (i = 0; i < optionalObjProps.length; i += 1) {
                if (this[optionalObjProps[i]] !== null) {
                    result[optionalObjProps[i]] = this[optionalObjProps[i]].asVersion(version);
                }
            }
            if (this.completion !== null) {
                if (version === "0.9") {
                    if (this.completion) {
                        result.completion = "Completed";
                    }
                } else {
                    result.completion = this.completion;
                }
            }

            return result;
        }
    };

    /**
    @method fromJSON
    @return {Object} Result
    @static
    */
    Result.fromJSON = function (resultJSON) {
        Result.prototype.log("fromJSON");
        var _result = JSON.parse(resultJSON);

        return new Result(_result);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Score
**/
(function () {
    "use strict";

    /**
    @class TinCan.Score
    @constructor
    */

    var Score = TinCan.Score = function (cfg) {
        this.log("constructor");

        /**
        @property scaled
        @type String
        */
        this.scaled = null;

        /**
        @property raw
        @type String
        */
        this.raw = null;

        /**
        @property min
        @type String
        */
        this.min = null;

        /**
        @property max
        @type String
        */
        this.max = null;

        this.init(cfg);
    };
    Score.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "Score",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");

            var i,
                directProps = ["scaled", "raw", "min", "max"];

            cfg = cfg || {};

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result = {},
                optionalDirectProps = ["scaled", "raw", "min", "max"],
                i;

            version = version || TinCan.versions()[0];

            for (i = 0; i < optionalDirectProps.length; i += 1) {
                if (this[optionalDirectProps[i]] !== null) {
                    result[optionalDirectProps[i]] = this[optionalDirectProps[i]];
                }
            }

            return result;
        }
    };

    /**
    @method fromJSON
    @return {Object} Score
    @static
    */
    Score.fromJSON = function (scoreJSON) {
        Score.prototype.log("fromJSON");
        var _score = JSON.parse(scoreJSON);

        return new Score(_score);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.InteractionComponent
**/
(function () {
    "use strict";

    /**
    @class TinCan.InteractionComponent
    @constructor
    */

    var InteractionComponent = TinCan.InteractionComponent = function (cfg) {
        this.log("constructor");

        /**
        @property id
        @type String
        */
        this.id = null;

        /**
        @property description
        @type Object
        */
        this.description = null;

        this.init(cfg);
    };
    InteractionComponent.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "InteractionComponent",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["id", "description"];

            cfg = cfg || {};

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result = {
                id: this.id
            },
                optionalDirectProps = ["description"],
                i,
                prop;

            version = version || TinCan.versions()[0];

            for (i = 0; i < optionalDirectProps.length; i += 1) {
                prop = optionalDirectProps[i];
                if (this[prop] !== null) {
                    result[prop] = this[prop];
                }
            }

            return result;
        },

        /**
        See {{#crossLink "TinCan.Utils/getLangDictionaryValue"}}{{/crossLink}}
         @method getLangDictionaryValue
        */
        getLangDictionaryValue: TinCan.Utils.getLangDictionaryValue
    };

    /**
    @method fromJSON
    @return {Object} InteractionComponent
    @static
    */
    InteractionComponent.fromJSON = function (icJSON) {
        InteractionComponent.prototype.log("fromJSON");
        var _ic = JSON.parse(icJSON);

        return new InteractionComponent(_ic);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.ActivityDefinition
**/
(function () {
    "use strict";

    //
    // this represents the full set of activity definition types that were
    // allowed by the .9 spec version, if an object is created with one of
    // the short forms it will be upconverted to the matching long form,
    // for local storage and use and if an object is needed in .9 version
    // consequently down converted
    //
    // hopefully this list will never grow (or change) and only the exact
    // ADL compatible URLs should be matched
    //

    var _downConvertMap = {
        "http://adlnet.gov/expapi/activities/course": "course",
        "http://adlnet.gov/expapi/activities/module": "module",
        "http://adlnet.gov/expapi/activities/meeting": "meeting",
        "http://adlnet.gov/expapi/activities/media": "media",
        "http://adlnet.gov/expapi/activities/performance": "performance",
        "http://adlnet.gov/expapi/activities/simulation": "simulation",
        "http://adlnet.gov/expapi/activities/assessment": "assessment",
        "http://adlnet.gov/expapi/activities/interaction": "interaction",
        "http://adlnet.gov/expapi/activities/cmi.interaction": "cmi.interaction",
        "http://adlnet.gov/expapi/activities/question": "question",
        "http://adlnet.gov/expapi/activities/objective": "objective",
        "http://adlnet.gov/expapi/activities/link": "link"
    },


    /**
    @class TinCan.ActivityDefinition
    @constructor
    */
    ActivityDefinition = TinCan.ActivityDefinition = function (cfg) {
        this.log("constructor");

        /**
        @property name
        @type Object
        */
        this.name = null;

        /**
        @property description
        @type Object
        */
        this.description = null;

        /**
        @property type
        @type String
        */
        this.type = null;

        /**
        @property moreInfo
        @type String
        */
        this.moreInfo = null;

        /**
        @property extensions
        @type Object
        */
        this.extensions = null;

        /**
        @property interactionType
        @type String
        */
        this.interactionType = null;

        /**
        @property correctResponsesPattern
        @type Array
        */
        this.correctResponsesPattern = null;

        /**
        @property choices
        @type Array
        */
        this.choices = null;

        /**
        @property scale
        @type Array
        */
        this.scale = null;

        /**
        @property source
        @type Array
        */
        this.source = null;

        /**
        @property target
        @type Array
        */
        this.target = null;

        /**
        @property steps
        @type Array
        */
        this.steps = null;

        this.init(cfg);
    };
    ActivityDefinition.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "ActivityDefinition",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");

            var i,
                j,
                prop,
                directProps = ["name", "description", "moreInfo", "extensions", "correctResponsesPattern"],
                interactionComponentProps = [];

            cfg = cfg || {};

            if (cfg.hasOwnProperty("type") && cfg.type !== null) {
                // TODO: verify type is URI?
                for (prop in _downConvertMap) {
                    if (_downConvertMap.hasOwnProperty(prop) && _downConvertMap[prop] === cfg.type) {
                        cfg.type = _downConvertMap[prop];
                    }
                }
                this.type = cfg.type;
            }

            if (cfg.hasOwnProperty("interactionType") && cfg.interactionType !== null) {
                // TODO: verify interaction type in acceptable set?
                this.interactionType = cfg.interactionType;
                if (cfg.interactionType === "choice" || cfg.interactionType === "sequencing") {
                    interactionComponentProps.push("choices");
                } else if (cfg.interactionType === "likert") {
                    interactionComponentProps.push("scale");
                } else if (cfg.interactionType === "matching") {
                    interactionComponentProps.push("source");
                    interactionComponentProps.push("target");
                } else if (cfg.interactionType === "performance") {
                    interactionComponentProps.push("steps");
                }

                if (interactionComponentProps.length > 0) {
                    for (i = 0; i < interactionComponentProps.length; i += 1) {
                        prop = interactionComponentProps[i];
                        if (cfg.hasOwnProperty(prop) && cfg[prop] !== null) {
                            this[prop] = [];
                            for (j = 0; j < cfg[prop].length; j += 1) {
                                if (cfg[prop][j] instanceof TinCan.InteractionComponent) {
                                    this[prop].push(cfg[prop][j]);
                                } else {
                                    this[prop].push(new TinCan.InteractionComponent(cfg[prop][j]));
                                }
                            }
                        }
                    }
                }
            }

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }
        },

        /**
        @method toString
        @return {String} String representation of the definition
        */
        toString: function (lang) {
            this.log("toString");

            if (this.name !== null) {
                return this.getLangDictionaryValue("name", lang);
            }

            if (this.description !== null) {
                return this.getLangDictionaryValue("description", lang);
            }

            return "";
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result = {},
                directProps = ["name", "description", "interactionType", "correctResponsesPattern", "extensions"],
                interactionComponentProps = ["choices", "scale", "source", "target", "steps"],
                i,
                j,
                prop;

            version = version || TinCan.versions()[0];

            if (this.type !== null) {
                if (version === "0.9") {
                    result.type = _downConvertMap[this.type];
                } else {
                    result.type = this.type;
                }
            }

            for (i = 0; i < directProps.length; i += 1) {
                prop = directProps[i];
                if (this[prop] !== null) {
                    result[prop] = this[prop];
                }
            }

            for (i = 0; i < interactionComponentProps.length; i += 1) {
                prop = interactionComponentProps[i];
                if (this[prop] !== null) {
                    result[prop] = [];
                    for (j = 0; j < this[prop].length; j += 1) {
                        result[prop].push(this[prop][j].asVersion(version));
                    }
                }
            }

            if (version.indexOf("0.9") !== 0) {
                if (this.moreInfo !== null) {
                    result.moreInfo = this.moreInfo;
                }
            }

            return result;
        },

        /**
        See {{#crossLink "TinCan.Utils/getLangDictionaryValue"}}{{/crossLink}}
         @method getLangDictionaryValue
        */
        getLangDictionaryValue: TinCan.Utils.getLangDictionaryValue
    };

    /**
    @method fromJSON
    @return {Object} ActivityDefinition
    @static
    */
    ActivityDefinition.fromJSON = function (definitionJSON) {
        ActivityDefinition.prototype.log("fromJSON");
        var _definition = JSON.parse(definitionJSON);

        return new ActivityDefinition(_definition);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Activity
**/
(function () {
    "use strict";

    /**
    @class TinCan.Activity
    @constructor
    */

    var Activity = TinCan.Activity = function (cfg) {
        this.log("constructor");

        /**
        @property objectType
        @type String
        @default Activity
        */
        this.objectType = "Activity";

        /**
        @property id
        @type String
        */
        this.id = null;

        /**
        @property definition
        @type TinCan.ActivityDefinition
        */
        this.definition = null;

        this.init(cfg);
    };
    Activity.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "Activity",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");

            var i,
                directProps = ["id"];

            cfg = cfg || {};

            if (cfg.hasOwnProperty("definition")) {
                if (cfg.definition instanceof TinCan.ActivityDefinition) {
                    this.definition = cfg.definition;
                } else {
                    this.definition = new TinCan.ActivityDefinition(cfg.definition);
                }
            }

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }
        },

        /**
        @method toString
        @return {String} String representation of the activity
        */
        toString: function (lang) {
            this.log("toString");
            var defString = "";

            if (this.definition !== null) {
                defString = this.definition.toString(lang);
                if (defString !== "") {
                    return defString;
                }
            }

            if (this.id !== null) {
                return this.id;
            }

            return "Activity: unidentified";
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result = {
                id: this.id,
                objectType: this.objectType
            };

            version = version || TinCan.versions()[0];

            if (this.definition !== null) {
                result.definition = this.definition.asVersion(version);
            }

            return result;
        }
    };

    /**
    @method fromJSON
    @return {Object} Activity
    @static
    */
    Activity.fromJSON = function (activityJSON) {
        Activity.prototype.log("fromJSON");
        var _activity = JSON.parse(activityJSON);

        return new Activity(_activity);
    };
})();

/*
    Copyright 2013 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.ContextActivities
**/
(function () {
    "use strict";

    /**
    @class TinCan.ContextActivities
    @constructor
    */

    var ContextActivities = TinCan.ContextActivities = function (cfg) {
        this.log("constructor");

        /**
        @property category
        @type Array
        */
        this.category = null;

        /**
        @property parent
        @type Array
        */
        this.parent = null;

        /**
        @property grouping
        @type Array
        */
        this.grouping = null;

        /**
        @property other
        @type Array
        */
        this.other = null;

        this.init(cfg);
    };
    ContextActivities.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "ContextActivities",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");

            var i,
                j,
                objProps = ["category", "parent", "grouping", "other"],
                prop,
                val;

            cfg = cfg || {};

            for (i = 0; i < objProps.length; i += 1) {
                prop = objProps[i];
                if (cfg.hasOwnProperty(prop) && cfg[prop] !== null) {
                    if (Object.prototype.toString.call(cfg[prop]) === "[object Array]") {
                        for (j = 0; j < cfg[prop].length; j += 1) {
                            this.add(prop, cfg[prop][j]);
                        }
                    } else {
                        val = cfg[prop];

                        this.add(prop, val);
                    }
                }
            }
        },

        /**
        @method add
        @param String key Property to add value to one of "category", "parent", "grouping", "other"
        @return Number index where the value was added
        */
        add: function (key, val) {
            if (key !== "category" && key !== "parent" && key !== "grouping" && key !== "other") {
                return;
            }

            if (this[key] === null) {
                this[key] = [];
            }

            if (!(val instanceof TinCan.Activity)) {
                val = typeof val === "string" ? { id: val } : val;
                val = new TinCan.Activity(val);
            }

            this[key].push(val);

            return this[key].length - 1;
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result = {},
                optionalObjProps = ["parent", "grouping", "other"],
                i,
                j;

            version = version || TinCan.versions()[0];

            for (i = 0; i < optionalObjProps.length; i += 1) {
                if (this[optionalObjProps[i]] !== null && this[optionalObjProps[i]].length > 0) {
                    if (version === "0.9" || version === "0.95") {
                        if (this[optionalObjProps[i]].length > 1) {
                            // TODO: exception?
                            this.log("[warning] version does not support multiple values in: " + optionalObjProps[i]);
                        }

                        result[optionalObjProps[i]] = this[optionalObjProps[i]][0].asVersion(version);
                    } else {
                        result[optionalObjProps[i]] = [];
                        for (j = 0; j < this[optionalObjProps[i]].length; j += 1) {
                            result[optionalObjProps[i]].push(this[optionalObjProps[i]][j].asVersion(version));
                        }
                    }
                }
            }
            if (this.category !== null && this.category.length > 0) {
                if (version === "0.9" || version === "0.95") {
                    this.log("[error] version does not support the 'category' property: " + version);
                    throw new Error(version + " does not support the 'category' property");
                } else {
                    result.category = [];
                    for (i = 0; i < this.category.length; i += 1) {
                        result.category.push(this.category[i].asVersion(version));
                    }
                }
            }

            return result;
        }
    };

    /**
    @method fromJSON
    @return {Object} ContextActivities
    @static
    */
    ContextActivities.fromJSON = function (contextActivitiesJSON) {
        ContextActivities.prototype.log("fromJSON");
        var _contextActivities = JSON.parse(contextActivitiesJSON);

        return new ContextActivities(_contextActivities);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Context
**/
(function () {
    "use strict";

    /**
    @class TinCan.Context
    @constructor
    */

    var Context = TinCan.Context = function (cfg) {
        this.log("constructor");

        /**
        @property registration
        @type String|null
        */
        this.registration = null;

        /**
        @property instructor
        @type TinCan.Agent|TinCan.Group|null
        */
        this.instructor = null;

        /**
        @property team
        @type TinCan.Agent|TinCan.Group|null
        */
        this.team = null;

        /**
        @property contextActivities
        @type ContextActivities|null
        */
        this.contextActivities = null;

        /**
        @property revision
        @type String|null
        */
        this.revision = null;

        /**
        @property platform
        @type Object|null
        */
        this.platform = null;

        /**
        @property language
        @type String|null
        */
        this.language = null;

        /**
        @property statement
        @type StatementRef|null
        */
        this.statement = null;

        /**
        @property extensions
        @type String
        */
        this.extensions = null;

        this.init(cfg);
    };
    Context.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "Context",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");

            var i,
                directProps = ["registration", "revision", "platform", "language", "extensions"],
                agentGroupProps = ["instructor", "team"],
                prop,
                val;

            cfg = cfg || {};

            for (i = 0; i < directProps.length; i += 1) {
                prop = directProps[i];
                if (cfg.hasOwnProperty(prop) && cfg[prop] !== null) {
                    this[prop] = cfg[prop];
                }
            }
            for (i = 0; i < agentGroupProps.length; i += 1) {
                prop = agentGroupProps[i];
                if (cfg.hasOwnProperty(prop) && cfg[prop] !== null) {
                    val = cfg[prop];

                    if (typeof val.objectType === "undefined" || val.objectType === "Person") {
                        val.objectType = "Agent";
                    }

                    if (val.objectType === "Agent" && !(val instanceof TinCan.Agent)) {
                        val = new TinCan.Agent(val);
                    } else if (val.objectType === "Group" && !(val instanceof TinCan.Group)) {
                        val = new TinCan.Group(val);
                    }

                    this[prop] = val;
                }
            }

            if (cfg.hasOwnProperty("contextActivities") && cfg.contextActivities !== null) {
                if (cfg.contextActivities instanceof TinCan.ContextActivities) {
                    this.contextActivities = cfg.contextActivities;
                } else {
                    this.contextActivities = new TinCan.ContextActivities(cfg.contextActivities);
                }
            }

            if (cfg.hasOwnProperty("statement") && cfg.statement !== null) {
                if (cfg.statement instanceof TinCan.StatementRef) {
                    this.statement = cfg.statement;
                } else if (cfg.statement instanceof TinCan.SubStatement) {
                    this.statement = cfg.statement;
                } else if (cfg.statement.objectType === "StatementRef") {
                    this.statement = new TinCan.StatementRef(cfg.statement);
                } else if (cfg.statement.objectType === "SubStatement") {
                    this.statement = new TinCan.SubStatement(cfg.statement);
                } else {
                    this.log("Unable to parse statement.context.statement property.");
                }
            }
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result = {},
                optionalDirectProps = ["registration", "revision", "platform", "language", "extensions"],
                optionalObjProps = ["instructor", "team", "contextActivities", "statement"],
                i;

            version = version || TinCan.versions()[0];

            if (this.statement instanceof TinCan.SubStatement && version !== "0.9" && version !== "0.95") {
                this.log("[error] version does not support SubStatements in the 'statement' property: " + version);
                throw new Error(version + " does not support SubStatements in the 'statement' property");
            }

            for (i = 0; i < optionalDirectProps.length; i += 1) {
                if (this[optionalDirectProps[i]] !== null) {
                    result[optionalDirectProps[i]] = this[optionalDirectProps[i]];
                }
            }
            for (i = 0; i < optionalObjProps.length; i += 1) {
                if (this[optionalObjProps[i]] !== null) {
                    result[optionalObjProps[i]] = this[optionalObjProps[i]].asVersion(version);
                }
            }

            return result;
        }
    };

    /**
    @method fromJSON
    @return {Object} Context
    @static
    */
    Context.fromJSON = function (contextJSON) {
        Context.prototype.log("fromJSON");
        var _context = JSON.parse(contextJSON);

        return new Context(_context);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.StatementRef
**/
(function () {
    "use strict";

    /**
    @class TinCan.StatementRef
    @constructor
    @param {Object} [cfg] Configuration used to initialize.
        @param {Object} [cfg.id] ID of statement to reference
    **/

    var StatementRef = TinCan.StatementRef = function (cfg) {
        this.log("constructor");

        /**
        @property id
        @type String
        */
        this.id = null;

        this.init(cfg);
    };

    StatementRef.prototype = {
        /**
        @property objectType
        @type String
        @default Agent
        */
        objectType: "StatementRef",

        /**
        @property LOG_SRC
        */
        LOG_SRC: "StatementRef",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize (see constructor)
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["id"];

            cfg = cfg || {};

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }
        },

        /**
        @method toString
        @return {String} String representation of the statement
        */
        toString: function () {
            this.log("toString");
            return this.id;
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result = {
                objectType: this.objectType,
                id: this.id
            };

            if (version === "0.9") {
                result.objectType = "Statement";
            }

            return result;
        }
    };

    /**
    @method fromJSON
    @return {Object} StatementRef
    @static
    */
    StatementRef.fromJSON = function (stRefJSON) {
        StatementRef.prototype.log("fromJSON");
        var _stRef = JSON.parse(stRefJSON);

        return new StatementRef(_stRef);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.SubStatement
**/
(function () {
    "use strict";

    /**
    @class TinCan.SubStatement
    @constructor
    @param {Object} [cfg] Configuration used to initialize.
        @param {TinCan.Agent} [cfg.actor] Actor of statement
        @param {TinCan.Verb} [cfg.verb] Verb of statement
        @param {TinCan.Activity|TinCan.Agent} [cfg.object] Alias for 'target'
        @param {TinCan.Activity|TinCan.Agent} [cfg.target] Object of statement
        @param {TinCan.Result} [cfg.result] Statement Result
        @param {TinCan.Context} [cfg.context] Statement Context
    **/

    var SubStatement = TinCan.SubStatement = function (cfg) {
        this.log("constructor");

        /**
        @property actor
        @type Object
        */
        this.actor = null;

        /**
        @property verb
        @type Object
        */
        this.verb = null;

        /**
        @property target
        @type Object
        */
        this.target = null;

        /**
        @property result
        @type Object
        */
        this.result = null;

        /**
        @property context
        @type Object
        */
        this.context = null;

        /**
        @property timestamp
        @type Date
        */
        this.timestamp = null;

        this.init(cfg);
    };

    SubStatement.prototype = {
        /**
        @property objectType
        @type String
        @default Agent
        */
        objectType: "SubStatement",

        /**
        @property LOG_SRC
        */
        LOG_SRC: "SubStatement",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize (see constructor)
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["timestamp"];

            cfg = cfg || {};

            if (cfg.hasOwnProperty("object")) {
                cfg.target = cfg.object;
            }

            if (cfg.hasOwnProperty("actor")) {
                if (typeof cfg.actor.objectType === "undefined" || cfg.actor.objectType === "Person") {
                    cfg.actor.objectType = "Agent";
                }

                if (cfg.actor.objectType === "Agent") {
                    if (cfg.actor instanceof TinCan.Agent) {
                        this.actor = cfg.actor;
                    } else {
                        this.actor = new TinCan.Agent(cfg.actor);
                    }
                } else if (cfg.actor.objectType === "Group") {
                    if (cfg.actor instanceof TinCan.Group) {
                        this.actor = cfg.actor;
                    } else {
                        this.actor = new TinCan.Group(cfg.actor);
                    }
                }
            }
            if (cfg.hasOwnProperty("verb")) {
                if (cfg.verb instanceof TinCan.Verb) {
                    this.verb = cfg.verb;
                } else {
                    this.verb = new TinCan.Verb(cfg.verb);
                }
            }
            if (cfg.hasOwnProperty("target")) {
                if (cfg.target instanceof TinCan.Activity || cfg.target instanceof TinCan.Agent || cfg.target instanceof TinCan.Group || cfg.target instanceof TinCan.SubStatement || cfg.target instanceof TinCan.StatementRef) {
                    this.target = cfg.target;
                } else {
                    if (typeof cfg.target.objectType === "undefined") {
                        cfg.target.objectType = "Activity";
                    }

                    if (cfg.target.objectType === "Activity") {
                        this.target = new TinCan.Activity(cfg.target);
                    } else if (cfg.target.objectType === "Agent") {
                        this.target = new TinCan.Agent(cfg.target);
                    } else if (cfg.target.objectType === "Group") {
                        this.target = new TinCan.Group(cfg.target);
                    } else if (cfg.target.objectType === "SubStatement") {
                        this.target = new TinCan.SubStatement(cfg.target);
                    } else if (cfg.target.objectType === "StatementRef") {
                        this.target = new TinCan.StatementRef(cfg.target);
                    } else {
                        this.log("Unrecognized target type: " + cfg.target.objectType);
                    }
                }
            }
            if (cfg.hasOwnProperty("result")) {
                if (cfg.result instanceof TinCan.Result) {
                    this.result = cfg.result;
                } else {
                    this.result = new TinCan.Result(cfg.result);
                }
            }
            if (cfg.hasOwnProperty("context")) {
                if (cfg.context instanceof TinCan.Context) {
                    this.context = cfg.context;
                } else {
                    this.context = new TinCan.Context(cfg.context);
                }
            }

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }
        },

        /**
        @method toString
        @return {String} String representation of the statement
        */
        toString: function (lang) {
            this.log("toString");
            return (this.actor !== null ? this.actor.toString(lang) : "") + " " + (this.verb !== null ? this.verb.toString(lang) : "") + " " + (this.target !== null ? this.target.toString(lang) : "");
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result,
                optionalDirectProps = ["timestamp"],
                optionalObjProps = ["actor", "verb", "result", "context"],
                i;

            result = {
                objectType: this.objectType
            };
            version = version || TinCan.versions()[0];

            for (i = 0; i < optionalDirectProps.length; i += 1) {
                if (this[optionalDirectProps[i]] !== null) {
                    result[optionalDirectProps[i]] = this[optionalDirectProps[i]];
                }
            }
            for (i = 0; i < optionalObjProps.length; i += 1) {
                if (this[optionalObjProps[i]] !== null) {
                    result[optionalObjProps[i]] = this[optionalObjProps[i]].asVersion(version);
                }
            }
            if (this.target !== null) {
                result.object = this.target.asVersion(version);
            }

            if (version === "0.9") {
                result.objectType = "Statement";
            }

            return result;
        }
    };

    /**
    @method fromJSON
    @return {Object} SubStatement
    @static
    */
    SubStatement.fromJSON = function (subStJSON) {
        SubStatement.prototype.log("fromJSON");
        var _subSt = JSON.parse(subStJSON);

        return new SubStatement(_subSt);
    };
})();

/*
    Copyright 2012-3 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Statement
**/
(function () {
    "use strict";

    /**
    @class TinCan.Statement
    @constructor
    @param {Object} [cfg] Values to set in properties
        @param {String} [cfg.id] Statement ID (UUID)
        @param {TinCan.Agent} [cfg.actor] Actor of statement
        @param {TinCan.Verb} [cfg.verb] Verb of statement
        @param {TinCan.Activity|TinCan.Agent|TinCan.Group|TinCan.StatementRef|TinCan.SubStatement} [cfg.object] Alias for 'target'
        @param {TinCan.Activity|TinCan.Agent|TinCan.Group|TinCan.StatementRef|TinCan.SubStatement} [cfg.target] Object of statement
        @param {TinCan.Result} [cfg.result] Statement Result
        @param {TinCan.Context} [cfg.context] Statement Context
        @param {TinCan.Agent} [cfg.authority] Statement Authority
        @param {TinCan.Attachment} [cfg.attachments] Statement Attachments
        @param {String} [cfg.timestamp] ISO8601 Date/time value
        @param {String} [cfg.stored] ISO8601 Date/time value
        @param {String} [cfg.version] Version of the statement (post 0.95)
    @param {Object} [initCfg] Configuration of initialization process
        @param {Integer} [initCfg.storeOriginal] Whether to store a JSON stringified version
            of the original options object, pass number of spaces used for indent
        @param {Boolean} [initCfg.doStamp] Whether to automatically set the 'id' and 'timestamp'
            properties (default: true)
    **/

    var Statement = TinCan.Statement = function (cfg, initCfg) {
        this.log("constructor");

        // check for true value for API backwards compat
        if (typeof initCfg === "number") {
            initCfg = {
                storeOriginal: initCfg
            };
        } else {
            initCfg = initCfg || {};
        }
        if (typeof initCfg.storeOriginal === "undefined") {
            initCfg.storeOriginal = null;
        }
        if (typeof initCfg.doStamp === "undefined") {
            initCfg.doStamp = true;
        }

        /**
        @property id
        @type String
        */
        this.id = null;

        /**
        @property actor
        @type TinCan.Agent|TinCan.Group|null
        */
        this.actor = null;

        /**
        @property verb
        @type TinCan.Verb|null
        */
        this.verb = null;

        /**
        @property target
        @type TinCan.Activity|TinCan.Agent|TinCan.Group|TinCan.StatementRef|TinCan.SubStatement|null
        */
        this.target = null;

        /**
        @property result
        @type Object
        */
        this.result = null;

        /**
        @property context
        @type Object
        */
        this.context = null;

        /**
        @property timestamp
        @type String
        */
        this.timestamp = null;

        /**
        @property stored
        @type String
        */
        this.stored = null;

        /**
        @property authority
        @type TinCan.Agent|null
        */
        this.authority = null;

        /**
        @property attachments
        @type Array of TinCan.Attachment
        */
        this.attachments = null;

        /**
        @property version
        @type String
        */
        this.version = null;

        /**
        @property degraded
        @type Boolean
        @default false
        */
        this.degraded = false;

        /**
        @property voided
        @type Boolean
        @default null
        @deprecated
        */
        this.voided = null;

        /**
        @property inProgress
        @type Boolean
        @deprecated
        */
        this.inProgress = null;

        /**
        @property originalJSON
        @type String
        */
        this.originalJSON = null;

        this.init(cfg, initCfg);
    };

    Statement.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "Statement",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [properties] Configuration used to set properties (see constructor)
        @param {Object} [cfg] Configuration used to initialize (see constructor)
        */
        init: function (cfg, initCfg) {
            this.log("init");
            var i,
                directProps = ["id", "stored", "timestamp", "version", "inProgress", "voided"];

            cfg = cfg || {};

            if (initCfg.storeOriginal) {
                this.originalJSON = JSON.stringify(cfg, null, initCfg.storeOriginal);
            }

            if (cfg.hasOwnProperty("object")) {
                cfg.target = cfg.object;
            }

            if (cfg.hasOwnProperty("actor")) {
                if (typeof cfg.actor.objectType === "undefined" || cfg.actor.objectType === "Person") {
                    cfg.actor.objectType = "Agent";
                }

                if (cfg.actor.objectType === "Agent") {
                    if (cfg.actor instanceof TinCan.Agent) {
                        this.actor = cfg.actor;
                    } else {
                        this.actor = new TinCan.Agent(cfg.actor);
                    }
                } else if (cfg.actor.objectType === "Group") {
                    if (cfg.actor instanceof TinCan.Group) {
                        this.actor = cfg.actor;
                    } else {
                        this.actor = new TinCan.Group(cfg.actor);
                    }
                }
            }
            if (cfg.hasOwnProperty("authority")) {
                if (typeof cfg.authority.objectType === "undefined" || cfg.authority.objectType === "Person") {
                    cfg.authority.objectType = "Agent";
                }

                if (cfg.authority.objectType === "Agent") {
                    if (cfg.authority instanceof TinCan.Agent) {
                        this.authority = cfg.authority;
                    } else {
                        this.authority = new TinCan.Agent(cfg.authority);
                    }
                } else if (cfg.authority.objectType === "Group") {
                    if (cfg.actor instanceof TinCan.Group) {
                        this.authority = cfg.authority;
                    } else {
                        this.authority = new TinCan.Group(cfg.authority);
                    }
                }
            }
            if (cfg.hasOwnProperty("verb")) {
                if (cfg.verb instanceof TinCan.Verb) {
                    this.verb = cfg.verb;
                } else {
                    this.verb = new TinCan.Verb(cfg.verb);
                }
            }
            if (cfg.hasOwnProperty("target")) {
                if (cfg.target instanceof TinCan.Activity || cfg.target instanceof TinCan.Agent || cfg.target instanceof TinCan.Group || cfg.target instanceof TinCan.SubStatement || cfg.target instanceof TinCan.StatementRef) {
                    this.target = cfg.target;
                } else {
                    if (typeof cfg.target.objectType === "undefined") {
                        cfg.target.objectType = "Activity";
                    }

                    if (cfg.target.objectType === "Activity") {
                        this.target = new TinCan.Activity(cfg.target);
                    } else if (cfg.target.objectType === "Agent") {
                        this.target = new TinCan.Agent(cfg.target);
                    } else if (cfg.target.objectType === "Group") {
                        this.target = new TinCan.Group(cfg.target);
                    } else if (cfg.target.objectType === "SubStatement") {
                        this.target = new TinCan.SubStatement(cfg.target);
                    } else if (cfg.target.objectType === "StatementRef") {
                        this.target = new TinCan.StatementRef(cfg.target);
                    } else {
                        this.log("Unrecognized target type: " + cfg.target.objectType);
                    }
                }
            }
            if (cfg.hasOwnProperty("result")) {
                if (cfg.result instanceof TinCan.Result) {
                    this.result = cfg.result;
                } else {
                    this.result = new TinCan.Result(cfg.result);
                }
            }
            if (cfg.hasOwnProperty("context")) {
                if (cfg.context instanceof TinCan.Context) {
                    this.context = cfg.context;
                } else {
                    this.context = new TinCan.Context(cfg.context);
                }
            }
            if (cfg.hasOwnProperty("attachments") && cfg.attachments !== null) {
                this.attachments = [];
                for (i = 0; i < cfg.attachments.length; i += 1) {
                    if (!(cfg.attachments[i] instanceof TinCan.Attachment)) {
                        this.attachments.push(new TinCan.Attachment(cfg.attachments[i]));
                    } else {
                        this.attachments.push(cfg.attachments[i]);
                    }
                }
            }

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }

            if (initCfg.doStamp) {
                this.stamp();
            }
        },

        /**
        @method toString
        @return {String} String representation of the statement
        */
        toString: function (lang) {
            this.log("toString");
            return (this.actor !== null ? this.actor.toString(lang) : "") + " " + (this.verb !== null ? this.verb.toString(lang) : "") + " " + (this.target !== null ? this.target.toString(lang) : "");
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result = {},
                optionalDirectProps = ["id", "timestamp"],
                optionalObjProps = ["actor", "verb", "result", "context", "authority"],
                i;

            version = version || TinCan.versions()[0];

            for (i = 0; i < optionalDirectProps.length; i += 1) {
                if (this[optionalDirectProps[i]] !== null) {
                    result[optionalDirectProps[i]] = this[optionalDirectProps[i]];
                }
            }
            for (i = 0; i < optionalObjProps.length; i += 1) {
                if (this[optionalObjProps[i]] !== null) {
                    result[optionalObjProps[i]] = this[optionalObjProps[i]].asVersion(version);
                }
            }
            if (this.target !== null) {
                result.object = this.target.asVersion(version);
            }

            if (version === "0.9" || version === "0.95") {
                if (this.voided !== null) {
                    result.voided = this.voided;
                }
            }
            if (version === "0.9" && this.inProgress !== null) {
                result.inProgress = this.inProgress;
            }
            if (this.attachments !== null) {
                if (!(version === "0.9" || version === "0.95")) {
                    result.attachments = [];
                    for (i = 0; i < this.attachments.length; i += 1) {
                        if (this.attachments[i] instanceof TinCan.Attachment) {
                            result.attachments.push(this.attachments[i].asVersion(version));
                        } else {
                            result.attachments.push(new TinCan.Attachment(this.attachments[i]).asVersion(version));
                        }
                    }
                }
            }

            return result;
        },

        /**
        Sets 'id' and 'timestamp' properties if not already set
         @method stamp
        */
        stamp: function () {
            this.log("stamp");
            if (this.id === null) {
                this.id = TinCan.Utils.getUUID();
            }
            if (this.timestamp === null) {
                this.timestamp = TinCan.Utils.getISODateString(new Date());
            }
        },

        /**
        Checks if the Statement has at least one attachment with content
         @method hasAttachmentsWithContent
        */
        hasAttachmentWithContent: function () {
            this.log("hasAttachmentWithContent");
            var i;

            if (this.attachments === null) {
                return false;
            }

            for (i = 0; i < this.attachments.length; i += 1) {
                if (this.attachments[i].content !== null) {
                    return true;
                }
            }

            return false;
        }
    };

    /**
    @method fromJSON
    @return {Object} Statement
    @static
    */
    Statement.fromJSON = function (stJSON) {
        Statement.prototype.log("fromJSON");
        var _st = JSON.parse(stJSON);

        return new Statement(_st);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.StatementsResult
**/
(function () {
    "use strict";

    /**
    @class TinCan.StatementsResult
    @constructor
    @param {Object} options Configuration used to initialize.
        @param {Array} options.statements Actor of statement
        @param {String} options.more URL to fetch more data
    **/

    var StatementsResult = TinCan.StatementsResult = function (cfg) {
        this.log("constructor");

        /**
        @property statements
        @type Array
        */
        this.statements = null;

        /**
        @property more
        @type String
        */
        this.more = null;

        this.init(cfg);
    };

    StatementsResult.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "StatementsResult",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");

            cfg = cfg || {};

            if (cfg.hasOwnProperty("statements")) {
                this.statements = cfg.statements;
            }
            if (cfg.hasOwnProperty("more")) {
                this.more = cfg.more;
            }
        }
    };

    /**
    @method fromJSON
    @return {Object} Agent
    @static
    */
    StatementsResult.fromJSON = function (resultJSON) {
        StatementsResult.prototype.log("fromJSON");
        var _result,
            stmts = [],
            stmt,
            i;

        try {
            _result = JSON.parse(resultJSON);
        } catch (parseError) {
            StatementsResult.prototype.log("fromJSON - JSON.parse error: " + parseError);
        }

        if (_result) {
            for (i = 0; i < _result.statements.length; i += 1) {
                try {
                    stmt = new TinCan.Statement(_result.statements[i], 4);
                } catch (error) {
                    StatementsResult.prototype.log("fromJSON - statement instantiation failed: " + error + " (" + JSON.stringify(_result.statements[i]) + ")");

                    stmt = new TinCan.Statement({
                        id: _result.statements[i].id
                    }, 4);
                }

                stmts.push(stmt);
            }
            _result.statements = stmts;
        }

        return new StatementsResult(_result);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.State
**/
(function () {
    "use strict";

    /**
    @class TinCan.State
    @constructor
    */

    var State = TinCan.State = function (cfg) {
        this.log("constructor");

        /**
        @property id
        @type String
        */
        this.id = null;

        /**
        @property updated
        @type Boolean
        */
        this.updated = null;

        /**
        @property contents
        @type String
        */
        this.contents = null;

        /**
        @property etag
        @type String
        */
        this.etag = null;

        /**
        @property contentType
        @type String
        */
        this.contentType = null;

        this.init(cfg);
    };
    State.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "State",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["id", "contents", "etag", "contentType"];

            cfg = cfg || {};

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }

            this.updated = false;
        }
    };

    /**
    @method fromJSON
    @return {Object} State
    @static
    */
    State.fromJSON = function (stateJSON) {
        State.prototype.log("fromJSON");
        var _state = JSON.parse(stateJSON);

        return new State(_state);
    };
})();

/*
    Copyright 2012 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.ActivityProfile
**/
(function () {
    "use strict";

    /**
    @class TinCan.ActivityProfile
    @constructor
    */

    var ActivityProfile = TinCan.ActivityProfile = function (cfg) {
        this.log("constructor");

        /**
        @property id
        @type String
        */
        this.id = null;

        /**
        @property activity
        @type TinCan.Activity
        */
        this.activity = null;

        /**
        @property updated
        @type String
        */
        this.updated = null;

        /**
        @property contents
        @type String
        */
        this.contents = null;

        /**
        SHA1 of contents as provided by the server during last fetch,
        this should be passed through to saveActivityProfile
         @property etag
        @type String
        */
        this.etag = null;

        /**
        @property contentType
        @type String
        */
        this.contentType = null;

        this.init(cfg);
    };
    ActivityProfile.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "ActivityProfile",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["id", "contents", "etag", "contentType"];

            cfg = cfg || {};

            if (cfg.hasOwnProperty("activity")) {
                if (cfg.activity instanceof TinCan.Activity) {
                    this.activity = cfg.activity;
                } else {
                    this.activity = new TinCan.Activity(cfg.activity);
                }
            }

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }

            this.updated = false;
        }
    };

    /**
    @method fromJSON
    @return {Object} ActivityProfile
    @static
    */
    ActivityProfile.fromJSON = function (stateJSON) {
        ActivityProfile.prototype.log("fromJSON");
        var _state = JSON.parse(stateJSON);

        return new ActivityProfile(_state);
    };
})();

/*
    Copyright 2013 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.AgentProfile
**/
(function () {
    "use strict";

    /**
    @class TinCan.AgentProfile
    @constructor
    */

    var AgentProfile = TinCan.AgentProfile = function (cfg) {
        this.log("constructor");

        /**
        @property id
        @type String
        */
        this.id = null;

        /**
        @property agent
        @type TinCan.Agent
        */
        this.agent = null;

        /**
        @property updated
        @type String
        */
        this.updated = null;

        /**
        @property contents
        @type String
        */
        this.contents = null;

        /**
        SHA1 of contents as provided by the server during last fetch,
        this should be passed through to saveAgentProfile
         @property etag
        @type String
        */
        this.etag = null;

        /**
        @property contentType
        @type String
        */
        this.contentType = null;

        this.init(cfg);
    };
    AgentProfile.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "AgentProfile",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["id", "contents", "etag", "contentType"];

            cfg = cfg || {};

            if (cfg.hasOwnProperty("agent")) {
                if (cfg.agent instanceof TinCan.Agent) {
                    this.agent = cfg.agent;
                } else {
                    this.agent = new TinCan.Agent(cfg.agent);
                }
            }

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }

            this.updated = false;
        }
    };

    /**
    @method fromJSON
    @return {Object} AgentProfile
    @static
    */
    AgentProfile.fromJSON = function (stateJSON) {
        AgentProfile.prototype.log("fromJSON");
        var _state = JSON.parse(stateJSON);

        return new AgentProfile(_state);
    };
})();

/*
    Copyright 2014 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.About
**/
(function () {
    "use strict";

    /**
    @class TinCan.About
    @constructor
    */

    var About = TinCan.About = function (cfg) {
        this.log("constructor");

        /**
        @property version
        @type {String[]}
        */
        this.version = null;

        this.init(cfg);
    };
    About.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "About",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["version"];

            cfg = cfg || {};

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }
        }
    };

    /**
    @method fromJSON
    @return {Object} About
    @static
    */
    About.fromJSON = function (aboutJSON) {
        About.prototype.log("fromJSON");
        var _about = JSON.parse(aboutJSON);

        return new About(_about);
    };
})();

/*
    Copyright 2016 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Attachment
**/
(function () {
    "use strict";

    /**
    @class TinCan.Attachment
    @constructor
    */

    var Attachment = TinCan.Attachment = function (cfg) {
        this.log("constructor");

        /**
        @property usageType
        @type String
        */
        this.usageType = null;

        /**
        @property display
        @type Object
        */
        this.display = null;

        /**
        @property contentType
        @type String
        */
        this.contentType = null;

        /**
        @property length
        @type int
        */
        this.length = null;

        /**
        @property sha2
        @type String
        */
        this.sha2 = null;

        /**
        @property description
        @type Object
        */
        this.description = null;

        /**
        @property fileUrl
        @type String
        */
        this.fileUrl = null;

        /**
        @property content
        @type ArrayBuffer
        */
        this.content = null;

        this.init(cfg);
    };
    Attachment.prototype = {
        /**
        @property LOG_SRC
        */
        LOG_SRC: "Attachment",

        /**
        @method log
        */
        log: TinCan.prototype.log,

        /**
        @method init
        @param {Object} [options] Configuration used to initialize
        */
        init: function (cfg) {
            this.log("init");
            var i,
                directProps = ["contentType", "length", "sha2", "usageType", "display", "description", "fileUrl"];

            cfg = cfg || {};

            for (i = 0; i < directProps.length; i += 1) {
                if (cfg.hasOwnProperty(directProps[i]) && cfg[directProps[i]] !== null) {
                    this[directProps[i]] = cfg[directProps[i]];
                }
            }

            if (cfg.hasOwnProperty("content") && cfg.content !== null) {
                if (typeof cfg.content === "string") {
                    this.setContentFromString(cfg.content);
                } else {
                    this.setContent(cfg.content);
                }
            }
        },

        /**
        @method asVersion
        @param {String} [version] Version to return (defaults to newest supported)
        */
        asVersion: function (version) {
            this.log("asVersion");
            var result;

            version = version || TinCan.versions()[0];

            if (version === "0.9" || version === "0.95") {
                result = null;
            } else {
                result = {
                    contentType: this.contentType,
                    display: this.display,
                    length: this.length,
                    sha2: this.sha2,
                    usageType: this.usageType
                };

                if (this.fileUrl !== null) {
                    result.fileUrl = this.fileUrl;
                }
                if (this.description !== null) {
                    result.description = this.description;
                }
            }

            return result;
        },

        /**
        See {{#crossLink "TinCan.Utils/getLangDictionaryValue"}}{{/crossLink}}
         @method getLangDictionaryValue
        */
        getLangDictionaryValue: TinCan.Utils.getLangDictionaryValue,

        /**
        @method setContent
        @param {ArrayBuffer} content Sets content from ArrayBuffer
        */
        setContent: function (content) {
            this.content = content;
            this.length = content.byteLength;
            this.sha2 = TinCan.Utils.getSHA256String(content);
        },

        /**
        @method setContentFromString
        @param {String} content Sets the content property of the attachment from a string
        */
        setContentFromString: function (content) {
            var _content = content;

            _content = TinCan.Utils.stringToArrayBuffer(content);

            this.setContent(_content);
        },

        /**
        @method getContentAsString
        @return {String} Value of content property as a string
        */
        getContentAsString: function () {
            return TinCan.Utils.stringFromArrayBuffer(this.content);
        }
    };

    /**
    @method fromJSON
    @return {Object} Attachment
    @static
    */
    Attachment.fromJSON = function (attachmentJSON) {
        Attachment.prototype.log("fromJSON");
        var _attachment = JSON.parse(attachmentJSON);

        return new Attachment(_attachment);
    };

    Attachment._defaultEncoding = "utf-8";
})();

/*
    Copyright 2012-2013 Rustici Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
TinCan client library

@module TinCan
@submodule TinCan.Environment.Node
**/
(function () {
    /* globals require,Buffer,ArrayBuffer,Uint8Array */
    "use strict";

    var LOG_SRC = "Environment.Node",
        log = TinCan.prototype.log,
        querystring = __webpack_require__(53),
        XMLHttpRequest = __webpack_require__(370),
        requestComplete,
        __createJSONSegment,
        __createAttachmentSegment;

    requestComplete = function (xhr, cfg) {
        log("requestComplete - xhr.status: " + xhr.status, LOG_SRC);
        log("requestComplete - xhr.responseText: " + xhr.responseText, LOG_SRC);
        var requestCompleteResult,
            httpStatus = xhr.status,
            notFoundOk = cfg.ignore404 && httpStatus === 404;

        if (httpStatus >= 200 && httpStatus < 400 || notFoundOk) {
            if (cfg.callback) {
                cfg.callback(null, xhr);
                return;
            }

            requestCompleteResult = {
                err: null,
                xhr: xhr
            };
            return requestCompleteResult;
        }

        requestCompleteResult = {
            err: httpStatus,
            xhr: xhr
        };
        if (httpStatus === 0) {
            log("[warning] There was a problem communicating with the Learning Record Store. Aborted, offline, or invalid CORS endpoint (" + httpStatus + ")", LOG_SRC);
        } else {
            log("[warning] There was a problem communicating with the Learning Record Store. (" + httpStatus + " | " + xhr.responseText + ")", LOG_SRC);
        }
        if (cfg.callback) {
            cfg.callback(httpStatus, xhr);
        }
        return requestCompleteResult;
    };

    //
    // Override LRS' init method to set up our request handling
    // capabilities, basically empty implementation here so that
    // we don't get a no-env loaded message
    //
    TinCan.LRS.prototype._initByEnvironment = function () {};

    //
    // use XMLHttpRequest module instead of standard Node.js http/https
    // modules since we have to support both, and because the callbacks
    // provided via the methods calling _makeRequest expect the xhr to
    // have a certain interface, that interface happens to be the browser
    // version of XHR since that's where it started, so rather than
    // changing them to use a different wrapped request/response object
    // set just use a wrapped version of the node objects which is what
    // XMLHttpRequest module provides
    //
    TinCan.LRS.prototype._makeRequest = function (fullUrl, headers, cfg) {
        log("_makeRequest using http/https", LOG_SRC);
        var xhr,
            url = fullUrl,
            async = typeof cfg.callback !== "undefined",
            prop;
        if (typeof cfg.params !== "undefined" && Object.keys(cfg.params).length > 0) {
            url += "?" + querystring.stringify(cfg.params);
        }

        xhr = new XMLHttpRequest();
        xhr.open(cfg.method, url, async);

        if (cfg.expectMultipart) {
            xhr.responseType = "arraybuffer";
        }

        for (prop in headers) {
            if (headers.hasOwnProperty(prop)) {
                xhr.setRequestHeader(prop, headers[prop]);
            }
        }

        if (typeof cfg.data !== "undefined") {
            cfg.data += "";
        }

        if (async) {
            xhr.onreadystatechange = function () {
                log("xhr.onreadystatechange - xhr.readyState: " + xhr.readyState, LOG_SRC);
                if (xhr.readyState === 4) {
                    requestComplete(xhr, cfg);
                }
            };
        }

        xhr.send(cfg.data);

        if (async) {
            return xhr;
        }

        return requestComplete(xhr, cfg);
    };

    //
    // Synchronos xhr handling is unsupported in node
    //
    TinCan.LRS.syncEnabled = false;

    TinCan.LRS.prototype._getMultipartRequestData = function (boundary, jsonContent, requestAttachments) {
        var parts = [],
            i;

        parts.push(__createJSONSegment(boundary, jsonContent));
        for (i = 0; i < requestAttachments.length; i += 1) {
            if (requestAttachments[i].content !== null) {
                parts.push(__createAttachmentSegment(boundary, requestAttachments[i].content, requestAttachments[i].sha2, requestAttachments[i].contentType));
            }
        }
        if (typeof Buffer.from === "undefined") {
            parts.push(new Buffer("\r\n--" + boundary + "--\r\n"));
        } else {
            parts.push(Buffer.from("\r\n--" + boundary + "--\r\n"));
        }

        return Buffer.concat(parts);
    };

    __createJSONSegment = function (boundary, jsonContent) {
        var content = ["--" + boundary, "Content-Type: application/json", "", JSON.stringify(jsonContent)].join("\r\n");

        content += "\r\n";

        if (typeof Buffer.from === "undefined") {
            return new Buffer(content);
        }
        return Buffer.from(content);
    };

    __createAttachmentSegment = function (boundary, content, sha2, contentType) {
        var bufferParts = [],
            header = ["--" + boundary, "Content-Type: " + contentType, "Content-Transfer-Encoding: binary", "X-Experience-API-Hash: " + sha2].join("\r\n");

        header += "\r\n\r\n";

        if (typeof Buffer.from === "undefined") {
            bufferParts.push(new Buffer(header));
            bufferParts.push(new Buffer(content));
        } else {
            bufferParts.push(Buffer.from(header));
            bufferParts.push(Buffer.from(content));
        }

        return Buffer.concat(bufferParts);
    };

    TinCan.Utils.stringToArrayBuffer = function (content, encoding) {
        var b, ab, view, i;

        if (!encoding) {
            encoding = TinCan.Utils.defaultEncoding;
        }

        if (typeof Buffer.from === "undefined") {
            // for Node.js prior to v4.x
            b = new Buffer(content, encoding);

            ab = new ArrayBuffer(b.length);
            view = new Uint8Array(ab);
            for (i = 0; i < b.length; i += 1) {
                view[i] = b[i];
            }

            return ab;
        }

        b = Buffer.from(content, encoding);
        ab = b.buffer;

        //
        // this .slice is required because of the internals of how Buffer is
        // implemented, it uses a shared ArrayBuffer underneath for small buffers
        // see http://stackoverflow.com/a/31394257/1464957
        //
        return ab.slice(b.byteOffset, b.byteOffset + b.byteLength);
    };

    TinCan.Utils.stringFromArrayBuffer = function (content, encoding) {
        var b, view, i;

        if (!encoding) {
            encoding = TinCan.Utils.defaultEncoding;
        }

        if (typeof Buffer.from === "undefined") {
            // for Node.js prior to v4.x
            b = new Buffer(content.byteLength);

            view = new Uint8Array(content);
            for (i = 0; i < b.length; i += 1) {
                b[i] = view[i];
            }
        } else {
            b = Buffer.from(content);
        }

        return b.toString(encoding);
    };
})();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9).Buffer))

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(9).Buffer;

module.exports = function (buf) {
	// If the buffer is backed by a Uint8Array, a faster version will work
	if (buf instanceof Uint8Array) {
		// If the buffer isn't a subarray, return the underlying ArrayBuffer
		if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
			return buf.buffer;
		} else if (typeof buf.buffer.slice === 'function') {
			// Otherwise we need to get a proper copy
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		}
	}

	if (Buffer.isBuffer(buf)) {
		// This is the slow version that will work with any Buffer
		// implementation (even in old browsers)
		var arrayCopy = new Uint8Array(buf.length);
		var len = buf.length;
		for (var i = 0; i < len; i++) {
			arrayCopy[i] = buf[i];
		}
		return arrayCopy.buffer;
	} else {
		throw new Error('Argument must be a Buffer');
	}
};

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function (arg) {
    return typeof arg === 'string';
  },
  isObject: function (arg) {
    return typeof arg === 'object' && arg !== null;
  },
  isNull: function (arg) {
    return arg === null;
  },
  isNullOrUndefined: function (arg) {
    return arg == null;
  }
};

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)))

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function () {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function () {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, Buffer) {

// Generated by CoffeeScript 1.6.3
(function () {
  var InvalidStateError,
      NetworkError,
      SecurityError,
      XMLHttpRequest,
      XMLHttpRequestEventTarget,
      XMLHttpRequestProgressEvent,
      XMLHttpRequestUpload,
      http,
      https,
      os,
      url,
      _ref,
      __hasProp = {}.hasOwnProperty,
      __extends = function (child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key)) child[key] = parent[key];
    }function ctor() {
      this.constructor = child;
    }ctor.prototype = parent.prototype;child.prototype = new ctor();child.__super__ = parent.prototype;return child;
  };

  XMLHttpRequestEventTarget = function () {
    function XMLHttpRequestEventTarget() {
      this.onloadstart = null;
      this.onprogress = null;
      this.onabort = null;
      this.onerror = null;
      this.onload = null;
      this.ontimeout = null;
      this.onloadend = null;
      this._listeners = {};
    }

    XMLHttpRequestEventTarget.prototype.onloadstart = null;

    XMLHttpRequestEventTarget.prototype.onprogress = null;

    XMLHttpRequestEventTarget.prototype.onabort = null;

    XMLHttpRequestEventTarget.prototype.onerror = null;

    XMLHttpRequestEventTarget.prototype.onload = null;

    XMLHttpRequestEventTarget.prototype.ontimeout = null;

    XMLHttpRequestEventTarget.prototype.onloadend = null;

    XMLHttpRequestEventTarget.prototype.addEventListener = function (eventType, listener) {
      var _base;
      eventType = eventType.toLowerCase();
      (_base = this._listeners)[eventType] || (_base[eventType] = []);
      this._listeners[eventType].push(listener);
      return void 0;
    };

    XMLHttpRequestEventTarget.prototype.removeEventListener = function (eventType, listener) {
      var index;
      eventType = eventType.toLowerCase();
      if (this._listeners[eventType]) {
        index = this._listeners[eventType].indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      return void 0;
    };

    XMLHttpRequestEventTarget.prototype.dispatchEvent = function (event) {
      var eventType, listener, listeners, _i, _len;
      eventType = event.type;
      if (listeners = this._listeners[eventType]) {
        for (_i = 0, _len = listeners.length; _i < _len; _i++) {
          listener = listeners[_i];
          listener(event);
        }
      }
      if (listener = this["on" + eventType]) {
        listener(event);
      }
      return void 0;
    };

    return XMLHttpRequestEventTarget;
  }();

  http = __webpack_require__(135);

  https = __webpack_require__(157);

  os = __webpack_require__(160);

  url = __webpack_require__(137);

  XMLHttpRequest = function (_super) {
    __extends(XMLHttpRequest, _super);

    function XMLHttpRequest(options) {
      XMLHttpRequest.__super__.constructor.call(this);
      this.onreadystatechange = null;
      this._anonymous = options && options.anon;
      this.readyState = XMLHttpRequest.UNSENT;
      this.response = null;
      this.responseText = '';
      this.responseType = '';
      this.status = 0;
      this.statusText = '';
      this.timeout = 0;
      this.upload = new XMLHttpRequestUpload(this);
      this._method = null;
      this._url = null;
      this._sync = false;
      this._headers = null;
      this._loweredHeaders = null;
      this._mimeOverride = null;
      this._request = null;
      this._response = null;
      this._responseParts = null;
      this._responseHeaders = null;
      this._aborting = null;
      this._error = null;
      this._loadedBytes = 0;
      this._totalBytes = 0;
      this._lengthComputable = false;
    }

    XMLHttpRequest.prototype.onreadystatechange = null;

    XMLHttpRequest.prototype.readyState = null;

    XMLHttpRequest.prototype.response = null;

    XMLHttpRequest.prototype.responseText = null;

    XMLHttpRequest.prototype.responseType = null;

    XMLHttpRequest.prototype.status = null;

    XMLHttpRequest.prototype.timeout = null;

    XMLHttpRequest.prototype.upload = null;

    XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
      var xhrUrl;
      method = method.toUpperCase();
      if (method in this._restrictedMethods) {
        throw new SecurityError("HTTP method " + method + " is not allowed in XHR");
      }
      xhrUrl = this._parseUrl(url);
      if (async === void 0) {
        async = true;
      }
      switch (this.readyState) {
        case XMLHttpRequest.UNSENT:
        case XMLHttpRequest.OPENED:
        case XMLHttpRequest.DONE:
          null;
          break;
        case XMLHttpRequest.HEADERS_RECEIVED:
        case XMLHttpRequest.LOADING:
          null;
      }
      this._method = method;
      this._url = xhrUrl;
      this._sync = !async;
      this._headers = {};
      this._loweredHeaders = {};
      this._mimeOverride = null;
      this._setReadyState(XMLHttpRequest.OPENED);
      this._request = null;
      this._response = null;
      this.status = 0;
      this.statusText = '';
      this._responseParts = [];
      this._responseHeaders = null;
      this._loadedBytes = 0;
      this._totalBytes = 0;
      this._lengthComputable = false;
      return void 0;
    };

    XMLHttpRequest.prototype.setRequestHeader = function (name, value) {
      var loweredName;
      if (this.readyState !== XMLHttpRequest.OPENED) {
        throw new InvalidStateError("XHR readyState must be OPENED");
      }
      loweredName = name.toLowerCase();
      if (this._restrictedHeaders[loweredName] || /^sec\-/.test(loweredName) || /^proxy-/.test(loweredName)) {
        console.warn("Refused to set unsafe header \"" + name + "\"");
        return void 0;
      }
      value = value.toString();
      if (loweredName in this._loweredHeaders) {
        name = this._loweredHeaders[loweredName];
        this._headers[name] = this._headers[name] + ', ' + value;
      } else {
        this._loweredHeaders[loweredName] = name;
        this._headers[name] = value;
      }
      return void 0;
    };

    XMLHttpRequest.prototype.send = function (data) {
      if (this.readyState !== XMLHttpRequest.OPENED) {
        throw new InvalidStateError("XHR readyState must be OPENED");
      }
      if (this._request) {
        throw new InvalidStateError("send() already called");
      }
      switch (this._url.protocol) {
        case 'file:':
          this._sendFile(data);
          break;
        case 'http:':
        case 'https:':
          this._sendHttp(data);
          break;
        default:
          throw new NetworkError("Unsupported protocol " + this._url.protocol);
      }
      return void 0;
    };

    XMLHttpRequest.prototype.abort = function () {
      if (!this._request) {
        return;
      }
      this._request.abort();
      this._setError();
      this._dispatchProgress('abort');
      this._dispatchProgress('loadend');
      return void 0;
    };

    XMLHttpRequest.prototype.getResponseHeader = function (name) {
      var loweredName;
      if (!this._responseHeaders) {
        return null;
      }
      loweredName = name.toLowerCase();
      if (loweredName in this._responseHeaders) {
        return this._responseHeaders[loweredName];
      } else {
        return null;
      }
    };

    XMLHttpRequest.prototype.getAllResponseHeaders = function () {
      var lines, name, value;
      if (!this._responseHeaders) {
        return '';
      }
      lines = function () {
        var _ref, _results;
        _ref = this._responseHeaders;
        _results = [];
        for (name in _ref) {
          value = _ref[name];
          _results.push("" + name + ": " + value);
        }
        return _results;
      }.call(this);
      return lines.join("\r\n");
    };

    XMLHttpRequest.prototype.overrideMimeType = function (newMimeType) {
      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
        throw new InvalidStateError("overrideMimeType() not allowed in LOADING or DONE");
      }
      this._mimeOverride = newMimeType.toLowerCase();
      return void 0;
    };

    XMLHttpRequest.prototype.nodejsSet = function (options) {
      if ('httpAgent' in options) {
        this.nodejsHttpAgent = options.httpAgent;
      }
      if ('httpsAgent' in options) {
        this.nodejsHttpsAgent = options.httpsAgent;
      }
      return void 0;
    };

    XMLHttpRequest.nodejsSet = function (options) {
      XMLHttpRequest.prototype.nodejsSet(options);
      return void 0;
    };

    XMLHttpRequest.prototype.UNSENT = 0;

    XMLHttpRequest.UNSENT = 0;

    XMLHttpRequest.prototype.OPENED = 1;

    XMLHttpRequest.OPENED = 1;

    XMLHttpRequest.prototype.HEADERS_RECEIVED = 2;

    XMLHttpRequest.HEADERS_RECEIVED = 2;

    XMLHttpRequest.prototype.LOADING = 3;

    XMLHttpRequest.LOADING = 3;

    XMLHttpRequest.prototype.DONE = 4;

    XMLHttpRequest.DONE = 4;

    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;

    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;

    XMLHttpRequest.prototype._restrictedMethods = {
      CONNECT: true,
      TRACE: true,
      TRACK: true
    };

    XMLHttpRequest.prototype._restrictedHeaders = {
      'accept-charset': true,
      'accept-encoding': true,
      'access-control-request-headers': true,
      'access-control-request-method': true,
      connection: true,
      'content-length': true,
      cookie: true,
      cookie2: true,
      date: true,
      dnt: true,
      expect: true,
      host: true,
      'keep-alive': true,
      origin: true,
      referer: true,
      te: true,
      trailer: true,
      'transfer-encoding': true,
      upgrade: true,
      'user-agent': true,
      via: true
    };

    XMLHttpRequest.prototype._privateHeaders = {
      'set-cookie': true,
      'set-cookie2': true
    };

    XMLHttpRequest.prototype._userAgent = "Mozilla/5.0 (" + os.type() + " " + os.arch() + ") " + ("node.js/" + process.versions.node + " v8/" + process.versions.v8);

    XMLHttpRequest.prototype._setReadyState = function (newReadyState) {
      var event;
      this.readyState = newReadyState;
      event = new XMLHttpRequestProgressEvent('readystatechange', this);
      this.dispatchEvent(event);
      return void 0;
    };

    XMLHttpRequest.prototype._sendFile = function () {
      if (this._url.method !== 'GET') {
        throw new NetworkError('The file protocol only supports GET');
      }
      throw new Error("Protocol file: not implemented");
    };

    XMLHttpRequest.prototype._sendHttp = function (data) {
      if (this._sync) {
        throw new Error("Synchronous XHR processing not implemented");
      }
      if (data != null && (this._method === 'GET' || this._method === 'HEAD')) {
        console.warn("Discarding entity body for " + this._method + " requests");
        data = null;
      } else {
        data || (data = '');
      }
      this.upload._setData(data);
      this._finalizeHeaders();
      this._sendHxxpRequest();
      return void 0;
    };

    XMLHttpRequest.prototype._sendHxxpRequest = function () {
      var agent,
          hxxp,
          request,
          _this = this;
      if (this._url.protocol === 'http:') {
        hxxp = http;
        agent = this.nodejsHttpAgent;
      } else {
        hxxp = https;
        agent = this.nodejsHttpsAgent;
      }
      request = hxxp.request({
        hostname: this._url.hostname,
        port: this._url.port,
        path: this._url.path,
        auth: this._url.auth,
        method: this._method,
        headers: this._headers,
        agent: agent
      });
      this._request = request;
      if (this.timeout) {
        request.setTimeout(this.timeout, function () {
          return _this._onHttpTimeout(request);
        });
      }
      request.on('response', function (response) {
        return _this._onHttpResponse(request, response);
      });
      request.on('error', function (error) {
        return _this._onHttpRequestError(request, error);
      });
      this.upload._startUpload(request);
      if (this._request === request) {
        this._dispatchProgress('loadstart');
      }
      return void 0;
    };

    XMLHttpRequest.prototype._finalizeHeaders = function () {
      this._headers['Connection'] = 'keep-alive';
      this._headers['Host'] = this._url.host;
      if (this._anonymous) {
        this._headers['Referer'] = 'about:blank';
      }
      this._headers['User-Agent'] = this._userAgent;
      this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
      return void 0;
    };

    XMLHttpRequest.prototype._onHttpResponse = function (request, response) {
      var lengthString,
          _this = this;
      if (this._request !== request) {
        return;
      }
      switch (response.statusCode) {
        case 301:
        case 302:
        case 303:
        case 307:
        case 308:
          this._url = this._parseUrl(response.headers['location']);
          this._method = 'GET';
          if ('content-type' in this._loweredHeaders) {
            delete this._headers[this._loweredHeaders['content-type']];
            delete this._loweredHeaders['content-type'];
          }
          if ('Content-Type' in this._headers) {
            delete this._headers['Content-Type'];
          }
          delete this._headers['Content-Length'];
          this.upload._reset();
          this._finalizeHeaders();
          this._sendHxxpRequest();
          return;
      }
      this._response = response;
      this._response.on('data', function (data) {
        return _this._onHttpResponseData(response, data);
      });
      this._response.on('end', function () {
        return _this._onHttpResponseEnd(response);
      });
      this._response.on('close', function () {
        return _this._onHttpResponseClose(response);
      });
      this.status = this._response.statusCode;
      this.statusText = http.STATUS_CODES[this.status];
      this._parseResponseHeaders(response);
      if (lengthString = this._responseHeaders['content-length']) {
        this._totalBytes = parseInt(lengthString);
        this._lengthComputable = true;
      } else {
        this._lengthComputable = false;
      }
      return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
    };

    XMLHttpRequest.prototype._onHttpResponseData = function (response, data) {
      if (this._response !== response) {
        return;
      }
      this._responseParts.push(data);
      this._loadedBytes += data.length;
      if (this.readyState !== XMLHttpRequest.LOADING) {
        this._setReadyState(XMLHttpRequest.LOADING);
      }
      return this._dispatchProgress('progress');
    };

    XMLHttpRequest.prototype._onHttpResponseEnd = function (response) {
      if (this._response !== response) {
        return;
      }
      this._parseResponse();
      this._request = null;
      this._response = null;
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('load');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._onHttpResponseClose = function (response) {
      var request;
      if (this._response !== response) {
        return;
      }
      request = this._request;
      this._setError();
      request.abort();
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('error');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._onHttpTimeout = function (request) {
      if (this._request !== request) {
        return;
      }
      this._setError();
      request.abort();
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('timeout');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._onHttpRequestError = function (request, error) {
      if (this._request !== request) {
        return;
      }
      this._setError();
      request.abort();
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('error');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._dispatchProgress = function (eventType) {
      var event;
      event = new XMLHttpRequestProgressEvent(eventType, this);
      event.lengthComputable = this._lengthComputable;
      event.loaded = this._loadedBytes;
      event.total = this._totalBytes;
      this.dispatchEvent(event);
      return void 0;
    };

    XMLHttpRequest.prototype._setError = function () {
      this._request = null;
      this._response = null;
      this._responseHeaders = null;
      this._responseParts = null;
      return void 0;
    };

    XMLHttpRequest.prototype._parseUrl = function (urlString) {
      var index, password, user, xhrUrl;
      xhrUrl = url.parse(urlString, false, true);
      xhrUrl.hash = null;
      if (xhrUrl.auth && (typeof user !== "undefined" && user !== null || typeof password !== "undefined" && password !== null)) {
        index = xhrUrl.auth.indexOf(':');
        if (index === -1) {
          if (!user) {
            user = xhrUrl.auth;
          }
        } else {
          if (!user) {
            user = xhrUrl.substring(0, index);
          }
          if (!password) {
            password = xhrUrl.substring(index + 1);
          }
        }
      }
      if (user || password) {
        xhrUrl.auth = "" + user + ":" + password;
      }
      return xhrUrl;
    };

    XMLHttpRequest.prototype._parseResponseHeaders = function (response) {
      var loweredName, name, value, _ref;
      this._responseHeaders = {};
      _ref = response.headers;
      for (name in _ref) {
        value = _ref[name];
        loweredName = name.toLowerCase();
        if (this._privateHeaders[loweredName]) {
          continue;
        }
        if (this._mimeOverride !== null && loweredName === 'content-type') {
          value = this._mimeOverride;
        }
        this._responseHeaders[loweredName] = value;
      }
      if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {
        this._responseHeaders['content-type'] = this._mimeOverride;
      }
      return void 0;
    };

    XMLHttpRequest.prototype._parseResponse = function () {
      var arrayBuffer, buffer, i, jsonError, view, _i, _ref;
      if (Buffer.concat) {
        buffer = Buffer.concat(this._responseParts);
      } else {
        buffer = this._concatBuffers(this._responseParts);
      }
      this._responseParts = null;
      switch (this.responseType) {
        case 'text':
          this._parseTextResponse(buffer);
          break;
        case 'json':
          this.responseText = null;
          try {
            this.response = JSON.parse(buffer.toString('utf-8'));
          } catch (_error) {
            jsonError = _error;
            this.response = null;
          }
          break;
        case 'buffer':
          this.responseText = null;
          this.response = buffer;
          break;
        case 'arraybuffer':
          this.responseText = null;
          arrayBuffer = new ArrayBuffer(buffer.length);
          view = new Uint8Array(arrayBuffer);
          for (i = _i = 0, _ref = buffer.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            view[i] = buffer[i];
          }
          this.response = arrayBuffer;
          break;
        default:
          this._parseTextResponse(buffer);
      }
      return void 0;
    };

    XMLHttpRequest.prototype._parseTextResponse = function (buffer) {
      var e;
      try {
        this.responseText = buffer.toString(this._parseResponseEncoding());
      } catch (_error) {
        e = _error;
        this.responseText = buffer.toString('binary');
      }
      this.response = this.responseText;
      return void 0;
    };

    XMLHttpRequest.prototype._parseResponseEncoding = function () {
      var contentType, encoding, match;
      encoding = null;
      if (contentType = this._responseHeaders['content-type']) {
        if (match = /\;\s*charset\=(.*)$/.exec(contentType)) {
          return match[1];
        }
      }
      return 'utf-8';
    };

    XMLHttpRequest.prototype._concatBuffers = function (buffers) {
      var buffer, length, target, _i, _j, _len, _len1;
      if (buffers.length === 0) {
        return new Buffer(0);
      }
      if (buffers.length === 1) {
        return buffers[0];
      }
      length = 0;
      for (_i = 0, _len = buffers.length; _i < _len; _i++) {
        buffer = buffers[_i];
        length += buffer.length;
      }
      target = new Buffer(length);
      length = 0;
      for (_j = 0, _len1 = buffers.length; _j < _len1; _j++) {
        buffer = buffers[_j];
        buffer.copy(target, length);
        length += buffer.length;
      }
      return target;
    };

    return XMLHttpRequest;
  }(XMLHttpRequestEventTarget);

  module.exports = XMLHttpRequest;

  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;

  SecurityError = function (_super) {
    __extends(SecurityError, _super);

    function SecurityError() {
      SecurityError.__super__.constructor.apply(this, arguments);
    }

    return SecurityError;
  }(Error);

  XMLHttpRequest.SecurityError = SecurityError;

  InvalidStateError = function (_super) {
    __extends(InvalidStateError, _super);

    function InvalidStateError() {
      InvalidStateError.__super__.constructor.apply(this, arguments);
    }

    return InvalidStateError;
  }(Error);

  InvalidStateError = function (_super) {
    __extends(InvalidStateError, _super);

    function InvalidStateError() {
      _ref = InvalidStateError.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return InvalidStateError;
  }(Error);

  XMLHttpRequest.InvalidStateError = InvalidStateError;

  NetworkError = function (_super) {
    __extends(NetworkError, _super);

    function NetworkError() {
      NetworkError.__super__.constructor.apply(this, arguments);
    }

    return NetworkError;
  }(Error);

  XMLHttpRequest.NetworkError = NetworkError;

  XMLHttpRequestProgressEvent = function () {
    function XMLHttpRequestProgressEvent(type, target) {
      this.type = type;
      this.target = target;
      this.currentTarget = this.target;
      this.lengthComputable = false;
      this.loaded = 0;
      this.total = 0;
    }

    XMLHttpRequestProgressEvent.prototype.bubbles = false;

    XMLHttpRequestProgressEvent.prototype.cancelable = false;

    XMLHttpRequestProgressEvent.prototype.target = null;

    XMLHttpRequestProgressEvent.prototype.loaded = null;

    XMLHttpRequestProgressEvent.prototype.lengthComputable = null;

    XMLHttpRequestProgressEvent.prototype.total = null;

    return XMLHttpRequestProgressEvent;
  }();

  XMLHttpRequest.XMLHttpRequestProgressEvent = XMLHttpRequestProgressEvent;

  XMLHttpRequestUpload = function (_super) {
    __extends(XMLHttpRequestUpload, _super);

    function XMLHttpRequestUpload(request) {
      XMLHttpRequestUpload.__super__.constructor.call(this);
      this._request = request;
      this._reset();
    }

    XMLHttpRequestUpload.prototype._reset = function () {
      this._contentType = null;
      this._body = null;
      return void 0;
    };

    XMLHttpRequestUpload.prototype._setData = function (data) {
      var body, i, offset, view, _i, _j, _ref1, _ref2;
      if (typeof data === 'undefined' || data === null) {
        return;
      }
      if (typeof data === 'string') {
        if (data.length !== 0) {
          this._contentType = 'text/plain;charset=UTF-8';
        }
        this._body = new Buffer(data, 'utf8');
      } else if (Buffer.isBuffer(data)) {
        this._body = data;
      } else if (data instanceof ArrayBuffer) {
        body = new Buffer(data.byteLength);
        view = new Uint8Array(data);
        for (i = _i = 0, _ref1 = data.byteLength; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          body[i] = view[i];
        }
        this._body = body;
      } else if (data.buffer && data.buffer instanceof ArrayBuffer) {
        body = new Buffer(data.byteLength);
        offset = data.byteOffset;
        view = new Uint8Array(data.buffer);
        for (i = _j = 0, _ref2 = data.byteLength; 0 <= _ref2 ? _j < _ref2 : _j > _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
          body[i] = view[i + offset];
        }
        this._body = body;
      } else {
        throw new Error("Unsupported send() data " + data);
      }
      return void 0;
    };

    XMLHttpRequestUpload.prototype._finalizeHeaders = function (headers, loweredHeaders) {
      if (this._contentType) {
        if (!('content-type' in loweredHeaders)) {
          headers['Content-Type'] = this._contentType;
        }
      }
      if (this._body) {
        headers['Content-Length'] = this._body.length.toString();
      }
      return void 0;
    };

    XMLHttpRequestUpload.prototype._startUpload = function (request) {
      if (this._body) {
        request.write(this._body);
      }
      request.end();
      return void 0;
    };

    return XMLHttpRequestUpload;
  }(XMLHttpRequestEventTarget);

  XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;
}).call(undefined);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20), __webpack_require__(9).Buffer))

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = extend;

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }

    return target;
}

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(154)(false);
// imports


// module
exports.push([module.i, ".bottom_left{\n  position: absolute;\n  zIndex: 1;\n  top: auto;\n  bottom: 12px;\n  left: 12px;\n  max-width: 330px;\n  font-size: 1rem !important;\n}\n.bottom_right {\n  position: absolute;\n  zIndex: 1;\n  top: auto;\n  bottom: 12px;\n  right: 7rem;\n  width: 220px;\n  color: #000;\n  background-color: #FFF;\n  font-size: .6rem !important;\n  padding: 2px !important;\n}\n.highlight-blue {\n   color: #00F;\n}\n.statement_list {\n  background-color: #FFF;\n  color: #000;\n  width: 100%;\n}\nul, li {\n  padding: 0;\n  margin: 0;\n}\nli {\n  list-style-type: none;\n}\nli.statement-item {\n  margin-bottom: .3rem !important;\n}\n.type_notation {\n  color: #999;\n}\n", ""]);

// exports


/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(372);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(374)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {
	module.hot.accept("!!../node_modules/css-loader/index.js!./revealxapi.css", function() {
		var newContent = require("!!../node_modules/css-loader/index.js!./revealxapi.css");

		if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];

		var locals = (function(a, b) {
			var key, idx = 0;

			for(key in a) {
				if(!b || a[key] !== b[key]) return false;
				idx++;
			}

			for(key in b) idx--;

			return idx === 0;
		}(content.locals, newContent.locals));

		if(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');

		update(newContent);
	});

	module.hot.dispose(function() { update(); });
}

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target) {
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(363);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 375 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(138);


/***/ })
/******/ ]);
//# sourceMappingURL=xapi.js.map